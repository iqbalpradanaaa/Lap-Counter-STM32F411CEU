
Project_UTS004.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a90  08005a90  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a98  08005a98  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a98  08005a98  00015a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a9c  08005a9c  00015a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000090  08005b30  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08005b30  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f554  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002015  00000000  00000000  0002f614  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea8  00000000  00000000  00031630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  000324d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b2f  00000000  00000000  00033290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9a5  00000000  00000000  00049dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f6fc  00000000  00000000  00055764  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4e60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040ac  00000000  00000000  000e4edc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800574c 	.word	0x0800574c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800574c 	.word	0x0800574c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SystemClock_Config>:
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart1;

void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 fcce 	bl	8004f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b27      	ldr	r3, [pc, #156]	; (8000648 <SystemClock_Config+0xc8>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a26      	ldr	r2, [pc, #152]	; (8000648 <SystemClock_Config+0xc8>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b21      	ldr	r3, [pc, #132]	; (800064c <SystemClock_Config+0xcc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a20      	ldr	r2, [pc, #128]	; (800064c <SystemClock_Config+0xcc>)
 80005ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <SystemClock_Config+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005f0:	2319      	movs	r3, #25
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005f4:	2390      	movs	r3, #144	; 0x90
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f002 ff83 	bl	8003510 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000610:	f000 f982 	bl	8000918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2102      	movs	r1, #2
 8000630:	4618      	mov	r0, r3
 8000632:	f003 f9dd 	bl	80039f0 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800063c:	f000 f96c 	bl	8000918 <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	; 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_I2C1_Init>:

void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <MX_I2C1_Init+0x54>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_I2C1_Init+0x50>)
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_I2C1_Init+0x58>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_I2C1_Init+0x50>)
 800066e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_I2C1_Init+0x50>)
 800068e:	f002 faff 	bl	8002c90 <HAL_I2C_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000698:	f000 f93e 	bl	8000918 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000150 	.word	0x20000150
 80006a4:	40005400 	.word	0x40005400
 80006a8:	000186a0 	.word	0x000186a0

080006ac <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_TIM3_Init+0x94>)
 80006ca:	4a1e      	ldr	r2, [pc, #120]	; (8000744 <MX_TIM3_Init+0x98>)
 80006cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 46000-1;
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MX_TIM3_Init+0x94>)
 80006d0:	f24b 32af 	movw	r2, #45999	; 0xb3af
 80006d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_TIM3_Init+0x94>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 26.6-1;
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_TIM3_Init+0x94>)
 80006de:	2219      	movs	r2, #25
 80006e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_TIM3_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_TIM3_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006ee:	4814      	ldr	r0, [pc, #80]	; (8000740 <MX_TIM3_Init+0x94>)
 80006f0:	f003 fb4a 	bl	8003d88 <HAL_TIM_Base_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f90d 	bl	8000918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	4619      	mov	r1, r3
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <MX_TIM3_Init+0x94>)
 800070c:	f003 fcbe 	bl	800408c <HAL_TIM_ConfigClockSource>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000716:	f000 f8ff 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <MX_TIM3_Init+0x94>)
 8000728:	f003 feaa 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000732:	f000 f8f1 	bl	8000918 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200001a4 	.word	0x200001a4
 8000744:	40000400 	.word	0x40000400

08000748 <MX_TIM4_Init>:

void MX_TIM4_Init(uint32_t Periode)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_TIM4_Init+0x9c>)
 800076a:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <MX_TIM4_Init+0xa0>)
 800076c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 46000-1;
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_TIM4_Init+0x9c>)
 8000770:	f24b 32af 	movw	r2, #45999	; 0xb3af
 8000774:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_TIM4_Init+0x9c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = (Periode)-1;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_TIM4_Init+0x9c>)
 8000782:	60d3      	str	r3, [r2, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_TIM4_Init+0x9c>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_TIM4_Init+0x9c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000790:	4814      	ldr	r0, [pc, #80]	; (80007e4 <MX_TIM4_Init+0x9c>)
 8000792:	f003 faf9 	bl	8003d88 <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800079c:	f000 f8bc 	bl	8000918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_TIM4_Init+0x9c>)
 80007ae:	f003 fc6d 	bl	800408c <HAL_TIM_ConfigClockSource>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80007b8:	f000 f8ae 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_TIM4_Init+0x9c>)
 80007cc:	f003 fe58 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80007d6:	f000 f89f 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000110 	.word	0x20000110
 80007e8:	40000800 	.word	0x40000800

080007ec <MX_USART1_UART_Init>:
void MX_USART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_USART1_UART_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 8000824:	f003 feae 	bl	8004584 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800082e:	f000 f873 	bl	8000918 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200001e4 	.word	0x200001e4
 800083c:	40011000 	.word	0x40011000

08000840 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <MX_GPIO_Init+0xcc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a2b      	ldr	r2, [pc, #172]	; (800090c <MX_GPIO_Init+0xcc>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <MX_GPIO_Init+0xcc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <MX_GPIO_Init+0xcc>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a24      	ldr	r2, [pc, #144]	; (800090c <MX_GPIO_Init+0xcc>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b22      	ldr	r3, [pc, #136]	; (800090c <MX_GPIO_Init+0xcc>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_GPIO_Init+0xcc>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a1d      	ldr	r2, [pc, #116]	; (800090c <MX_GPIO_Init+0xcc>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_GPIO_Init+0xcc>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80008aa:	2200      	movs	r2, #0
 80008ac:	21f8      	movs	r1, #248	; 0xf8
 80008ae:	4818      	ldr	r0, [pc, #96]	; (8000910 <MX_GPIO_Init+0xd0>)
 80008b0:	f002 f9ba 	bl	8002c28 <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80008b4:	23f8      	movs	r3, #248	; 0xf8
 80008b6:	60fb      	str	r3, [r7, #12]
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008bc:	2301      	movs	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4811      	ldr	r0, [pc, #68]	; (8000910 <MX_GPIO_Init+0xd0>)
 80008cc:	f002 f812 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSR1_Pin SSR2_Pin SSR3_Pin RST_Pin */
  GPIO_InitStruct.Pin = SSR1_Pin|SSR2_Pin|SSR3_Pin|RST_Pin;
 80008d0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4619      	mov	r1, r3
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <MX_GPIO_Init+0xd4>)
 80008e6:	f002 f805 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 80008ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000900:	f001 fff8 	bl	80028f4 <HAL_GPIO_Init>

}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000
 8000914:	40020400 	.word	0x40020400

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af02      	add	r7, sp, #8
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	f023 030f 	bic.w	r3, r3, #15
 8000938:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	011b      	lsls	r3, r3, #4
 800093e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	f043 030c 	orr.w	r3, r3, #12
 8000946:	b2db      	uxtb	r3, r3
 8000948:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	b2db      	uxtb	r3, r3
 8000952:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000954:	7bbb      	ldrb	r3, [r7, #14]
 8000956:	f043 030c 	orr.w	r3, r3, #12
 800095a:	b2db      	uxtb	r3, r3
 800095c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	b2db      	uxtb	r3, r3
 8000966:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000968:	f107 0208 	add.w	r2, r7, #8
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2304      	movs	r3, #4
 8000972:	214e      	movs	r1, #78	; 0x4e
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <lcd_send_cmd+0x5c>)
 8000976:	f002 fac3 	bl	8002f00 <HAL_I2C_Master_Transmit>
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000150 	.word	0x20000150

08000988 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
    switch (row)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d008      	beq.n	80009aa <lcd_put_cur+0x22>
 8000998:	2b02      	cmp	r3, #2
 800099a:	d00b      	beq.n	80009b4 <lcd_put_cur+0x2c>
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10e      	bne.n	80009be <lcd_put_cur+0x36>
    {
        case 0:
            col |= 0x80;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a6:	603b      	str	r3, [r7, #0]
            break;
 80009a8:	e009      	b.n	80009be <lcd_put_cur+0x36>
        case 1:
            col |= 0xC0;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80009b0:	603b      	str	r3, [r7, #0]
            break;
 80009b2:	e004      	b.n	80009be <lcd_put_cur+0x36>
        case 2:
        	col |= 0x94;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 80009ba:	603b      	str	r3, [r7, #0]
            break;
 80009bc:	bf00      	nop
    }

    lcd_send_cmd (col);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffb0 	bl	8000928 <lcd_send_cmd>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f023 030f 	bic.w	r3, r3, #15
 80009e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	f043 030d 	orr.w	r3, r3, #13
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	f043 0309 	orr.w	r3, r3, #9
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	f043 030d 	orr.w	r3, r3, #13
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	f043 0309 	orr.w	r3, r3, #9
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a10:	f107 0208 	add.w	r2, r7, #8
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2304      	movs	r3, #4
 8000a1a:	214e      	movs	r1, #78	; 0x4e
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <lcd_send_data+0x5c>)
 8000a1e:	f002 fa6f 	bl	8002f00 <HAL_I2C_Master_Transmit>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000150 	.word	0x20000150

08000a30 <lcd_clear>:

void lcd_clear (void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff ff76 	bl	8000928 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	e005      	b.n	8000a4e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000a42:	2020      	movs	r0, #32
 8000a44:	f7ff ffc4 	bl	80009d0 <lcd_send_data>
	for (int i=0; i<100; i++)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b63      	cmp	r3, #99	; 0x63
 8000a52:	ddf6      	ble.n	8000a42 <lcd_clear+0x12>
	}
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <lcd_init>:

void lcd_init (void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000a60:	2032      	movs	r0, #50	; 0x32
 8000a62:	f001 fe13 	bl	800268c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a66:	2030      	movs	r0, #48	; 0x30
 8000a68:	f7ff ff5e 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000a6c:	2005      	movs	r0, #5
 8000a6e:	f001 fe0d 	bl	800268c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a72:	2030      	movs	r0, #48	; 0x30
 8000a74:	f7ff ff58 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f001 fe07 	bl	800268c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a7e:	2030      	movs	r0, #48	; 0x30
 8000a80:	f7ff ff52 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(10);
 8000a84:	200a      	movs	r0, #10
 8000a86:	f001 fe01 	bl	800268c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000a8a:	2020      	movs	r0, #32
 8000a8c:	f7ff ff4c 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(10);
 8000a90:	200a      	movs	r0, #10
 8000a92:	f001 fdfb 	bl	800268c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a96:	2028      	movs	r0, #40	; 0x28
 8000a98:	f7ff ff46 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(1);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f001 fdf5 	bl	800268c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000aa2:	2008      	movs	r0, #8
 8000aa4:	f7ff ff40 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f001 fdef 	bl	800268c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff ff3a 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f001 fde9 	bl	800268c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000aba:	2006      	movs	r0, #6
 8000abc:	f7ff ff34 	bl	8000928 <lcd_send_cmd>
	HAL_Delay(1);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f001 fde3 	bl	800268c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000ac6:	200c      	movs	r0, #12
 8000ac8:	f7ff ff2e 	bl	8000928 <lcd_send_cmd>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ad8:	e006      	b.n	8000ae8 <lcd_send_string+0x18>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff74 	bl	80009d0 <lcd_send_data>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1f4      	bne.n	8000ada <lcd_send_string+0xa>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <main>:
#include "system.h"



int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

	system();
 8000afc:	f000 f978 	bl	8000df0 <system>

  while (1)
 8000b00:	e7fe      	b.n	8000b00 <main+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_I2C_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b92:	23c0      	movs	r3, #192	; 0xc0
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b96:	2312      	movs	r3, #18
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <HAL_I2C_MspInit+0x8c>)
 8000bae:	f001 fea1 	bl	80028f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020400 	.word	0x40020400

08000be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <HAL_TIM_Base_MspInit+0x80>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d116      	bne.n	8000c24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_TIM_Base_MspInit+0x84>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <HAL_TIM_Base_MspInit+0x84>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_TIM_Base_MspInit+0x84>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	201d      	movs	r0, #29
 8000c18:	f001 fe35 	bl	8002886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c1c:	201d      	movs	r0, #29
 8000c1e:	f001 fe4e 	bl	80028be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c22:	e01a      	b.n	8000c5a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <HAL_TIM_Base_MspInit+0x88>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d115      	bne.n	8000c5a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_TIM_Base_MspInit+0x84>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a0c      	ldr	r2, [pc, #48]	; (8000c68 <HAL_TIM_Base_MspInit+0x84>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_TIM_Base_MspInit+0x84>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	201e      	movs	r0, #30
 8000c50:	f001 fe19 	bl	8002886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c54:	201e      	movs	r0, #30
 8000c56:	f001 fe32 	bl	80028be <HAL_NVIC_EnableIRQ>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40000400 	.word	0x40000400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40000800 	.word	0x40000800

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <HAL_UART_MspInit+0x84>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12c      	bne.n	8000cec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000c9c:	f043 0310 	orr.w	r3, r3, #16
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000ce8:	f001 fe04 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	; 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40011000 	.word	0x40011000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f001 fc7a 	bl	800264c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <TIM3_IRQHandler+0x10>)
 8000d62:	f003 f88b 	bl	8003e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001a4 	.word	0x200001a4

08000d70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM4_IRQHandler+0x10>)
 8000d76:	f003 f881 	bl	8003e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000110 	.word	0x20000110

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f004 f892 	bl	8004edc <__errno>
 8000db8:	4602      	mov	r2, r0
 8000dba:	230c      	movs	r3, #12
 8000dbc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20020000 	.word	0x20020000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	200000ac 	.word	0x200000ac
 8000dec:	20000278 	.word	0x20000278

08000df0 <system>:
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart1;

void system (void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  HAL_Init();
 8000df4:	f001 fbd8 	bl	80025a8 <HAL_Init>
  SystemClock_Config();
 8000df8:	f7ff fbc2 	bl	8000580 <SystemClock_Config>
  MX_GPIO_Init();
 8000dfc:	f7ff fd20 	bl	8000840 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e00:	f7ff fc26 	bl	8000650 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000e04:	f7ff fc52 	bl	80006ac <MX_TIM3_Init>
  MX_TIM4_Init(2);
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f7ff fc9d 	bl	8000748 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000e0e:	f7ff fced 	bl	80007ec <MX_USART1_UART_Init>

  lcd_init();
 8000e12:	f7ff fe23 	bl	8000a5c <lcd_init>
  lcd_put_cur(1,3);
 8000e16:	2103      	movs	r1, #3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff fdb5 	bl	8000988 <lcd_put_cur>
  lcd_send_string ("-LAP COUNTING-");
 8000e1e:	4815      	ldr	r0, [pc, #84]	; (8000e74 <system+0x84>)
 8000e20:	f7ff fe56 	bl	8000ad0 <lcd_send_string>
  HAL_Delay(1000);
 8000e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e28:	f001 fc30 	bl	800268c <HAL_Delay>
  lcd_put_cur(2, 1);
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f7ff fdaa 	bl	8000988 <lcd_put_cur>
  lcd_send_string("3D4EA | 1110181004");
 8000e34:	4810      	ldr	r0, [pc, #64]	; (8000e78 <system+0x88>)
 8000e36:	f7ff fe4b 	bl	8000ad0 <lcd_send_string>
  HAL_Delay(3000);
 8000e3a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e3e:	f001 fc25 	bl	800268c <HAL_Delay>
  lcd_clear ();
 8000e42:	f7ff fdf5 	bl	8000a30 <lcd_clear>
  HAL_TIM_Base_Start_IT(&htim4);
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <system+0x8c>)
 8000e48:	f002 ffc9 	bl	8003dde <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rProject UTS Sistem Embedded 2020",35,10);
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	2223      	movs	r2, #35	; 0x23
 8000e50:	490b      	ldr	r1, [pc, #44]	; (8000e80 <system+0x90>)
 8000e52:	480c      	ldr	r0, [pc, #48]	; (8000e84 <system+0x94>)
 8000e54:	f003 fbe3 	bl	800461e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r---------Lap Counting-----------",35,10);
 8000e58:	230a      	movs	r3, #10
 8000e5a:	2223      	movs	r2, #35	; 0x23
 8000e5c:	490a      	ldr	r1, [pc, #40]	; (8000e88 <system+0x98>)
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <system+0x94>)
 8000e60:	f003 fbdd 	bl	800461e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r------3D4EA---1110181004--------",35,10);
 8000e64:	230a      	movs	r3, #10
 8000e66:	2223      	movs	r2, #35	; 0x23
 8000e68:	4908      	ldr	r1, [pc, #32]	; (8000e8c <system+0x9c>)
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <system+0x94>)
 8000e6c:	f003 fbd7 	bl	800461e <HAL_UART_Transmit>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	08005764 	.word	0x08005764
 8000e78:	08005774 	.word	0x08005774
 8000e7c:	20000110 	.word	0x20000110
 8000e80:	08005788 	.word	0x08005788
 8000e84:	200001e4 	.word	0x200001e4
 8000e88:	080057ac 	.word	0x080057ac
 8000e8c:	080057d0 	.word	0x080057d0

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <SystemInit+0x28>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <SystemInit+0x28>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SystemInit+0x28>)
 8000ea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eaa:	609a      	str	r2, [r3, #8]
#endif
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <StartStop>:
uint32_t Timeout_loop5 	= 0;
uint32_t Timeout_value5 = 2000;


void StartStop(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(SS_GPIO_Port, SS_Pin)== GPIO_PIN_RESET && (Timeout_loop++<=Timeout_value)){
 8000ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec4:	4843      	ldr	r0, [pc, #268]	; (8000fd4 <StartStop+0x118>)
 8000ec6:	f001 fe97 	bl	8002bf8 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10f      	bne.n	8000ef0 <StartStop+0x34>
 8000ed0:	4b41      	ldr	r3, [pc, #260]	; (8000fd8 <StartStop+0x11c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	4940      	ldr	r1, [pc, #256]	; (8000fd8 <StartStop+0x11c>)
 8000ed8:	600a      	str	r2, [r1, #0]
 8000eda:	4a40      	ldr	r2, [pc, #256]	; (8000fdc <StartStop+0x120>)
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d806      	bhi.n	8000ef0 <StartStop+0x34>
		bouncing=(bouncing<<1);
 8000ee2:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <StartStop+0x124>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <StartStop+0x124>)
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e047      	b.n	8000f80 <StartStop+0xc4>
	}

	else if(HAL_GPIO_ReadPin(SS_GPIO_Port, SS_Pin)== GPIO_PIN_RESET && (Timeout_loop++>Timeout_value)){
 8000ef0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef4:	4837      	ldr	r0, [pc, #220]	; (8000fd4 <StartStop+0x118>)
 8000ef6:	f001 fe7f 	bl	8002bf8 <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d120      	bne.n	8000f42 <StartStop+0x86>
 8000f00:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <StartStop+0x11c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	4934      	ldr	r1, [pc, #208]	; (8000fd8 <StartStop+0x11c>)
 8000f08:	600a      	str	r2, [r1, #0]
 8000f0a:	4a34      	ldr	r2, [pc, #208]	; (8000fdc <StartStop+0x120>)
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d917      	bls.n	8000f42 <StartStop+0x86>
		if(Timeout_loop>=Timeout_value+300){
 8000f12:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <StartStop+0x120>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <StartStop+0x11c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d82e      	bhi.n	8000f80 <StartStop+0xc4>
			Timeout_loop=Timeout_value+1;
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <StartStop+0x120>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	4a2b      	ldr	r2, [pc, #172]	; (8000fd8 <StartStop+0x11c>)
 8000f2a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4829      	ldr	r0, [pc, #164]	; (8000fd4 <StartStop+0x118>)
 8000f30:	f001 fe93 	bl	8002c5a <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rErr: StartStop_Button ",25,10);
 8000f34:	230a      	movs	r3, #10
 8000f36:	2219      	movs	r2, #25
 8000f38:	492a      	ldr	r1, [pc, #168]	; (8000fe4 <StartStop+0x128>)
 8000f3a:	482b      	ldr	r0, [pc, #172]	; (8000fe8 <StartStop+0x12c>)
 8000f3c:	f003 fb6f 	bl	800461e <HAL_UART_Transmit>
		if(Timeout_loop>=Timeout_value+300){
 8000f40:	e01e      	b.n	8000f80 <StartStop+0xc4>
		}
	}

	else if(HAL_GPIO_ReadPin(SS_GPIO_Port, SS_Pin)== GPIO_PIN_SET && Timeout_loop<=Timeout_value){
 8000f42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f46:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <StartStop+0x118>)
 8000f48:	f001 fe56 	bl	8002bf8 <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d110      	bne.n	8000f74 <StartStop+0xb8>
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <StartStop+0x11c>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <StartStop+0x120>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d80a      	bhi.n	8000f74 <StartStop+0xb8>
		bouncing = (bouncing<<1)|1;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <StartStop+0x124>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <StartStop+0x124>)
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	e005      	b.n	8000f80 <StartStop+0xc4>
	}
	else{
		Timeout_loop=0;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <StartStop+0x11c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
		bouncing=0xFF;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <StartStop+0x124>)
 8000f7c:	22ff      	movs	r2, #255	; 0xff
 8000f7e:	701a      	strb	r2, [r3, #0]
	}

	if (bouncing==0x01){
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <StartStop+0x124>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d122      	bne.n	8000fce <StartStop+0x112>
		if(runstop==0){
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <StartStop+0x130>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10c      	bne.n	8000faa <StartStop+0xee>
			HAL_TIM_Base_Start_IT(&htim3);
 8000f90:	4817      	ldr	r0, [pc, #92]	; (8000ff0 <StartStop+0x134>)
 8000f92:	f002 ff24 	bl	8003dde <HAL_TIM_Base_Start_IT>
			runstop=1;
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <StartStop+0x130>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r--------Start Counting----------",35,10);
 8000f9c:	230a      	movs	r3, #10
 8000f9e:	2223      	movs	r2, #35	; 0x23
 8000fa0:	4914      	ldr	r1, [pc, #80]	; (8000ff4 <StartStop+0x138>)
 8000fa2:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <StartStop+0x12c>)
 8000fa4:	f003 fb3b 	bl	800461e <HAL_UART_Transmit>
 8000fa8:	e00b      	b.n	8000fc2 <StartStop+0x106>
		}
		else{
			HAL_TIM_Base_Stop_IT(&htim3);
 8000faa:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <StartStop+0x134>)
 8000fac:	f002 ff3b 	bl	8003e26 <HAL_TIM_Base_Stop_IT>
			runstop=0;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <StartStop+0x130>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r---------Stop Counting----------",35,10);
 8000fb6:	230a      	movs	r3, #10
 8000fb8:	2223      	movs	r2, #35	; 0x23
 8000fba:	490f      	ldr	r1, [pc, #60]	; (8000ff8 <StartStop+0x13c>)
 8000fbc:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <StartStop+0x12c>)
 8000fbe:	f003 fb2e 	bl	800461e <HAL_UART_Transmit>
		}

		Timeout_loop=0;
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <StartStop+0x11c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
		bouncing=0xFF;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <StartStop+0x124>)
 8000fca:	22ff      	movs	r2, #255	; 0xff
 8000fcc:	701a      	strb	r2, [r3, #0]
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	200000f4 	.word	0x200000f4
 8000fdc:	20000010 	.word	0x20000010
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	080057f4 	.word	0x080057f4
 8000fe8:	200001e4 	.word	0x200001e4
 8000fec:	200000b0 	.word	0x200000b0
 8000ff0:	200001a4 	.word	0x200001a4
 8000ff4:	08005810 	.word	0x08005810
 8000ff8:	08005834 	.word	0x08005834

08000ffc <Reset>:

void Reset(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(RST_GPIO_Port,RST_Pin)== GPIO_PIN_RESET && (Timeout_loop2++<=Timeout_value2)){
 8001000:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001004:	485e      	ldr	r0, [pc, #376]	; (8001180 <Reset+0x184>)
 8001006:	f001 fdf7 	bl	8002bf8 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10f      	bne.n	8001030 <Reset+0x34>
 8001010:	4b5c      	ldr	r3, [pc, #368]	; (8001184 <Reset+0x188>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	1c5a      	adds	r2, r3, #1
 8001016:	495b      	ldr	r1, [pc, #364]	; (8001184 <Reset+0x188>)
 8001018:	600a      	str	r2, [r1, #0]
 800101a:	4a5b      	ldr	r2, [pc, #364]	; (8001188 <Reset+0x18c>)
 800101c:	6812      	ldr	r2, [r2, #0]
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <Reset+0x34>
		bouncing2=(bouncing2<<1);
 8001022:	4b5a      	ldr	r3, [pc, #360]	; (800118c <Reset+0x190>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b58      	ldr	r3, [pc, #352]	; (800118c <Reset+0x190>)
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e047      	b.n	80010c0 <Reset+0xc4>

	}

	else if(HAL_GPIO_ReadPin(RST_GPIO_Port,RST_Pin)== GPIO_PIN_RESET && (Timeout_loop2++>Timeout_value2)){
 8001030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001034:	4852      	ldr	r0, [pc, #328]	; (8001180 <Reset+0x184>)
 8001036:	f001 fddf 	bl	8002bf8 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d120      	bne.n	8001082 <Reset+0x86>
 8001040:	4b50      	ldr	r3, [pc, #320]	; (8001184 <Reset+0x188>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	494f      	ldr	r1, [pc, #316]	; (8001184 <Reset+0x188>)
 8001048:	600a      	str	r2, [r1, #0]
 800104a:	4a4f      	ldr	r2, [pc, #316]	; (8001188 <Reset+0x18c>)
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	4293      	cmp	r3, r2
 8001050:	d917      	bls.n	8001082 <Reset+0x86>
		if(Timeout_loop2>=Timeout_value2+300){
 8001052:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <Reset+0x18c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 800105a:	4b4a      	ldr	r3, [pc, #296]	; (8001184 <Reset+0x188>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d82e      	bhi.n	80010c0 <Reset+0xc4>
			Timeout_loop2=Timeout_value2+1;
 8001062:	4b49      	ldr	r3, [pc, #292]	; (8001188 <Reset+0x18c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	4a46      	ldr	r2, [pc, #280]	; (8001184 <Reset+0x188>)
 800106a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 800106c:	2110      	movs	r1, #16
 800106e:	4848      	ldr	r0, [pc, #288]	; (8001190 <Reset+0x194>)
 8001070:	f001 fdf3 	bl	8002c5a <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rErr: Reset_Button ",23,10);
 8001074:	230a      	movs	r3, #10
 8001076:	2217      	movs	r2, #23
 8001078:	4946      	ldr	r1, [pc, #280]	; (8001194 <Reset+0x198>)
 800107a:	4847      	ldr	r0, [pc, #284]	; (8001198 <Reset+0x19c>)
 800107c:	f003 facf 	bl	800461e <HAL_UART_Transmit>
		if(Timeout_loop2>=Timeout_value2+300){
 8001080:	e01e      	b.n	80010c0 <Reset+0xc4>
		}
	}

	else if(HAL_GPIO_ReadPin(RST_GPIO_Port,RST_Pin)== GPIO_PIN_SET && Timeout_loop2<=Timeout_value2){
 8001082:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001086:	483e      	ldr	r0, [pc, #248]	; (8001180 <Reset+0x184>)
 8001088:	f001 fdb6 	bl	8002bf8 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	2b01      	cmp	r3, #1
 8001090:	d110      	bne.n	80010b4 <Reset+0xb8>
 8001092:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <Reset+0x188>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <Reset+0x18c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d80a      	bhi.n	80010b4 <Reset+0xb8>
		bouncing2 = (bouncing2<<1)|1;
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <Reset+0x190>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b37      	ldr	r3, [pc, #220]	; (800118c <Reset+0x190>)
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	e005      	b.n	80010c0 <Reset+0xc4>
	}

	else{
		Timeout_loop2=0;
 80010b4:	4b33      	ldr	r3, [pc, #204]	; (8001184 <Reset+0x188>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
		bouncing2=0xFF;
 80010ba:	4b34      	ldr	r3, [pc, #208]	; (800118c <Reset+0x190>)
 80010bc:	22ff      	movs	r2, #255	; 0xff
 80010be:	701a      	strb	r2, [r3, #0]
	}

	if (bouncing2==0x01){
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <Reset+0x190>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d159      	bne.n	800117c <Reset+0x180>
		HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r------------Reset---------------",35,10);
 80010c8:	230a      	movs	r3, #10
 80010ca:	2223      	movs	r2, #35	; 0x23
 80010cc:	4933      	ldr	r1, [pc, #204]	; (800119c <Reset+0x1a0>)
 80010ce:	4832      	ldr	r0, [pc, #200]	; (8001198 <Reset+0x19c>)
 80010d0:	f003 faa5 	bl	800461e <HAL_UART_Transmit>

		HAL_TIM_Base_Stop_IT(&htim3);
 80010d4:	4832      	ldr	r0, [pc, #200]	; (80011a0 <Reset+0x1a4>)
 80010d6:	f002 fea6 	bl	8003e26 <HAL_TIM_Base_Stop_IT>

		ms=0;	dd=0;	mm=0;
 80010da:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <Reset+0x1a8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <Reset+0x1ac>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <Reset+0x1b0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
		ms1=0;	dd1=0;	mm1=0;
 80010ec:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <Reset+0x1b4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <Reset+0x1b8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <Reset+0x1bc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
		ms2=0;	dd2=0;	mm2=0;
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <Reset+0x1c0>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <Reset+0x1c4>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <Reset+0x1c8>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
		ms3=0;	dd3=0;	mm3=0;
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <Reset+0x1cc>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <Reset+0x1d0>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <Reset+0x1d4>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]

		runstop=0;
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <Reset+0x1d8>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
		lapA=0;	lapB=0;	lapC=0;
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <Reset+0x1dc>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <Reset+0x1e0>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <Reset+0x1e4>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]

		mmlast1=0; ddlast1=0; mslast1=0;
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <Reset+0x1e8>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <Reset+0x1ec>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <Reset+0x1f0>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
		mmlast2=0; ddlast2=0; mslast2=0;
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <Reset+0x1f4>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <Reset+0x1f8>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <Reset+0x1fc>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
		mmlast3=0; ddlast3=0; mslast3=0;
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <Reset+0x200>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <Reset+0x204>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <Reset+0x208>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]

		Timeout_loop2=0;
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <Reset+0x188>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
		bouncing2=0xFF;
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <Reset+0x190>)
 8001178:	22ff      	movs	r2, #255	; 0xff
 800117a:	701a      	strb	r2, [r3, #0]
	}
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40020400 	.word	0x40020400
 8001184:	200000f8 	.word	0x200000f8
 8001188:	20000014 	.word	0x20000014
 800118c:	20000009 	.word	0x20000009
 8001190:	40020000 	.word	0x40020000
 8001194:	08005858 	.word	0x08005858
 8001198:	200001e4 	.word	0x200001e4
 800119c:	08005870 	.word	0x08005870
 80011a0:	200001a4 	.word	0x200001a4
 80011a4:	200000b4 	.word	0x200000b4
 80011a8:	200000b8 	.word	0x200000b8
 80011ac:	200000bc 	.word	0x200000bc
 80011b0:	20000240 	.word	0x20000240
 80011b4:	20000244 	.word	0x20000244
 80011b8:	2000022c 	.word	0x2000022c
 80011bc:	20000228 	.word	0x20000228
 80011c0:	20000264 	.word	0x20000264
 80011c4:	20000224 	.word	0x20000224
 80011c8:	20000260 	.word	0x20000260
 80011cc:	20000268 	.word	0x20000268
 80011d0:	2000025c 	.word	0x2000025c
 80011d4:	200000b0 	.word	0x200000b0
 80011d8:	200000c4 	.word	0x200000c4
 80011dc:	200000c8 	.word	0x200000c8
 80011e0:	200000cc 	.word	0x200000cc
 80011e4:	200000d8 	.word	0x200000d8
 80011e8:	200000d4 	.word	0x200000d4
 80011ec:	200000d0 	.word	0x200000d0
 80011f0:	200000e4 	.word	0x200000e4
 80011f4:	200000e0 	.word	0x200000e0
 80011f8:	200000dc 	.word	0x200000dc
 80011fc:	200000f0 	.word	0x200000f0
 8001200:	200000ec 	.word	0x200000ec
 8001204:	200000e8 	.word	0x200000e8

08001208 <ssr1>:

void ssr1(void)
{
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af06      	add	r7, sp, #24
	if(HAL_GPIO_ReadPin(SSR1_GPIO_Port,SSR1_Pin)== GPIO_PIN_RESET && (Timeout_loop3++<=Timeout_value3)){
 800120e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001212:	4895      	ldr	r0, [pc, #596]	; (8001468 <ssr1+0x260>)
 8001214:	f001 fcf0 	bl	8002bf8 <HAL_GPIO_ReadPin>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10f      	bne.n	800123e <ssr1+0x36>
 800121e:	4b93      	ldr	r3, [pc, #588]	; (800146c <ssr1+0x264>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	4991      	ldr	r1, [pc, #580]	; (800146c <ssr1+0x264>)
 8001226:	600a      	str	r2, [r1, #0]
 8001228:	4a91      	ldr	r2, [pc, #580]	; (8001470 <ssr1+0x268>)
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	4293      	cmp	r3, r2
 800122e:	d806      	bhi.n	800123e <ssr1+0x36>
		bouncing3=(bouncing3<<1);
 8001230:	4b90      	ldr	r3, [pc, #576]	; (8001474 <ssr1+0x26c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b8e      	ldr	r3, [pc, #568]	; (8001474 <ssr1+0x26c>)
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	e047      	b.n	80012ce <ssr1+0xc6>

	}

	else if(HAL_GPIO_ReadPin(SSR1_GPIO_Port,SSR1_Pin)== GPIO_PIN_RESET && (Timeout_loop3++>Timeout_value3)){
 800123e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001242:	4889      	ldr	r0, [pc, #548]	; (8001468 <ssr1+0x260>)
 8001244:	f001 fcd8 	bl	8002bf8 <HAL_GPIO_ReadPin>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d120      	bne.n	8001290 <ssr1+0x88>
 800124e:	4b87      	ldr	r3, [pc, #540]	; (800146c <ssr1+0x264>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	4985      	ldr	r1, [pc, #532]	; (800146c <ssr1+0x264>)
 8001256:	600a      	str	r2, [r1, #0]
 8001258:	4a85      	ldr	r2, [pc, #532]	; (8001470 <ssr1+0x268>)
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	4293      	cmp	r3, r2
 800125e:	d917      	bls.n	8001290 <ssr1+0x88>
		if(Timeout_loop3>=Timeout_value3+300){
 8001260:	4b83      	ldr	r3, [pc, #524]	; (8001470 <ssr1+0x268>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8001268:	4b80      	ldr	r3, [pc, #512]	; (800146c <ssr1+0x264>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d82e      	bhi.n	80012ce <ssr1+0xc6>
			Timeout_loop3=Timeout_value3+1;
 8001270:	4b7f      	ldr	r3, [pc, #508]	; (8001470 <ssr1+0x268>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a7d      	ldr	r2, [pc, #500]	; (800146c <ssr1+0x264>)
 8001278:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 800127a:	2120      	movs	r1, #32
 800127c:	487e      	ldr	r0, [pc, #504]	; (8001478 <ssr1+0x270>)
 800127e:	f001 fcec 	bl	8002c5a <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rErr: Sensor 1 ",18,10);
 8001282:	230a      	movs	r3, #10
 8001284:	2212      	movs	r2, #18
 8001286:	497d      	ldr	r1, [pc, #500]	; (800147c <ssr1+0x274>)
 8001288:	487d      	ldr	r0, [pc, #500]	; (8001480 <ssr1+0x278>)
 800128a:	f003 f9c8 	bl	800461e <HAL_UART_Transmit>
		if(Timeout_loop3>=Timeout_value3+300){
 800128e:	e01e      	b.n	80012ce <ssr1+0xc6>
		}
	}

	else if(HAL_GPIO_ReadPin(SSR1_GPIO_Port,SSR1_Pin)== GPIO_PIN_SET && Timeout_loop3<=Timeout_value3){
 8001290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001294:	4874      	ldr	r0, [pc, #464]	; (8001468 <ssr1+0x260>)
 8001296:	f001 fcaf 	bl	8002bf8 <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	2b01      	cmp	r3, #1
 800129e:	d110      	bne.n	80012c2 <ssr1+0xba>
 80012a0:	4b72      	ldr	r3, [pc, #456]	; (800146c <ssr1+0x264>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b72      	ldr	r3, [pc, #456]	; (8001470 <ssr1+0x268>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d80a      	bhi.n	80012c2 <ssr1+0xba>
		bouncing3 = (bouncing3<<1)|1;
 80012ac:	4b71      	ldr	r3, [pc, #452]	; (8001474 <ssr1+0x26c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b6d      	ldr	r3, [pc, #436]	; (8001474 <ssr1+0x26c>)
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e005      	b.n	80012ce <ssr1+0xc6>
	}

	else{
		Timeout_loop3=0;
 80012c2:	4b6a      	ldr	r3, [pc, #424]	; (800146c <ssr1+0x264>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
		bouncing3=0xFF;
 80012c8:	4b6a      	ldr	r3, [pc, #424]	; (8001474 <ssr1+0x26c>)
 80012ca:	22ff      	movs	r2, #255	; 0xff
 80012cc:	701a      	strb	r2, [r3, #0]
	}

	if (bouncing3==0x01){
 80012ce:	4b69      	ldr	r3, [pc, #420]	; (8001474 <ssr1+0x26c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	f040 816d 	bne.w	80015b2 <ssr1+0x3aa>

		mm1=(mm-mmlast1);
 80012d8:	4b6a      	ldr	r3, [pc, #424]	; (8001484 <ssr1+0x27c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a6a      	ldr	r2, [pc, #424]	; (8001488 <ssr1+0x280>)
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	1a9b      	subs	r3, r3, r2
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b69      	ldr	r3, [pc, #420]	; (800148c <ssr1+0x284>)
 80012e6:	601a      	str	r2, [r3, #0]
		dd1=(dd-ddlast1);
 80012e8:	4b69      	ldr	r3, [pc, #420]	; (8001490 <ssr1+0x288>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a69      	ldr	r2, [pc, #420]	; (8001494 <ssr1+0x28c>)
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b68      	ldr	r3, [pc, #416]	; (8001498 <ssr1+0x290>)
 80012f6:	601a      	str	r2, [r3, #0]
		ms1=(ms-mslast1);
 80012f8:	4b68      	ldr	r3, [pc, #416]	; (800149c <ssr1+0x294>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a68      	ldr	r2, [pc, #416]	; (80014a0 <ssr1+0x298>)
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	461a      	mov	r2, r3
 8001304:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <ssr1+0x29c>)
 8001306:	601a      	str	r2, [r3, #0]

		if(ms1<0){
 8001308:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <ssr1+0x29c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	da09      	bge.n	8001324 <ssr1+0x11c>
			dd1=dd1-1;
 8001310:	4b61      	ldr	r3, [pc, #388]	; (8001498 <ssr1+0x290>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3b01      	subs	r3, #1
 8001316:	4a60      	ldr	r2, [pc, #384]	; (8001498 <ssr1+0x290>)
 8001318:	6013      	str	r3, [r2, #0]
			ms1=ms1+60;
 800131a:	4b62      	ldr	r3, [pc, #392]	; (80014a4 <ssr1+0x29c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	333c      	adds	r3, #60	; 0x3c
 8001320:	4a60      	ldr	r2, [pc, #384]	; (80014a4 <ssr1+0x29c>)
 8001322:	6013      	str	r3, [r2, #0]
		}
		if(dd1<0){
 8001324:	4b5c      	ldr	r3, [pc, #368]	; (8001498 <ssr1+0x290>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	da09      	bge.n	8001340 <ssr1+0x138>
			mm1=mm1-1;
 800132c:	4b57      	ldr	r3, [pc, #348]	; (800148c <ssr1+0x284>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3b01      	subs	r3, #1
 8001332:	4a56      	ldr	r2, [pc, #344]	; (800148c <ssr1+0x284>)
 8001334:	6013      	str	r3, [r2, #0]
			dd1=dd1+60;
 8001336:	4b58      	ldr	r3, [pc, #352]	; (8001498 <ssr1+0x290>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	333c      	adds	r3, #60	; 0x3c
 800133c:	4a56      	ldr	r2, [pc, #344]	; (8001498 <ssr1+0x290>)
 800133e:	6013      	str	r3, [r2, #0]
		}

		if(mm1<0) mm1=0;
 8001340:	4b52      	ldr	r3, [pc, #328]	; (800148c <ssr1+0x284>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	da02      	bge.n	800134e <ssr1+0x146>
 8001348:	4b50      	ldr	r3, [pc, #320]	; (800148c <ssr1+0x284>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
		if(dd1<0) dd1=0;
 800134e:	4b52      	ldr	r3, [pc, #328]	; (8001498 <ssr1+0x290>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	da02      	bge.n	800135c <ssr1+0x154>
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <ssr1+0x290>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
		if(ms1<0) ms1=0;
 800135c:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <ssr1+0x29c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	da02      	bge.n	800136a <ssr1+0x162>
 8001364:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <ssr1+0x29c>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]

		mmlast1=mm;
 800136a:	4b46      	ldr	r3, [pc, #280]	; (8001484 <ssr1+0x27c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	4b45      	ldr	r3, [pc, #276]	; (8001488 <ssr1+0x280>)
 8001372:	601a      	str	r2, [r3, #0]
		ddlast1=dd;
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <ssr1+0x288>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <ssr1+0x28c>)
 800137c:	601a      	str	r2, [r3, #0]
		mslast1=ms;
 800137e:	4b47      	ldr	r3, [pc, #284]	; (800149c <ssr1+0x294>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <ssr1+0x298>)
 8001386:	601a      	str	r2, [r3, #0]

		if(runstop==1)	lapA++;
 8001388:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <ssr1+0x2a0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d105      	bne.n	800139c <ssr1+0x194>
 8001390:	4b46      	ldr	r3, [pc, #280]	; (80014ac <ssr1+0x2a4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	4a45      	ldr	r2, [pc, #276]	; (80014ac <ssr1+0x2a4>)
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e002      	b.n	80013a2 <ssr1+0x19a>
		else 			lapA=0;
 800139c:	4b43      	ldr	r3, [pc, #268]	; (80014ac <ssr1+0x2a4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]

		if(lapA<totlap){
 80013a2:	4b42      	ldr	r3, [pc, #264]	; (80014ac <ssr1+0x2a4>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <ssr1+0x2a8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	f080 808a 	bcs.w	80014c4 <ssr1+0x2bc>
			sprintf(buffs,"%d = %d%d:%d%d:%d%d",lapA,(mm1/10),(mm1%10),(dd1/10),(dd1%10),(ms1/10),(ms1%10));
 80013b0:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <ssr1+0x2a4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b35      	ldr	r3, [pc, #212]	; (800148c <ssr1+0x284>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a3e      	ldr	r2, [pc, #248]	; (80014b4 <ssr1+0x2ac>)
 80013bc:	fb82 1203 	smull	r1, r2, r2, r3
 80013c0:	1092      	asrs	r2, r2, #2
 80013c2:	17db      	asrs	r3, r3, #31
 80013c4:	eba2 0c03 	sub.w	ip, r2, r3
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <ssr1+0x284>)
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <ssr1+0x2ac>)
 80013ce:	fb83 0301 	smull	r0, r3, r3, r1
 80013d2:	109a      	asrs	r2, r3, #2
 80013d4:	17cb      	asrs	r3, r1, #31
 80013d6:	1ad2      	subs	r2, r2, r3
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	1aca      	subs	r2, r1, r3
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <ssr1+0x290>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4933      	ldr	r1, [pc, #204]	; (80014b4 <ssr1+0x2ac>)
 80013e8:	fb81 0103 	smull	r0, r1, r1, r3
 80013ec:	1089      	asrs	r1, r1, #2
 80013ee:	17db      	asrs	r3, r3, #31
 80013f0:	1acd      	subs	r5, r1, r3
 80013f2:	4b29      	ldr	r3, [pc, #164]	; (8001498 <ssr1+0x290>)
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <ssr1+0x2ac>)
 80013f8:	fb83 1300 	smull	r1, r3, r3, r0
 80013fc:	1099      	asrs	r1, r3, #2
 80013fe:	17c3      	asrs	r3, r0, #31
 8001400:	1ac9      	subs	r1, r1, r3
 8001402:	460b      	mov	r3, r1
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	1ac1      	subs	r1, r0, r3
 800140c:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <ssr1+0x29c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4828      	ldr	r0, [pc, #160]	; (80014b4 <ssr1+0x2ac>)
 8001412:	fb80 4003 	smull	r4, r0, r0, r3
 8001416:	1080      	asrs	r0, r0, #2
 8001418:	17db      	asrs	r3, r3, #31
 800141a:	1ac6      	subs	r6, r0, r3
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <ssr1+0x29c>)
 800141e:	681c      	ldr	r4, [r3, #0]
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <ssr1+0x2ac>)
 8001422:	fb83 0304 	smull	r0, r3, r3, r4
 8001426:	1098      	asrs	r0, r3, #2
 8001428:	17e3      	asrs	r3, r4, #31
 800142a:	1ac0      	subs	r0, r0, r3
 800142c:	4603      	mov	r3, r0
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4403      	add	r3, r0
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	1ae0      	subs	r0, r4, r3
 8001436:	9004      	str	r0, [sp, #16]
 8001438:	9603      	str	r6, [sp, #12]
 800143a:	9102      	str	r1, [sp, #8]
 800143c:	9501      	str	r5, [sp, #4]
 800143e:	9200      	str	r2, [sp, #0]
 8001440:	4663      	mov	r3, ip
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	491c      	ldr	r1, [pc, #112]	; (80014b8 <ssr1+0x2b0>)
 8001446:	481d      	ldr	r0, [pc, #116]	; (80014bc <ssr1+0x2b4>)
 8001448:	f003 fd7a 	bl	8004f40 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack A Lap ",14,10);
 800144c:	230a      	movs	r3, #10
 800144e:	220e      	movs	r2, #14
 8001450:	491b      	ldr	r1, [pc, #108]	; (80014c0 <ssr1+0x2b8>)
 8001452:	480b      	ldr	r0, [pc, #44]	; (8001480 <ssr1+0x278>)
 8001454:	f003 f8e3 	bl	800461e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffs,sizeof(buffs),10);
 8001458:	230a      	movs	r3, #10
 800145a:	220d      	movs	r2, #13
 800145c:	4917      	ldr	r1, [pc, #92]	; (80014bc <ssr1+0x2b4>)
 800145e:	4808      	ldr	r0, [pc, #32]	; (8001480 <ssr1+0x278>)
 8001460:	f003 f8dd 	bl	800461e <HAL_UART_Transmit>
 8001464:	e09f      	b.n	80015a6 <ssr1+0x39e>
 8001466:	bf00      	nop
 8001468:	40020400 	.word	0x40020400
 800146c:	200000fc 	.word	0x200000fc
 8001470:	20000018 	.word	0x20000018
 8001474:	2000000a 	.word	0x2000000a
 8001478:	40020000 	.word	0x40020000
 800147c:	08005894 	.word	0x08005894
 8001480:	200001e4 	.word	0x200001e4
 8001484:	200000bc 	.word	0x200000bc
 8001488:	200000d8 	.word	0x200000d8
 800148c:	2000022c 	.word	0x2000022c
 8001490:	200000b8 	.word	0x200000b8
 8001494:	200000d4 	.word	0x200000d4
 8001498:	20000244 	.word	0x20000244
 800149c:	200000b4 	.word	0x200000b4
 80014a0:	200000d0 	.word	0x200000d0
 80014a4:	20000240 	.word	0x20000240
 80014a8:	200000b0 	.word	0x200000b0
 80014ac:	200000c4 	.word	0x200000c4
 80014b0:	20000004 	.word	0x20000004
 80014b4:	66666667 	.word	0x66666667
 80014b8:	080058a8 	.word	0x080058a8
 80014bc:	20000230 	.word	0x20000230
 80014c0:	080058bc 	.word	0x080058bc
		}
		else if (lapA==totlap)
 80014c4:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <ssr1+0x3b4>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <ssr1+0x3b8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d164      	bne.n	800159a <ssr1+0x392>
		{
			lapA=totlap;
 80014d0:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <ssr1+0x3b8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a39      	ldr	r2, [pc, #228]	; (80015bc <ssr1+0x3b4>)
 80014d6:	6013      	str	r3, [r2, #0]
			sprintf(buffs,"%d = %d%d:%d%d:%d%d",lapA,(mm1/10),(mm1%10),(dd1/10),(dd1%10),(ms1/10),(ms1%10));
 80014d8:	4b38      	ldr	r3, [pc, #224]	; (80015bc <ssr1+0x3b4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <ssr1+0x3bc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a39      	ldr	r2, [pc, #228]	; (80015c8 <ssr1+0x3c0>)
 80014e4:	fb82 1203 	smull	r1, r2, r2, r3
 80014e8:	1092      	asrs	r2, r2, #2
 80014ea:	17db      	asrs	r3, r3, #31
 80014ec:	eba2 0c03 	sub.w	ip, r2, r3
 80014f0:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <ssr1+0x3bc>)
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <ssr1+0x3c0>)
 80014f6:	fb83 0301 	smull	r0, r3, r3, r1
 80014fa:	109a      	asrs	r2, r3, #2
 80014fc:	17cb      	asrs	r3, r1, #31
 80014fe:	1ad2      	subs	r2, r2, r3
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	1aca      	subs	r2, r1, r3
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <ssr1+0x3c4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	492e      	ldr	r1, [pc, #184]	; (80015c8 <ssr1+0x3c0>)
 8001510:	fb81 0103 	smull	r0, r1, r1, r3
 8001514:	1089      	asrs	r1, r1, #2
 8001516:	17db      	asrs	r3, r3, #31
 8001518:	1acd      	subs	r5, r1, r3
 800151a:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <ssr1+0x3c4>)
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <ssr1+0x3c0>)
 8001520:	fb83 1300 	smull	r1, r3, r3, r0
 8001524:	1099      	asrs	r1, r3, #2
 8001526:	17c3      	asrs	r3, r0, #31
 8001528:	1ac9      	subs	r1, r1, r3
 800152a:	460b      	mov	r3, r1
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	1ac1      	subs	r1, r0, r3
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <ssr1+0x3c8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4823      	ldr	r0, [pc, #140]	; (80015c8 <ssr1+0x3c0>)
 800153a:	fb80 4003 	smull	r4, r0, r0, r3
 800153e:	1080      	asrs	r0, r0, #2
 8001540:	17db      	asrs	r3, r3, #31
 8001542:	1ac6      	subs	r6, r0, r3
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <ssr1+0x3c8>)
 8001546:	681c      	ldr	r4, [r3, #0]
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <ssr1+0x3c0>)
 800154a:	fb83 0304 	smull	r0, r3, r3, r4
 800154e:	1098      	asrs	r0, r3, #2
 8001550:	17e3      	asrs	r3, r4, #31
 8001552:	1ac0      	subs	r0, r0, r3
 8001554:	4603      	mov	r3, r0
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4403      	add	r3, r0
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	1ae0      	subs	r0, r4, r3
 800155e:	9004      	str	r0, [sp, #16]
 8001560:	9603      	str	r6, [sp, #12]
 8001562:	9102      	str	r1, [sp, #8]
 8001564:	9501      	str	r5, [sp, #4]
 8001566:	9200      	str	r2, [sp, #0]
 8001568:	4663      	mov	r3, ip
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4919      	ldr	r1, [pc, #100]	; (80015d4 <ssr1+0x3cc>)
 800156e:	481a      	ldr	r0, [pc, #104]	; (80015d8 <ssr1+0x3d0>)
 8001570:	f003 fce6 	bl	8004f40 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack A Lap ",14,10);
 8001574:	230a      	movs	r3, #10
 8001576:	220e      	movs	r2, #14
 8001578:	4918      	ldr	r1, [pc, #96]	; (80015dc <ssr1+0x3d4>)
 800157a:	4819      	ldr	r0, [pc, #100]	; (80015e0 <ssr1+0x3d8>)
 800157c:	f003 f84f 	bl	800461e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffs,sizeof(buffs),10);
 8001580:	230a      	movs	r3, #10
 8001582:	220d      	movs	r2, #13
 8001584:	4914      	ldr	r1, [pc, #80]	; (80015d8 <ssr1+0x3d0>)
 8001586:	4816      	ldr	r0, [pc, #88]	; (80015e0 <ssr1+0x3d8>)
 8001588:	f003 f849 	bl	800461e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r-------Track A FINISH-----------",35,10);
 800158c:	230a      	movs	r3, #10
 800158e:	2223      	movs	r2, #35	; 0x23
 8001590:	4914      	ldr	r1, [pc, #80]	; (80015e4 <ssr1+0x3dc>)
 8001592:	4813      	ldr	r0, [pc, #76]	; (80015e0 <ssr1+0x3d8>)
 8001594:	f003 f843 	bl	800461e <HAL_UART_Transmit>
 8001598:	e005      	b.n	80015a6 <ssr1+0x39e>
		}
		else HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r-------Track A FINISH-----------",35,10);
 800159a:	230a      	movs	r3, #10
 800159c:	2223      	movs	r2, #35	; 0x23
 800159e:	4911      	ldr	r1, [pc, #68]	; (80015e4 <ssr1+0x3dc>)
 80015a0:	480f      	ldr	r0, [pc, #60]	; (80015e0 <ssr1+0x3d8>)
 80015a2:	f003 f83c 	bl	800461e <HAL_UART_Transmit>

		Timeout_loop3=0;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <ssr1+0x3e0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
		bouncing3=0xFF;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <ssr1+0x3e4>)
 80015ae:	22ff      	movs	r2, #255	; 0xff
 80015b0:	701a      	strb	r2, [r3, #0]

	}
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200000c4 	.word	0x200000c4
 80015c0:	20000004 	.word	0x20000004
 80015c4:	2000022c 	.word	0x2000022c
 80015c8:	66666667 	.word	0x66666667
 80015cc:	20000244 	.word	0x20000244
 80015d0:	20000240 	.word	0x20000240
 80015d4:	080058a8 	.word	0x080058a8
 80015d8:	20000230 	.word	0x20000230
 80015dc:	080058bc 	.word	0x080058bc
 80015e0:	200001e4 	.word	0x200001e4
 80015e4:	080058cc 	.word	0x080058cc
 80015e8:	200000fc 	.word	0x200000fc
 80015ec:	2000000a 	.word	0x2000000a

080015f0 <ssr2>:

void ssr2(void)
{
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af06      	add	r7, sp, #24
	if(HAL_GPIO_ReadPin(SSR2_GPIO_Port,SSR2_Pin)== GPIO_PIN_RESET && (Timeout_loop4++<=Timeout_value4)){
 80015f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fa:	4895      	ldr	r0, [pc, #596]	; (8001850 <ssr2+0x260>)
 80015fc:	f001 fafc 	bl	8002bf8 <HAL_GPIO_ReadPin>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10f      	bne.n	8001626 <ssr2+0x36>
 8001606:	4b93      	ldr	r3, [pc, #588]	; (8001854 <ssr2+0x264>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	4991      	ldr	r1, [pc, #580]	; (8001854 <ssr2+0x264>)
 800160e:	600a      	str	r2, [r1, #0]
 8001610:	4a91      	ldr	r2, [pc, #580]	; (8001858 <ssr2+0x268>)
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	4293      	cmp	r3, r2
 8001616:	d806      	bhi.n	8001626 <ssr2+0x36>
		bouncing4=(bouncing4<<1);
 8001618:	4b90      	ldr	r3, [pc, #576]	; (800185c <ssr2+0x26c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b8e      	ldr	r3, [pc, #568]	; (800185c <ssr2+0x26c>)
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	e047      	b.n	80016b6 <ssr2+0xc6>

	}

	else if(HAL_GPIO_ReadPin(SSR2_GPIO_Port,SSR2_Pin)== GPIO_PIN_RESET && (Timeout_loop4++>Timeout_value4)){
 8001626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162a:	4889      	ldr	r0, [pc, #548]	; (8001850 <ssr2+0x260>)
 800162c:	f001 fae4 	bl	8002bf8 <HAL_GPIO_ReadPin>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d120      	bne.n	8001678 <ssr2+0x88>
 8001636:	4b87      	ldr	r3, [pc, #540]	; (8001854 <ssr2+0x264>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	4985      	ldr	r1, [pc, #532]	; (8001854 <ssr2+0x264>)
 800163e:	600a      	str	r2, [r1, #0]
 8001640:	4a85      	ldr	r2, [pc, #532]	; (8001858 <ssr2+0x268>)
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	4293      	cmp	r3, r2
 8001646:	d917      	bls.n	8001678 <ssr2+0x88>
		if(Timeout_loop4>=Timeout_value4+300){
 8001648:	4b83      	ldr	r3, [pc, #524]	; (8001858 <ssr2+0x268>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8001650:	4b80      	ldr	r3, [pc, #512]	; (8001854 <ssr2+0x264>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d82e      	bhi.n	80016b6 <ssr2+0xc6>
			Timeout_loop4=Timeout_value4+1;
 8001658:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <ssr2+0x268>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	4a7d      	ldr	r2, [pc, #500]	; (8001854 <ssr2+0x264>)
 8001660:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED4_GPIO_Port,LED4_Pin);
 8001662:	2140      	movs	r1, #64	; 0x40
 8001664:	487e      	ldr	r0, [pc, #504]	; (8001860 <ssr2+0x270>)
 8001666:	f001 faf8 	bl	8002c5a <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rErr: Sensor 2 ",18,10);
 800166a:	230a      	movs	r3, #10
 800166c:	2212      	movs	r2, #18
 800166e:	497d      	ldr	r1, [pc, #500]	; (8001864 <ssr2+0x274>)
 8001670:	487d      	ldr	r0, [pc, #500]	; (8001868 <ssr2+0x278>)
 8001672:	f002 ffd4 	bl	800461e <HAL_UART_Transmit>
		if(Timeout_loop4>=Timeout_value4+300){
 8001676:	e01e      	b.n	80016b6 <ssr2+0xc6>
		}
	}

	else if(HAL_GPIO_ReadPin(SSR2_GPIO_Port,SSR2_Pin)== GPIO_PIN_SET && Timeout_loop4<=Timeout_value4){
 8001678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167c:	4874      	ldr	r0, [pc, #464]	; (8001850 <ssr2+0x260>)
 800167e:	f001 fabb 	bl	8002bf8 <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	2b01      	cmp	r3, #1
 8001686:	d110      	bne.n	80016aa <ssr2+0xba>
 8001688:	4b72      	ldr	r3, [pc, #456]	; (8001854 <ssr2+0x264>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b72      	ldr	r3, [pc, #456]	; (8001858 <ssr2+0x268>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d80a      	bhi.n	80016aa <ssr2+0xba>
		bouncing4 = (bouncing4<<1)|1;
 8001694:	4b71      	ldr	r3, [pc, #452]	; (800185c <ssr2+0x26c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b25b      	sxtb	r3, r3
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b6d      	ldr	r3, [pc, #436]	; (800185c <ssr2+0x26c>)
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	e005      	b.n	80016b6 <ssr2+0xc6>
	}

	else{
		Timeout_loop4=0;
 80016aa:	4b6a      	ldr	r3, [pc, #424]	; (8001854 <ssr2+0x264>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
		bouncing4=0xFF;
 80016b0:	4b6a      	ldr	r3, [pc, #424]	; (800185c <ssr2+0x26c>)
 80016b2:	22ff      	movs	r2, #255	; 0xff
 80016b4:	701a      	strb	r2, [r3, #0]
	}

	if (bouncing4==0x01){
 80016b6:	4b69      	ldr	r3, [pc, #420]	; (800185c <ssr2+0x26c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	f040 816d 	bne.w	800199a <ssr2+0x3aa>

		mm2=(mm-mmlast2);
 80016c0:	4b6a      	ldr	r3, [pc, #424]	; (800186c <ssr2+0x27c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a6a      	ldr	r2, [pc, #424]	; (8001870 <ssr2+0x280>)
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	1a9b      	subs	r3, r3, r2
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b69      	ldr	r3, [pc, #420]	; (8001874 <ssr2+0x284>)
 80016ce:	601a      	str	r2, [r3, #0]
		dd2=(dd-ddlast2);
 80016d0:	4b69      	ldr	r3, [pc, #420]	; (8001878 <ssr2+0x288>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a69      	ldr	r2, [pc, #420]	; (800187c <ssr2+0x28c>)
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	461a      	mov	r2, r3
 80016dc:	4b68      	ldr	r3, [pc, #416]	; (8001880 <ssr2+0x290>)
 80016de:	601a      	str	r2, [r3, #0]
		ms2=(ms-mslast2);
 80016e0:	4b68      	ldr	r3, [pc, #416]	; (8001884 <ssr2+0x294>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a68      	ldr	r2, [pc, #416]	; (8001888 <ssr2+0x298>)
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b67      	ldr	r3, [pc, #412]	; (800188c <ssr2+0x29c>)
 80016ee:	601a      	str	r2, [r3, #0]

		if(ms2<0){
 80016f0:	4b66      	ldr	r3, [pc, #408]	; (800188c <ssr2+0x29c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da09      	bge.n	800170c <ssr2+0x11c>
			dd2=dd2-1;
 80016f8:	4b61      	ldr	r3, [pc, #388]	; (8001880 <ssr2+0x290>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	4a60      	ldr	r2, [pc, #384]	; (8001880 <ssr2+0x290>)
 8001700:	6013      	str	r3, [r2, #0]
			ms2=ms2+60;
 8001702:	4b62      	ldr	r3, [pc, #392]	; (800188c <ssr2+0x29c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	333c      	adds	r3, #60	; 0x3c
 8001708:	4a60      	ldr	r2, [pc, #384]	; (800188c <ssr2+0x29c>)
 800170a:	6013      	str	r3, [r2, #0]
		}
		if(dd2<0){
 800170c:	4b5c      	ldr	r3, [pc, #368]	; (8001880 <ssr2+0x290>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	da09      	bge.n	8001728 <ssr2+0x138>
			mm2=mm2-1;
 8001714:	4b57      	ldr	r3, [pc, #348]	; (8001874 <ssr2+0x284>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3b01      	subs	r3, #1
 800171a:	4a56      	ldr	r2, [pc, #344]	; (8001874 <ssr2+0x284>)
 800171c:	6013      	str	r3, [r2, #0]
			dd2=dd2+60;
 800171e:	4b58      	ldr	r3, [pc, #352]	; (8001880 <ssr2+0x290>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	333c      	adds	r3, #60	; 0x3c
 8001724:	4a56      	ldr	r2, [pc, #344]	; (8001880 <ssr2+0x290>)
 8001726:	6013      	str	r3, [r2, #0]
		}

		if(mm2<0) mm2=0;
 8001728:	4b52      	ldr	r3, [pc, #328]	; (8001874 <ssr2+0x284>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	da02      	bge.n	8001736 <ssr2+0x146>
 8001730:	4b50      	ldr	r3, [pc, #320]	; (8001874 <ssr2+0x284>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
		if(dd2<0) dd2=0;
 8001736:	4b52      	ldr	r3, [pc, #328]	; (8001880 <ssr2+0x290>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	da02      	bge.n	8001744 <ssr2+0x154>
 800173e:	4b50      	ldr	r3, [pc, #320]	; (8001880 <ssr2+0x290>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
		if(ms2<0) ms2=0;
 8001744:	4b51      	ldr	r3, [pc, #324]	; (800188c <ssr2+0x29c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	da02      	bge.n	8001752 <ssr2+0x162>
 800174c:	4b4f      	ldr	r3, [pc, #316]	; (800188c <ssr2+0x29c>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

		mmlast2=mm;
 8001752:	4b46      	ldr	r3, [pc, #280]	; (800186c <ssr2+0x27c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	4b45      	ldr	r3, [pc, #276]	; (8001870 <ssr2+0x280>)
 800175a:	601a      	str	r2, [r3, #0]
		ddlast2=dd;
 800175c:	4b46      	ldr	r3, [pc, #280]	; (8001878 <ssr2+0x288>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b46      	ldr	r3, [pc, #280]	; (800187c <ssr2+0x28c>)
 8001764:	601a      	str	r2, [r3, #0]
		mslast2=ms;
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <ssr2+0x294>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	4b46      	ldr	r3, [pc, #280]	; (8001888 <ssr2+0x298>)
 800176e:	601a      	str	r2, [r3, #0]

		if(runstop==1)	lapB++;
 8001770:	4b47      	ldr	r3, [pc, #284]	; (8001890 <ssr2+0x2a0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <ssr2+0x194>
 8001778:	4b46      	ldr	r3, [pc, #280]	; (8001894 <ssr2+0x2a4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4a45      	ldr	r2, [pc, #276]	; (8001894 <ssr2+0x2a4>)
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e002      	b.n	800178a <ssr2+0x19a>
		else 			lapB=0;
 8001784:	4b43      	ldr	r3, [pc, #268]	; (8001894 <ssr2+0x2a4>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

		if(lapB<totlap){
 800178a:	4b42      	ldr	r3, [pc, #264]	; (8001894 <ssr2+0x2a4>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b42      	ldr	r3, [pc, #264]	; (8001898 <ssr2+0x2a8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	f080 808a 	bcs.w	80018ac <ssr2+0x2bc>
			sprintf(buffs,"%d = %d%d:%d%d:%d%d",lapB,(mm2/10),(mm2%10),(dd2/10),(dd2%10),(ms2/10),(ms2%10));
 8001798:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <ssr2+0x2a4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b35      	ldr	r3, [pc, #212]	; (8001874 <ssr2+0x284>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a3e      	ldr	r2, [pc, #248]	; (800189c <ssr2+0x2ac>)
 80017a4:	fb82 1203 	smull	r1, r2, r2, r3
 80017a8:	1092      	asrs	r2, r2, #2
 80017aa:	17db      	asrs	r3, r3, #31
 80017ac:	eba2 0c03 	sub.w	ip, r2, r3
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <ssr2+0x284>)
 80017b2:	6819      	ldr	r1, [r3, #0]
 80017b4:	4b39      	ldr	r3, [pc, #228]	; (800189c <ssr2+0x2ac>)
 80017b6:	fb83 0301 	smull	r0, r3, r3, r1
 80017ba:	109a      	asrs	r2, r3, #2
 80017bc:	17cb      	asrs	r3, r1, #31
 80017be:	1ad2      	subs	r2, r2, r3
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	1aca      	subs	r2, r1, r3
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <ssr2+0x290>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4933      	ldr	r1, [pc, #204]	; (800189c <ssr2+0x2ac>)
 80017d0:	fb81 0103 	smull	r0, r1, r1, r3
 80017d4:	1089      	asrs	r1, r1, #2
 80017d6:	17db      	asrs	r3, r3, #31
 80017d8:	1acd      	subs	r5, r1, r3
 80017da:	4b29      	ldr	r3, [pc, #164]	; (8001880 <ssr2+0x290>)
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <ssr2+0x2ac>)
 80017e0:	fb83 1300 	smull	r1, r3, r3, r0
 80017e4:	1099      	asrs	r1, r3, #2
 80017e6:	17c3      	asrs	r3, r0, #31
 80017e8:	1ac9      	subs	r1, r1, r3
 80017ea:	460b      	mov	r3, r1
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	1ac1      	subs	r1, r0, r3
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <ssr2+0x29c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4828      	ldr	r0, [pc, #160]	; (800189c <ssr2+0x2ac>)
 80017fa:	fb80 4003 	smull	r4, r0, r0, r3
 80017fe:	1080      	asrs	r0, r0, #2
 8001800:	17db      	asrs	r3, r3, #31
 8001802:	1ac6      	subs	r6, r0, r3
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <ssr2+0x29c>)
 8001806:	681c      	ldr	r4, [r3, #0]
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <ssr2+0x2ac>)
 800180a:	fb83 0304 	smull	r0, r3, r3, r4
 800180e:	1098      	asrs	r0, r3, #2
 8001810:	17e3      	asrs	r3, r4, #31
 8001812:	1ac0      	subs	r0, r0, r3
 8001814:	4603      	mov	r3, r0
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4403      	add	r3, r0
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	1ae0      	subs	r0, r4, r3
 800181e:	9004      	str	r0, [sp, #16]
 8001820:	9603      	str	r6, [sp, #12]
 8001822:	9102      	str	r1, [sp, #8]
 8001824:	9501      	str	r5, [sp, #4]
 8001826:	9200      	str	r2, [sp, #0]
 8001828:	4663      	mov	r3, ip
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	491c      	ldr	r1, [pc, #112]	; (80018a0 <ssr2+0x2b0>)
 800182e:	481d      	ldr	r0, [pc, #116]	; (80018a4 <ssr2+0x2b4>)
 8001830:	f003 fb86 	bl	8004f40 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack B Lap:",14,10);
 8001834:	230a      	movs	r3, #10
 8001836:	220e      	movs	r2, #14
 8001838:	491b      	ldr	r1, [pc, #108]	; (80018a8 <ssr2+0x2b8>)
 800183a:	480b      	ldr	r0, [pc, #44]	; (8001868 <ssr2+0x278>)
 800183c:	f002 feef 	bl	800461e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffs,sizeof(buffs),10);
 8001840:	230a      	movs	r3, #10
 8001842:	220d      	movs	r2, #13
 8001844:	4917      	ldr	r1, [pc, #92]	; (80018a4 <ssr2+0x2b4>)
 8001846:	4808      	ldr	r0, [pc, #32]	; (8001868 <ssr2+0x278>)
 8001848:	f002 fee9 	bl	800461e <HAL_UART_Transmit>
 800184c:	e09f      	b.n	800198e <ssr2+0x39e>
 800184e:	bf00      	nop
 8001850:	40020400 	.word	0x40020400
 8001854:	20000100 	.word	0x20000100
 8001858:	2000001c 	.word	0x2000001c
 800185c:	2000000b 	.word	0x2000000b
 8001860:	40020000 	.word	0x40020000
 8001864:	080058f0 	.word	0x080058f0
 8001868:	200001e4 	.word	0x200001e4
 800186c:	200000bc 	.word	0x200000bc
 8001870:	200000e4 	.word	0x200000e4
 8001874:	20000224 	.word	0x20000224
 8001878:	200000b8 	.word	0x200000b8
 800187c:	200000e0 	.word	0x200000e0
 8001880:	20000264 	.word	0x20000264
 8001884:	200000b4 	.word	0x200000b4
 8001888:	200000dc 	.word	0x200000dc
 800188c:	20000228 	.word	0x20000228
 8001890:	200000b0 	.word	0x200000b0
 8001894:	200000c8 	.word	0x200000c8
 8001898:	20000004 	.word	0x20000004
 800189c:	66666667 	.word	0x66666667
 80018a0:	080058a8 	.word	0x080058a8
 80018a4:	20000230 	.word	0x20000230
 80018a8:	08005904 	.word	0x08005904
		}
		else if (lapB==totlap)
 80018ac:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <ssr2+0x3b4>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <ssr2+0x3b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d164      	bne.n	8001982 <ssr2+0x392>
		{
			lapB=totlap;
 80018b8:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <ssr2+0x3b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a39      	ldr	r2, [pc, #228]	; (80019a4 <ssr2+0x3b4>)
 80018be:	6013      	str	r3, [r2, #0]
			sprintf(buffs,"%d = %d%d:%d%d:%d%d",lapB,(mm2/10),(mm2%10),(dd2/10),(dd2%10),(ms2/10),(ms2%10));
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <ssr2+0x3b4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4b39      	ldr	r3, [pc, #228]	; (80019ac <ssr2+0x3bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a39      	ldr	r2, [pc, #228]	; (80019b0 <ssr2+0x3c0>)
 80018cc:	fb82 1203 	smull	r1, r2, r2, r3
 80018d0:	1092      	asrs	r2, r2, #2
 80018d2:	17db      	asrs	r3, r3, #31
 80018d4:	eba2 0c03 	sub.w	ip, r2, r3
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <ssr2+0x3bc>)
 80018da:	6819      	ldr	r1, [r3, #0]
 80018dc:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <ssr2+0x3c0>)
 80018de:	fb83 0301 	smull	r0, r3, r3, r1
 80018e2:	109a      	asrs	r2, r3, #2
 80018e4:	17cb      	asrs	r3, r1, #31
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	1aca      	subs	r2, r1, r3
 80018f2:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <ssr2+0x3c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	492e      	ldr	r1, [pc, #184]	; (80019b0 <ssr2+0x3c0>)
 80018f8:	fb81 0103 	smull	r0, r1, r1, r3
 80018fc:	1089      	asrs	r1, r1, #2
 80018fe:	17db      	asrs	r3, r3, #31
 8001900:	1acd      	subs	r5, r1, r3
 8001902:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <ssr2+0x3c4>)
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <ssr2+0x3c0>)
 8001908:	fb83 1300 	smull	r1, r3, r3, r0
 800190c:	1099      	asrs	r1, r3, #2
 800190e:	17c3      	asrs	r3, r0, #31
 8001910:	1ac9      	subs	r1, r1, r3
 8001912:	460b      	mov	r3, r1
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	1ac1      	subs	r1, r0, r3
 800191c:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <ssr2+0x3c8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4823      	ldr	r0, [pc, #140]	; (80019b0 <ssr2+0x3c0>)
 8001922:	fb80 4003 	smull	r4, r0, r0, r3
 8001926:	1080      	asrs	r0, r0, #2
 8001928:	17db      	asrs	r3, r3, #31
 800192a:	1ac6      	subs	r6, r0, r3
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <ssr2+0x3c8>)
 800192e:	681c      	ldr	r4, [r3, #0]
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <ssr2+0x3c0>)
 8001932:	fb83 0304 	smull	r0, r3, r3, r4
 8001936:	1098      	asrs	r0, r3, #2
 8001938:	17e3      	asrs	r3, r4, #31
 800193a:	1ac0      	subs	r0, r0, r3
 800193c:	4603      	mov	r3, r0
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4403      	add	r3, r0
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	1ae0      	subs	r0, r4, r3
 8001946:	9004      	str	r0, [sp, #16]
 8001948:	9603      	str	r6, [sp, #12]
 800194a:	9102      	str	r1, [sp, #8]
 800194c:	9501      	str	r5, [sp, #4]
 800194e:	9200      	str	r2, [sp, #0]
 8001950:	4663      	mov	r3, ip
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4919      	ldr	r1, [pc, #100]	; (80019bc <ssr2+0x3cc>)
 8001956:	481a      	ldr	r0, [pc, #104]	; (80019c0 <ssr2+0x3d0>)
 8001958:	f003 faf2 	bl	8004f40 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack B Lap:",14,10);
 800195c:	230a      	movs	r3, #10
 800195e:	220e      	movs	r2, #14
 8001960:	4918      	ldr	r1, [pc, #96]	; (80019c4 <ssr2+0x3d4>)
 8001962:	4819      	ldr	r0, [pc, #100]	; (80019c8 <ssr2+0x3d8>)
 8001964:	f002 fe5b 	bl	800461e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffs,sizeof(buffs),10);
 8001968:	230a      	movs	r3, #10
 800196a:	220d      	movs	r2, #13
 800196c:	4914      	ldr	r1, [pc, #80]	; (80019c0 <ssr2+0x3d0>)
 800196e:	4816      	ldr	r0, [pc, #88]	; (80019c8 <ssr2+0x3d8>)
 8001970:	f002 fe55 	bl	800461e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r-------Track B FINISH-----------",35,10);
 8001974:	230a      	movs	r3, #10
 8001976:	2223      	movs	r2, #35	; 0x23
 8001978:	4914      	ldr	r1, [pc, #80]	; (80019cc <ssr2+0x3dc>)
 800197a:	4813      	ldr	r0, [pc, #76]	; (80019c8 <ssr2+0x3d8>)
 800197c:	f002 fe4f 	bl	800461e <HAL_UART_Transmit>
 8001980:	e005      	b.n	800198e <ssr2+0x39e>
		}
		else HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r-------Track B FINISH-----------",35,10);
 8001982:	230a      	movs	r3, #10
 8001984:	2223      	movs	r2, #35	; 0x23
 8001986:	4911      	ldr	r1, [pc, #68]	; (80019cc <ssr2+0x3dc>)
 8001988:	480f      	ldr	r0, [pc, #60]	; (80019c8 <ssr2+0x3d8>)
 800198a:	f002 fe48 	bl	800461e <HAL_UART_Transmit>

		Timeout_loop4=0;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <ssr2+0x3e0>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
		bouncing4=0xFF;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <ssr2+0x3e4>)
 8001996:	22ff      	movs	r2, #255	; 0xff
 8001998:	701a      	strb	r2, [r3, #0]
	}
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200000c8 	.word	0x200000c8
 80019a8:	20000004 	.word	0x20000004
 80019ac:	20000224 	.word	0x20000224
 80019b0:	66666667 	.word	0x66666667
 80019b4:	20000264 	.word	0x20000264
 80019b8:	20000228 	.word	0x20000228
 80019bc:	080058a8 	.word	0x080058a8
 80019c0:	20000230 	.word	0x20000230
 80019c4:	08005904 	.word	0x08005904
 80019c8:	200001e4 	.word	0x200001e4
 80019cc:	08005914 	.word	0x08005914
 80019d0:	20000100 	.word	0x20000100
 80019d4:	2000000b 	.word	0x2000000b

080019d8 <ssr3>:

void ssr3(void)
{
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af06      	add	r7, sp, #24
	if(HAL_GPIO_ReadPin(SSR3_GPIO_Port,SSR3_Pin)== GPIO_PIN_RESET && (Timeout_loop5++<=Timeout_value5)){
 80019de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e2:	4895      	ldr	r0, [pc, #596]	; (8001c38 <ssr3+0x260>)
 80019e4:	f001 f908 	bl	8002bf8 <HAL_GPIO_ReadPin>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10f      	bne.n	8001a0e <ssr3+0x36>
 80019ee:	4b93      	ldr	r3, [pc, #588]	; (8001c3c <ssr3+0x264>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	4991      	ldr	r1, [pc, #580]	; (8001c3c <ssr3+0x264>)
 80019f6:	600a      	str	r2, [r1, #0]
 80019f8:	4a91      	ldr	r2, [pc, #580]	; (8001c40 <ssr3+0x268>)
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d806      	bhi.n	8001a0e <ssr3+0x36>
		bouncing5=(bouncing5<<1);
 8001a00:	4b90      	ldr	r3, [pc, #576]	; (8001c44 <ssr3+0x26c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b8e      	ldr	r3, [pc, #568]	; (8001c44 <ssr3+0x26c>)
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e047      	b.n	8001a9e <ssr3+0xc6>

	}

	else if(HAL_GPIO_ReadPin(SSR3_GPIO_Port,SSR3_Pin)== GPIO_PIN_RESET && (Timeout_loop5++>Timeout_value5)){
 8001a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a12:	4889      	ldr	r0, [pc, #548]	; (8001c38 <ssr3+0x260>)
 8001a14:	f001 f8f0 	bl	8002bf8 <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d120      	bne.n	8001a60 <ssr3+0x88>
 8001a1e:	4b87      	ldr	r3, [pc, #540]	; (8001c3c <ssr3+0x264>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	4985      	ldr	r1, [pc, #532]	; (8001c3c <ssr3+0x264>)
 8001a26:	600a      	str	r2, [r1, #0]
 8001a28:	4a85      	ldr	r2, [pc, #532]	; (8001c40 <ssr3+0x268>)
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d917      	bls.n	8001a60 <ssr3+0x88>
		if(Timeout_loop5>=Timeout_value5+300){
 8001a30:	4b83      	ldr	r3, [pc, #524]	; (8001c40 <ssr3+0x268>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8001a38:	4b80      	ldr	r3, [pc, #512]	; (8001c3c <ssr3+0x264>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d82e      	bhi.n	8001a9e <ssr3+0xc6>
			Timeout_loop5=Timeout_value5+1;
 8001a40:	4b7f      	ldr	r3, [pc, #508]	; (8001c40 <ssr3+0x268>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3301      	adds	r3, #1
 8001a46:	4a7d      	ldr	r2, [pc, #500]	; (8001c3c <ssr3+0x264>)
 8001a48:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED5_GPIO_Port,LED5_Pin);
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	487e      	ldr	r0, [pc, #504]	; (8001c48 <ssr3+0x270>)
 8001a4e:	f001 f904 	bl	8002c5a <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rErr: Sensor 3 ",18,10);
 8001a52:	230a      	movs	r3, #10
 8001a54:	2212      	movs	r2, #18
 8001a56:	497d      	ldr	r1, [pc, #500]	; (8001c4c <ssr3+0x274>)
 8001a58:	487d      	ldr	r0, [pc, #500]	; (8001c50 <ssr3+0x278>)
 8001a5a:	f002 fde0 	bl	800461e <HAL_UART_Transmit>
		if(Timeout_loop5>=Timeout_value5+300){
 8001a5e:	e01e      	b.n	8001a9e <ssr3+0xc6>
		}
	}

	else if(HAL_GPIO_ReadPin(SSR3_GPIO_Port,SSR3_Pin)== GPIO_PIN_SET && Timeout_loop5<=Timeout_value5){
 8001a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a64:	4874      	ldr	r0, [pc, #464]	; (8001c38 <ssr3+0x260>)
 8001a66:	f001 f8c7 	bl	8002bf8 <HAL_GPIO_ReadPin>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d110      	bne.n	8001a92 <ssr3+0xba>
 8001a70:	4b72      	ldr	r3, [pc, #456]	; (8001c3c <ssr3+0x264>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <ssr3+0x268>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d80a      	bhi.n	8001a92 <ssr3+0xba>
		bouncing5 = (bouncing5<<1)|1;
 8001a7c:	4b71      	ldr	r3, [pc, #452]	; (8001c44 <ssr3+0x26c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <ssr3+0x26c>)
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e005      	b.n	8001a9e <ssr3+0xc6>
	}

	else{
		Timeout_loop5=0;
 8001a92:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <ssr3+0x264>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
		bouncing5=0xFF;
 8001a98:	4b6a      	ldr	r3, [pc, #424]	; (8001c44 <ssr3+0x26c>)
 8001a9a:	22ff      	movs	r2, #255	; 0xff
 8001a9c:	701a      	strb	r2, [r3, #0]
	}

	if (bouncing5==0x01){
 8001a9e:	4b69      	ldr	r3, [pc, #420]	; (8001c44 <ssr3+0x26c>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	f040 816d 	bne.w	8001d82 <ssr3+0x3aa>

		mm3=(mm-mmlast3);
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <ssr3+0x27c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6a      	ldr	r2, [pc, #424]	; (8001c58 <ssr3+0x280>)
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b69      	ldr	r3, [pc, #420]	; (8001c5c <ssr3+0x284>)
 8001ab6:	601a      	str	r2, [r3, #0]
		dd3=(dd-ddlast3);
 8001ab8:	4b69      	ldr	r3, [pc, #420]	; (8001c60 <ssr3+0x288>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a69      	ldr	r2, [pc, #420]	; (8001c64 <ssr3+0x28c>)
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <ssr3+0x290>)
 8001ac6:	601a      	str	r2, [r3, #0]
		ms3=(ms-mslast3);
 8001ac8:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <ssr3+0x294>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a68      	ldr	r2, [pc, #416]	; (8001c70 <ssr3+0x298>)
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <ssr3+0x29c>)
 8001ad6:	601a      	str	r2, [r3, #0]

		if(ms3<0){
 8001ad8:	4b66      	ldr	r3, [pc, #408]	; (8001c74 <ssr3+0x29c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	da09      	bge.n	8001af4 <ssr3+0x11c>
			dd3=dd3-1;
 8001ae0:	4b61      	ldr	r3, [pc, #388]	; (8001c68 <ssr3+0x290>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	4a60      	ldr	r2, [pc, #384]	; (8001c68 <ssr3+0x290>)
 8001ae8:	6013      	str	r3, [r2, #0]
			ms3=ms3+60;
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <ssr3+0x29c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	333c      	adds	r3, #60	; 0x3c
 8001af0:	4a60      	ldr	r2, [pc, #384]	; (8001c74 <ssr3+0x29c>)
 8001af2:	6013      	str	r3, [r2, #0]
		}
		if(dd3<0){
 8001af4:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <ssr3+0x290>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da09      	bge.n	8001b10 <ssr3+0x138>
			mm3=mm3-1;
 8001afc:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <ssr3+0x284>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	4a56      	ldr	r2, [pc, #344]	; (8001c5c <ssr3+0x284>)
 8001b04:	6013      	str	r3, [r2, #0]
			dd3=dd3+60;
 8001b06:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <ssr3+0x290>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	333c      	adds	r3, #60	; 0x3c
 8001b0c:	4a56      	ldr	r2, [pc, #344]	; (8001c68 <ssr3+0x290>)
 8001b0e:	6013      	str	r3, [r2, #0]
		}

		if(mm3<0) mm3=0;
 8001b10:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <ssr3+0x284>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da02      	bge.n	8001b1e <ssr3+0x146>
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <ssr3+0x284>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
		if(dd3<0) dd3=0;
 8001b1e:	4b52      	ldr	r3, [pc, #328]	; (8001c68 <ssr3+0x290>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	da02      	bge.n	8001b2c <ssr3+0x154>
 8001b26:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <ssr3+0x290>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
		if(ms3<0) ms3=0;
 8001b2c:	4b51      	ldr	r3, [pc, #324]	; (8001c74 <ssr3+0x29c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	da02      	bge.n	8001b3a <ssr3+0x162>
 8001b34:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <ssr3+0x29c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]

		mmlast3=mm;
 8001b3a:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <ssr3+0x27c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b45      	ldr	r3, [pc, #276]	; (8001c58 <ssr3+0x280>)
 8001b42:	601a      	str	r2, [r3, #0]
		ddlast3=dd;
 8001b44:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <ssr3+0x288>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <ssr3+0x28c>)
 8001b4c:	601a      	str	r2, [r3, #0]
		mslast3=ms;
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <ssr3+0x294>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <ssr3+0x298>)
 8001b56:	601a      	str	r2, [r3, #0]

		if(runstop==1)	lapC++;
 8001b58:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <ssr3+0x2a0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <ssr3+0x194>
 8001b60:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <ssr3+0x2a4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	4a45      	ldr	r2, [pc, #276]	; (8001c7c <ssr3+0x2a4>)
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e002      	b.n	8001b72 <ssr3+0x19a>
		else 			lapC=0;
 8001b6c:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <ssr3+0x2a4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]

		if(lapC<totlap){
 8001b72:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <ssr3+0x2a4>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b42      	ldr	r3, [pc, #264]	; (8001c80 <ssr3+0x2a8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	f080 808a 	bcs.w	8001c94 <ssr3+0x2bc>
			sprintf(buffs,"%d = %d%d:%d%d:%d%d",lapC,(mm3/10),(mm3%10),(dd3/10),(dd3%10),(ms3/10),(ms3%10));
 8001b80:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <ssr3+0x2a4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <ssr3+0x284>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a3e      	ldr	r2, [pc, #248]	; (8001c84 <ssr3+0x2ac>)
 8001b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b90:	1092      	asrs	r2, r2, #2
 8001b92:	17db      	asrs	r3, r3, #31
 8001b94:	eba2 0c03 	sub.w	ip, r2, r3
 8001b98:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <ssr3+0x284>)
 8001b9a:	6819      	ldr	r1, [r3, #0]
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <ssr3+0x2ac>)
 8001b9e:	fb83 0301 	smull	r0, r3, r3, r1
 8001ba2:	109a      	asrs	r2, r3, #2
 8001ba4:	17cb      	asrs	r3, r1, #31
 8001ba6:	1ad2      	subs	r2, r2, r3
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	1aca      	subs	r2, r1, r3
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <ssr3+0x290>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4933      	ldr	r1, [pc, #204]	; (8001c84 <ssr3+0x2ac>)
 8001bb8:	fb81 0103 	smull	r0, r1, r1, r3
 8001bbc:	1089      	asrs	r1, r1, #2
 8001bbe:	17db      	asrs	r3, r3, #31
 8001bc0:	1acd      	subs	r5, r1, r3
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <ssr3+0x290>)
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <ssr3+0x2ac>)
 8001bc8:	fb83 1300 	smull	r1, r3, r3, r0
 8001bcc:	1099      	asrs	r1, r3, #2
 8001bce:	17c3      	asrs	r3, r0, #31
 8001bd0:	1ac9      	subs	r1, r1, r3
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	1ac1      	subs	r1, r0, r3
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <ssr3+0x29c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4828      	ldr	r0, [pc, #160]	; (8001c84 <ssr3+0x2ac>)
 8001be2:	fb80 4003 	smull	r4, r0, r0, r3
 8001be6:	1080      	asrs	r0, r0, #2
 8001be8:	17db      	asrs	r3, r3, #31
 8001bea:	1ac6      	subs	r6, r0, r3
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <ssr3+0x29c>)
 8001bee:	681c      	ldr	r4, [r3, #0]
 8001bf0:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <ssr3+0x2ac>)
 8001bf2:	fb83 0304 	smull	r0, r3, r3, r4
 8001bf6:	1098      	asrs	r0, r3, #2
 8001bf8:	17e3      	asrs	r3, r4, #31
 8001bfa:	1ac0      	subs	r0, r0, r3
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4403      	add	r3, r0
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	1ae0      	subs	r0, r4, r3
 8001c06:	9004      	str	r0, [sp, #16]
 8001c08:	9603      	str	r6, [sp, #12]
 8001c0a:	9102      	str	r1, [sp, #8]
 8001c0c:	9501      	str	r5, [sp, #4]
 8001c0e:	9200      	str	r2, [sp, #0]
 8001c10:	4663      	mov	r3, ip
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	491c      	ldr	r1, [pc, #112]	; (8001c88 <ssr3+0x2b0>)
 8001c16:	481d      	ldr	r0, [pc, #116]	; (8001c8c <ssr3+0x2b4>)
 8001c18:	f003 f992 	bl	8004f40 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack C Lap:",14,10);
 8001c1c:	230a      	movs	r3, #10
 8001c1e:	220e      	movs	r2, #14
 8001c20:	491b      	ldr	r1, [pc, #108]	; (8001c90 <ssr3+0x2b8>)
 8001c22:	480b      	ldr	r0, [pc, #44]	; (8001c50 <ssr3+0x278>)
 8001c24:	f002 fcfb 	bl	800461e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffs,sizeof(buffs),10);
 8001c28:	230a      	movs	r3, #10
 8001c2a:	220d      	movs	r2, #13
 8001c2c:	4917      	ldr	r1, [pc, #92]	; (8001c8c <ssr3+0x2b4>)
 8001c2e:	4808      	ldr	r0, [pc, #32]	; (8001c50 <ssr3+0x278>)
 8001c30:	f002 fcf5 	bl	800461e <HAL_UART_Transmit>
 8001c34:	e09f      	b.n	8001d76 <ssr3+0x39e>
 8001c36:	bf00      	nop
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	20000104 	.word	0x20000104
 8001c40:	20000020 	.word	0x20000020
 8001c44:	2000000c 	.word	0x2000000c
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	08005938 	.word	0x08005938
 8001c50:	200001e4 	.word	0x200001e4
 8001c54:	200000bc 	.word	0x200000bc
 8001c58:	200000f0 	.word	0x200000f0
 8001c5c:	2000025c 	.word	0x2000025c
 8001c60:	200000b8 	.word	0x200000b8
 8001c64:	200000ec 	.word	0x200000ec
 8001c68:	20000268 	.word	0x20000268
 8001c6c:	200000b4 	.word	0x200000b4
 8001c70:	200000e8 	.word	0x200000e8
 8001c74:	20000260 	.word	0x20000260
 8001c78:	200000b0 	.word	0x200000b0
 8001c7c:	200000cc 	.word	0x200000cc
 8001c80:	20000004 	.word	0x20000004
 8001c84:	66666667 	.word	0x66666667
 8001c88:	080058a8 	.word	0x080058a8
 8001c8c:	20000230 	.word	0x20000230
 8001c90:	0800594c 	.word	0x0800594c
		}
		else if (lapC==totlap)
 8001c94:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <ssr3+0x3b4>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <ssr3+0x3b8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d164      	bne.n	8001d6a <ssr3+0x392>
		{
			lapC=totlap;
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <ssr3+0x3b8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <ssr3+0x3b4>)
 8001ca6:	6013      	str	r3, [r2, #0]
			sprintf(buffs,"%d = %d%d:%d%d:%d%d",lapC,(mm3/10),(mm3%10),(dd3/10),(dd3%10),(ms3/10),(ms3%10));
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <ssr3+0x3b4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <ssr3+0x3bc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a39      	ldr	r2, [pc, #228]	; (8001d98 <ssr3+0x3c0>)
 8001cb4:	fb82 1203 	smull	r1, r2, r2, r3
 8001cb8:	1092      	asrs	r2, r2, #2
 8001cba:	17db      	asrs	r3, r3, #31
 8001cbc:	eba2 0c03 	sub.w	ip, r2, r3
 8001cc0:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <ssr3+0x3bc>)
 8001cc2:	6819      	ldr	r1, [r3, #0]
 8001cc4:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <ssr3+0x3c0>)
 8001cc6:	fb83 0301 	smull	r0, r3, r3, r1
 8001cca:	109a      	asrs	r2, r3, #2
 8001ccc:	17cb      	asrs	r3, r1, #31
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	1aca      	subs	r2, r1, r3
 8001cda:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <ssr3+0x3c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	492e      	ldr	r1, [pc, #184]	; (8001d98 <ssr3+0x3c0>)
 8001ce0:	fb81 0103 	smull	r0, r1, r1, r3
 8001ce4:	1089      	asrs	r1, r1, #2
 8001ce6:	17db      	asrs	r3, r3, #31
 8001ce8:	1acd      	subs	r5, r1, r3
 8001cea:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <ssr3+0x3c4>)
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <ssr3+0x3c0>)
 8001cf0:	fb83 1300 	smull	r1, r3, r3, r0
 8001cf4:	1099      	asrs	r1, r3, #2
 8001cf6:	17c3      	asrs	r3, r0, #31
 8001cf8:	1ac9      	subs	r1, r1, r3
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	1ac1      	subs	r1, r0, r3
 8001d04:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <ssr3+0x3c8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4823      	ldr	r0, [pc, #140]	; (8001d98 <ssr3+0x3c0>)
 8001d0a:	fb80 4003 	smull	r4, r0, r0, r3
 8001d0e:	1080      	asrs	r0, r0, #2
 8001d10:	17db      	asrs	r3, r3, #31
 8001d12:	1ac6      	subs	r6, r0, r3
 8001d14:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <ssr3+0x3c8>)
 8001d16:	681c      	ldr	r4, [r3, #0]
 8001d18:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <ssr3+0x3c0>)
 8001d1a:	fb83 0304 	smull	r0, r3, r3, r4
 8001d1e:	1098      	asrs	r0, r3, #2
 8001d20:	17e3      	asrs	r3, r4, #31
 8001d22:	1ac0      	subs	r0, r0, r3
 8001d24:	4603      	mov	r3, r0
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4403      	add	r3, r0
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	1ae0      	subs	r0, r4, r3
 8001d2e:	9004      	str	r0, [sp, #16]
 8001d30:	9603      	str	r6, [sp, #12]
 8001d32:	9102      	str	r1, [sp, #8]
 8001d34:	9501      	str	r5, [sp, #4]
 8001d36:	9200      	str	r2, [sp, #0]
 8001d38:	4663      	mov	r3, ip
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4919      	ldr	r1, [pc, #100]	; (8001da4 <ssr3+0x3cc>)
 8001d3e:	481a      	ldr	r0, [pc, #104]	; (8001da8 <ssr3+0x3d0>)
 8001d40:	f003 f8fe 	bl	8004f40 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack C Lap:",14,10);
 8001d44:	230a      	movs	r3, #10
 8001d46:	220e      	movs	r2, #14
 8001d48:	4918      	ldr	r1, [pc, #96]	; (8001dac <ssr3+0x3d4>)
 8001d4a:	4819      	ldr	r0, [pc, #100]	; (8001db0 <ssr3+0x3d8>)
 8001d4c:	f002 fc67 	bl	800461e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffs,sizeof(buffs),10);
 8001d50:	230a      	movs	r3, #10
 8001d52:	220d      	movs	r2, #13
 8001d54:	4914      	ldr	r1, [pc, #80]	; (8001da8 <ssr3+0x3d0>)
 8001d56:	4816      	ldr	r0, [pc, #88]	; (8001db0 <ssr3+0x3d8>)
 8001d58:	f002 fc61 	bl	800461e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r-------Track C FINISH-----------",35,10);
 8001d5c:	230a      	movs	r3, #10
 8001d5e:	2223      	movs	r2, #35	; 0x23
 8001d60:	4914      	ldr	r1, [pc, #80]	; (8001db4 <ssr3+0x3dc>)
 8001d62:	4813      	ldr	r0, [pc, #76]	; (8001db0 <ssr3+0x3d8>)
 8001d64:	f002 fc5b 	bl	800461e <HAL_UART_Transmit>
 8001d68:	e005      	b.n	8001d76 <ssr3+0x39e>
		}
		else HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r-------Track C FINISH-----------",35,10);
 8001d6a:	230a      	movs	r3, #10
 8001d6c:	2223      	movs	r2, #35	; 0x23
 8001d6e:	4911      	ldr	r1, [pc, #68]	; (8001db4 <ssr3+0x3dc>)
 8001d70:	480f      	ldr	r0, [pc, #60]	; (8001db0 <ssr3+0x3d8>)
 8001d72:	f002 fc54 	bl	800461e <HAL_UART_Transmit>

		Timeout_loop5=0;
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <ssr3+0x3e0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
		bouncing5=0xFF;
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <ssr3+0x3e4>)
 8001d7e:	22ff      	movs	r2, #255	; 0xff
 8001d80:	701a      	strb	r2, [r3, #0]
	}
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200000cc 	.word	0x200000cc
 8001d90:	20000004 	.word	0x20000004
 8001d94:	2000025c 	.word	0x2000025c
 8001d98:	66666667 	.word	0x66666667
 8001d9c:	20000268 	.word	0x20000268
 8001da0:	20000260 	.word	0x20000260
 8001da4:	080058a8 	.word	0x080058a8
 8001da8:	20000230 	.word	0x20000230
 8001dac:	0800594c 	.word	0x0800594c
 8001db0:	200001e4 	.word	0x200001e4
 8001db4:	0800595c 	.word	0x0800595c
 8001db8:	20000104 	.word	0x20000104
 8001dbc:	2000000c 	.word	0x2000000c

08001dc0 <lcd>:

void lcd(void)
{
 8001dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af06      	add	r7, sp, #24
	if(lapA<totlap)
 8001dc6:	4b52      	ldr	r3, [pc, #328]	; (8001f10 <lcd+0x150>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4b52      	ldr	r3, [pc, #328]	; (8001f14 <lcd+0x154>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	f080 80b6 	bcs.w	8001f40 <lcd+0x180>
	{
		lcd_send_cmd(0x80);
 8001dd4:	2080      	movs	r0, #128	; 0x80
 8001dd6:	f7fe fda7 	bl	8000928 <lcd_send_cmd>
		sprintf(buffer,"STOPWATCH= %d%d:%d%d:%d%d",(mm/10),(mm%10),(dd/10),(dd%10),(ms1/10),(ms1%10));
 8001dda:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <lcd+0x158>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a4f      	ldr	r2, [pc, #316]	; (8001f1c <lcd+0x15c>)
 8001de0:	fba2 2303 	umull	r2, r3, r2, r3
 8001de4:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001de8:	4b4b      	ldr	r3, [pc, #300]	; (8001f18 <lcd+0x158>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <lcd+0x15c>)
 8001dee:	fba3 1302 	umull	r1, r3, r3, r2
 8001df2:	08dc      	lsrs	r4, r3, #3
 8001df4:	4623      	mov	r3, r4
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4423      	add	r3, r4
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	1ad4      	subs	r4, r2, r3
 8001dfe:	4b48      	ldr	r3, [pc, #288]	; (8001f20 <lcd+0x160>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a46      	ldr	r2, [pc, #280]	; (8001f1c <lcd+0x15c>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	08dd      	lsrs	r5, r3, #3
 8001e0a:	4b45      	ldr	r3, [pc, #276]	; (8001f20 <lcd+0x160>)
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	4b43      	ldr	r3, [pc, #268]	; (8001f1c <lcd+0x15c>)
 8001e10:	fba3 2301 	umull	r2, r3, r3, r1
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	1aca      	subs	r2, r1, r3
 8001e20:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <lcd+0x164>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4940      	ldr	r1, [pc, #256]	; (8001f28 <lcd+0x168>)
 8001e26:	fb81 0103 	smull	r0, r1, r1, r3
 8001e2a:	1089      	asrs	r1, r1, #2
 8001e2c:	17db      	asrs	r3, r3, #31
 8001e2e:	1ace      	subs	r6, r1, r3
 8001e30:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <lcd+0x164>)
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <lcd+0x168>)
 8001e36:	fb83 1300 	smull	r1, r3, r3, r0
 8001e3a:	1099      	asrs	r1, r3, #2
 8001e3c:	17c3      	asrs	r3, r0, #31
 8001e3e:	1ac9      	subs	r1, r1, r3
 8001e40:	460b      	mov	r3, r1
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	1ac1      	subs	r1, r0, r3
 8001e4a:	9103      	str	r1, [sp, #12]
 8001e4c:	9602      	str	r6, [sp, #8]
 8001e4e:	9201      	str	r2, [sp, #4]
 8001e50:	9500      	str	r5, [sp, #0]
 8001e52:	4623      	mov	r3, r4
 8001e54:	4662      	mov	r2, ip
 8001e56:	4935      	ldr	r1, [pc, #212]	; (8001f2c <lcd+0x16c>)
 8001e58:	4835      	ldr	r0, [pc, #212]	; (8001f30 <lcd+0x170>)
 8001e5a:	f003 f871 	bl	8004f40 <siprintf>
		lcd_send_string(buffer);
 8001e5e:	4834      	ldr	r0, [pc, #208]	; (8001f30 <lcd+0x170>)
 8001e60:	f7fe fe36 	bl	8000ad0 <lcd_send_string>
		lcd_send_cmd(0xc0);
 8001e64:	20c0      	movs	r0, #192	; 0xc0
 8001e66:	f7fe fd5f 	bl	8000928 <lcd_send_cmd>
		sprintf(buffer,"Track A%d = %d%d:%d%d:%d%d",(lapA),(mm1/10),(mm1%10),(dd1/10),(dd1%10),(ms1/10),(ms1%10));
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <lcd+0x150>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <lcd+0x174>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a2c      	ldr	r2, [pc, #176]	; (8001f28 <lcd+0x168>)
 8001e76:	fb82 1203 	smull	r1, r2, r2, r3
 8001e7a:	1092      	asrs	r2, r2, #2
 8001e7c:	17db      	asrs	r3, r3, #31
 8001e7e:	eba2 0c03 	sub.w	ip, r2, r3
 8001e82:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <lcd+0x174>)
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <lcd+0x168>)
 8001e88:	fb83 0301 	smull	r0, r3, r3, r1
 8001e8c:	109a      	asrs	r2, r3, #2
 8001e8e:	17cb      	asrs	r3, r1, #31
 8001e90:	1ad2      	subs	r2, r2, r3
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	1aca      	subs	r2, r1, r3
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <lcd+0x178>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4921      	ldr	r1, [pc, #132]	; (8001f28 <lcd+0x168>)
 8001ea2:	fb81 0103 	smull	r0, r1, r1, r3
 8001ea6:	1089      	asrs	r1, r1, #2
 8001ea8:	17db      	asrs	r3, r3, #31
 8001eaa:	1acd      	subs	r5, r1, r3
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <lcd+0x178>)
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <lcd+0x168>)
 8001eb2:	fb83 1300 	smull	r1, r3, r3, r0
 8001eb6:	1099      	asrs	r1, r3, #2
 8001eb8:	17c3      	asrs	r3, r0, #31
 8001eba:	1ac9      	subs	r1, r1, r3
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	1ac1      	subs	r1, r0, r3
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <lcd+0x164>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4817      	ldr	r0, [pc, #92]	; (8001f28 <lcd+0x168>)
 8001ecc:	fb80 4003 	smull	r4, r0, r0, r3
 8001ed0:	1080      	asrs	r0, r0, #2
 8001ed2:	17db      	asrs	r3, r3, #31
 8001ed4:	1ac6      	subs	r6, r0, r3
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <lcd+0x164>)
 8001ed8:	681c      	ldr	r4, [r3, #0]
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <lcd+0x168>)
 8001edc:	fb83 0304 	smull	r0, r3, r3, r4
 8001ee0:	1098      	asrs	r0, r3, #2
 8001ee2:	17e3      	asrs	r3, r4, #31
 8001ee4:	1ac0      	subs	r0, r0, r3
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4403      	add	r3, r0
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	1ae0      	subs	r0, r4, r3
 8001ef0:	9004      	str	r0, [sp, #16]
 8001ef2:	9603      	str	r6, [sp, #12]
 8001ef4:	9102      	str	r1, [sp, #8]
 8001ef6:	9501      	str	r5, [sp, #4]
 8001ef8:	9200      	str	r2, [sp, #0]
 8001efa:	4663      	mov	r3, ip
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	490f      	ldr	r1, [pc, #60]	; (8001f3c <lcd+0x17c>)
 8001f00:	480b      	ldr	r0, [pc, #44]	; (8001f30 <lcd+0x170>)
 8001f02:	f003 f81d 	bl	8004f40 <siprintf>
		lcd_send_string(buffer);
 8001f06:	480a      	ldr	r0, [pc, #40]	; (8001f30 <lcd+0x170>)
 8001f08:	f7fe fde2 	bl	8000ad0 <lcd_send_string>
 8001f0c:	e06e      	b.n	8001fec <lcd+0x22c>
 8001f0e:	bf00      	nop
 8001f10:	200000c4 	.word	0x200000c4
 8001f14:	20000004 	.word	0x20000004
 8001f18:	200000bc 	.word	0x200000bc
 8001f1c:	cccccccd 	.word	0xcccccccd
 8001f20:	200000b8 	.word	0x200000b8
 8001f24:	20000240 	.word	0x20000240
 8001f28:	66666667 	.word	0x66666667
 8001f2c:	08005980 	.word	0x08005980
 8001f30:	20000248 	.word	0x20000248
 8001f34:	2000022c 	.word	0x2000022c
 8001f38:	20000244 	.word	0x20000244
 8001f3c:	0800599c 	.word	0x0800599c

	}
	else if (lapA==totlap)
 8001f40:	4b7a      	ldr	r3, [pc, #488]	; (800212c <lcd+0x36c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b7a      	ldr	r3, [pc, #488]	; (8002130 <lcd+0x370>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d14f      	bne.n	8001fec <lcd+0x22c>
	{
		lcd_send_cmd(0xc0);
 8001f4c:	20c0      	movs	r0, #192	; 0xc0
 8001f4e:	f7fe fceb 	bl	8000928 <lcd_send_cmd>
		sprintf(buffer,"A4 FINISH  %d%d:%d%d:%d%d",(mm1/10),(mm1%10),(dd1/10),(dd1%10),(ms1/10),(ms1%10));
 8001f52:	4b78      	ldr	r3, [pc, #480]	; (8002134 <lcd+0x374>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a78      	ldr	r2, [pc, #480]	; (8002138 <lcd+0x378>)
 8001f58:	fb82 1203 	smull	r1, r2, r2, r3
 8001f5c:	1092      	asrs	r2, r2, #2
 8001f5e:	17db      	asrs	r3, r3, #31
 8001f60:	eba2 0c03 	sub.w	ip, r2, r3
 8001f64:	4b73      	ldr	r3, [pc, #460]	; (8002134 <lcd+0x374>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b73      	ldr	r3, [pc, #460]	; (8002138 <lcd+0x378>)
 8001f6a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f6e:	1099      	asrs	r1, r3, #2
 8001f70:	17d3      	asrs	r3, r2, #31
 8001f72:	1acc      	subs	r4, r1, r3
 8001f74:	4623      	mov	r3, r4
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4423      	add	r3, r4
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	1ad4      	subs	r4, r2, r3
 8001f7e:	4b6f      	ldr	r3, [pc, #444]	; (800213c <lcd+0x37c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6d      	ldr	r2, [pc, #436]	; (8002138 <lcd+0x378>)
 8001f84:	fb82 1203 	smull	r1, r2, r2, r3
 8001f88:	1092      	asrs	r2, r2, #2
 8001f8a:	17db      	asrs	r3, r3, #31
 8001f8c:	1ad5      	subs	r5, r2, r3
 8001f8e:	4b6b      	ldr	r3, [pc, #428]	; (800213c <lcd+0x37c>)
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	4b69      	ldr	r3, [pc, #420]	; (8002138 <lcd+0x378>)
 8001f94:	fb83 2301 	smull	r2, r3, r3, r1
 8001f98:	109a      	asrs	r2, r3, #2
 8001f9a:	17cb      	asrs	r3, r1, #31
 8001f9c:	1ad2      	subs	r2, r2, r3
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	1aca      	subs	r2, r1, r3
 8001fa8:	4b65      	ldr	r3, [pc, #404]	; (8002140 <lcd+0x380>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4962      	ldr	r1, [pc, #392]	; (8002138 <lcd+0x378>)
 8001fae:	fb81 0103 	smull	r0, r1, r1, r3
 8001fb2:	1089      	asrs	r1, r1, #2
 8001fb4:	17db      	asrs	r3, r3, #31
 8001fb6:	1ace      	subs	r6, r1, r3
 8001fb8:	4b61      	ldr	r3, [pc, #388]	; (8002140 <lcd+0x380>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	4b5e      	ldr	r3, [pc, #376]	; (8002138 <lcd+0x378>)
 8001fbe:	fb83 1300 	smull	r1, r3, r3, r0
 8001fc2:	1099      	asrs	r1, r3, #2
 8001fc4:	17c3      	asrs	r3, r0, #31
 8001fc6:	1ac9      	subs	r1, r1, r3
 8001fc8:	460b      	mov	r3, r1
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	1ac1      	subs	r1, r0, r3
 8001fd2:	9103      	str	r1, [sp, #12]
 8001fd4:	9602      	str	r6, [sp, #8]
 8001fd6:	9201      	str	r2, [sp, #4]
 8001fd8:	9500      	str	r5, [sp, #0]
 8001fda:	4623      	mov	r3, r4
 8001fdc:	4662      	mov	r2, ip
 8001fde:	4959      	ldr	r1, [pc, #356]	; (8002144 <lcd+0x384>)
 8001fe0:	4859      	ldr	r0, [pc, #356]	; (8002148 <lcd+0x388>)
 8001fe2:	f002 ffad 	bl	8004f40 <siprintf>
		lcd_send_string(buffer);
 8001fe6:	4858      	ldr	r0, [pc, #352]	; (8002148 <lcd+0x388>)
 8001fe8:	f7fe fd72 	bl	8000ad0 <lcd_send_string>
	}

	if(lapB<totlap)
 8001fec:	4b57      	ldr	r3, [pc, #348]	; (800214c <lcd+0x38c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <lcd+0x370>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f080 80bd 	bcs.w	8002174 <lcd+0x3b4>
	{
		lcd_send_cmd(0x80);
 8001ffa:	2080      	movs	r0, #128	; 0x80
 8001ffc:	f7fe fc94 	bl	8000928 <lcd_send_cmd>
		sprintf(buffer,"STOPWATCH= %d%d:%d%d:%d%d",(mm/10),(mm%10),(dd/10),(dd%10),(ms/10),(ms%10));
 8002000:	4b53      	ldr	r3, [pc, #332]	; (8002150 <lcd+0x390>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a53      	ldr	r2, [pc, #332]	; (8002154 <lcd+0x394>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800200e:	4b50      	ldr	r3, [pc, #320]	; (8002150 <lcd+0x390>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b50      	ldr	r3, [pc, #320]	; (8002154 <lcd+0x394>)
 8002014:	fba3 1302 	umull	r1, r3, r3, r2
 8002018:	08d8      	lsrs	r0, r3, #3
 800201a:	4603      	mov	r3, r0
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4403      	add	r3, r0
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	1ad0      	subs	r0, r2, r3
 8002024:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <lcd+0x398>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a4a      	ldr	r2, [pc, #296]	; (8002154 <lcd+0x394>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	08dd      	lsrs	r5, r3, #3
 8002030:	4b49      	ldr	r3, [pc, #292]	; (8002158 <lcd+0x398>)
 8002032:	6819      	ldr	r1, [r3, #0]
 8002034:	4b47      	ldr	r3, [pc, #284]	; (8002154 <lcd+0x394>)
 8002036:	fba3 2301 	umull	r2, r3, r3, r1
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	1aca      	subs	r2, r1, r3
 8002046:	4b45      	ldr	r3, [pc, #276]	; (800215c <lcd+0x39c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4942      	ldr	r1, [pc, #264]	; (8002154 <lcd+0x394>)
 800204c:	fba1 1303 	umull	r1, r3, r1, r3
 8002050:	08de      	lsrs	r6, r3, #3
 8002052:	4b42      	ldr	r3, [pc, #264]	; (800215c <lcd+0x39c>)
 8002054:	681c      	ldr	r4, [r3, #0]
 8002056:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <lcd+0x394>)
 8002058:	fba3 1304 	umull	r1, r3, r3, r4
 800205c:	08d9      	lsrs	r1, r3, #3
 800205e:	460b      	mov	r3, r1
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	1ae1      	subs	r1, r4, r3
 8002068:	9103      	str	r1, [sp, #12]
 800206a:	9602      	str	r6, [sp, #8]
 800206c:	9201      	str	r2, [sp, #4]
 800206e:	9500      	str	r5, [sp, #0]
 8002070:	4603      	mov	r3, r0
 8002072:	4662      	mov	r2, ip
 8002074:	493a      	ldr	r1, [pc, #232]	; (8002160 <lcd+0x3a0>)
 8002076:	4834      	ldr	r0, [pc, #208]	; (8002148 <lcd+0x388>)
 8002078:	f002 ff62 	bl	8004f40 <siprintf>
		lcd_send_string(buffer);
 800207c:	4832      	ldr	r0, [pc, #200]	; (8002148 <lcd+0x388>)
 800207e:	f7fe fd27 	bl	8000ad0 <lcd_send_string>
		lcd_send_cmd(0x94);
 8002082:	2094      	movs	r0, #148	; 0x94
 8002084:	f7fe fc50 	bl	8000928 <lcd_send_cmd>
		sprintf(buffer,"Track B%d = %d%d:%d%d:%d%d",(lapB),(mm2/10),(mm2%10),(dd2/10),(dd2%10),(ms2/10),(ms2%10));
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <lcd+0x38c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	4b35      	ldr	r3, [pc, #212]	; (8002164 <lcd+0x3a4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a29      	ldr	r2, [pc, #164]	; (8002138 <lcd+0x378>)
 8002094:	fb82 1203 	smull	r1, r2, r2, r3
 8002098:	1092      	asrs	r2, r2, #2
 800209a:	17db      	asrs	r3, r3, #31
 800209c:	eba2 0c03 	sub.w	ip, r2, r3
 80020a0:	4b30      	ldr	r3, [pc, #192]	; (8002164 <lcd+0x3a4>)
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <lcd+0x378>)
 80020a6:	fb83 0301 	smull	r0, r3, r3, r1
 80020aa:	109a      	asrs	r2, r3, #2
 80020ac:	17cb      	asrs	r3, r1, #31
 80020ae:	1ad2      	subs	r2, r2, r3
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	1aca      	subs	r2, r1, r3
 80020ba:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <lcd+0x3a8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	491e      	ldr	r1, [pc, #120]	; (8002138 <lcd+0x378>)
 80020c0:	fb81 0103 	smull	r0, r1, r1, r3
 80020c4:	1089      	asrs	r1, r1, #2
 80020c6:	17db      	asrs	r3, r3, #31
 80020c8:	1acd      	subs	r5, r1, r3
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <lcd+0x3a8>)
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <lcd+0x378>)
 80020d0:	fb83 1300 	smull	r1, r3, r3, r0
 80020d4:	1099      	asrs	r1, r3, #2
 80020d6:	17c3      	asrs	r3, r0, #31
 80020d8:	1ac9      	subs	r1, r1, r3
 80020da:	460b      	mov	r3, r1
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	1ac1      	subs	r1, r0, r3
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <lcd+0x3ac>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4813      	ldr	r0, [pc, #76]	; (8002138 <lcd+0x378>)
 80020ea:	fb80 4003 	smull	r4, r0, r0, r3
 80020ee:	1080      	asrs	r0, r0, #2
 80020f0:	17db      	asrs	r3, r3, #31
 80020f2:	1ac6      	subs	r6, r0, r3
 80020f4:	4b1d      	ldr	r3, [pc, #116]	; (800216c <lcd+0x3ac>)
 80020f6:	681c      	ldr	r4, [r3, #0]
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <lcd+0x378>)
 80020fa:	fb83 0304 	smull	r0, r3, r3, r4
 80020fe:	1098      	asrs	r0, r3, #2
 8002100:	17e3      	asrs	r3, r4, #31
 8002102:	1ac0      	subs	r0, r0, r3
 8002104:	4603      	mov	r3, r0
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4403      	add	r3, r0
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	1ae0      	subs	r0, r4, r3
 800210e:	9004      	str	r0, [sp, #16]
 8002110:	9603      	str	r6, [sp, #12]
 8002112:	9102      	str	r1, [sp, #8]
 8002114:	9501      	str	r5, [sp, #4]
 8002116:	9200      	str	r2, [sp, #0]
 8002118:	4663      	mov	r3, ip
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4914      	ldr	r1, [pc, #80]	; (8002170 <lcd+0x3b0>)
 800211e:	480a      	ldr	r0, [pc, #40]	; (8002148 <lcd+0x388>)
 8002120:	f002 ff0e 	bl	8004f40 <siprintf>
		lcd_send_string(buffer);
 8002124:	4808      	ldr	r0, [pc, #32]	; (8002148 <lcd+0x388>)
 8002126:	f7fe fcd3 	bl	8000ad0 <lcd_send_string>
 800212a:	e079      	b.n	8002220 <lcd+0x460>
 800212c:	200000c4 	.word	0x200000c4
 8002130:	20000004 	.word	0x20000004
 8002134:	2000022c 	.word	0x2000022c
 8002138:	66666667 	.word	0x66666667
 800213c:	20000244 	.word	0x20000244
 8002140:	20000240 	.word	0x20000240
 8002144:	080059b8 	.word	0x080059b8
 8002148:	20000248 	.word	0x20000248
 800214c:	200000c8 	.word	0x200000c8
 8002150:	200000bc 	.word	0x200000bc
 8002154:	cccccccd 	.word	0xcccccccd
 8002158:	200000b8 	.word	0x200000b8
 800215c:	200000b4 	.word	0x200000b4
 8002160:	08005980 	.word	0x08005980
 8002164:	20000224 	.word	0x20000224
 8002168:	20000264 	.word	0x20000264
 800216c:	20000228 	.word	0x20000228
 8002170:	080059d4 	.word	0x080059d4

	}
	else if (lapB==totlap)
 8002174:	4bb2      	ldr	r3, [pc, #712]	; (8002440 <lcd+0x680>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4bb2      	ldr	r3, [pc, #712]	; (8002444 <lcd+0x684>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d14f      	bne.n	8002220 <lcd+0x460>
	{
		lcd_send_cmd(0x94);
 8002180:	2094      	movs	r0, #148	; 0x94
 8002182:	f7fe fbd1 	bl	8000928 <lcd_send_cmd>
		sprintf(buffer,"B4 FINISH  %d%d:%d%d:%d%d",(mm2/10),(mm2%10),(dd2/10),(dd2%10),(ms2/10),(ms2%10));
 8002186:	4bb0      	ldr	r3, [pc, #704]	; (8002448 <lcd+0x688>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4ab0      	ldr	r2, [pc, #704]	; (800244c <lcd+0x68c>)
 800218c:	fb82 1203 	smull	r1, r2, r2, r3
 8002190:	1092      	asrs	r2, r2, #2
 8002192:	17db      	asrs	r3, r3, #31
 8002194:	eba2 0c03 	sub.w	ip, r2, r3
 8002198:	4bab      	ldr	r3, [pc, #684]	; (8002448 <lcd+0x688>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4bab      	ldr	r3, [pc, #684]	; (800244c <lcd+0x68c>)
 800219e:	fb83 1302 	smull	r1, r3, r3, r2
 80021a2:	1099      	asrs	r1, r3, #2
 80021a4:	17d3      	asrs	r3, r2, #31
 80021a6:	1acc      	subs	r4, r1, r3
 80021a8:	4623      	mov	r3, r4
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4423      	add	r3, r4
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	1ad4      	subs	r4, r2, r3
 80021b2:	4ba7      	ldr	r3, [pc, #668]	; (8002450 <lcd+0x690>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4aa5      	ldr	r2, [pc, #660]	; (800244c <lcd+0x68c>)
 80021b8:	fb82 1203 	smull	r1, r2, r2, r3
 80021bc:	1092      	asrs	r2, r2, #2
 80021be:	17db      	asrs	r3, r3, #31
 80021c0:	1ad5      	subs	r5, r2, r3
 80021c2:	4ba3      	ldr	r3, [pc, #652]	; (8002450 <lcd+0x690>)
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	4ba1      	ldr	r3, [pc, #644]	; (800244c <lcd+0x68c>)
 80021c8:	fb83 2301 	smull	r2, r3, r3, r1
 80021cc:	109a      	asrs	r2, r3, #2
 80021ce:	17cb      	asrs	r3, r1, #31
 80021d0:	1ad2      	subs	r2, r2, r3
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	1aca      	subs	r2, r1, r3
 80021dc:	4b9d      	ldr	r3, [pc, #628]	; (8002454 <lcd+0x694>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	499a      	ldr	r1, [pc, #616]	; (800244c <lcd+0x68c>)
 80021e2:	fb81 0103 	smull	r0, r1, r1, r3
 80021e6:	1089      	asrs	r1, r1, #2
 80021e8:	17db      	asrs	r3, r3, #31
 80021ea:	1ace      	subs	r6, r1, r3
 80021ec:	4b99      	ldr	r3, [pc, #612]	; (8002454 <lcd+0x694>)
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	4b96      	ldr	r3, [pc, #600]	; (800244c <lcd+0x68c>)
 80021f2:	fb83 1300 	smull	r1, r3, r3, r0
 80021f6:	1099      	asrs	r1, r3, #2
 80021f8:	17c3      	asrs	r3, r0, #31
 80021fa:	1ac9      	subs	r1, r1, r3
 80021fc:	460b      	mov	r3, r1
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	1ac1      	subs	r1, r0, r3
 8002206:	9103      	str	r1, [sp, #12]
 8002208:	9602      	str	r6, [sp, #8]
 800220a:	9201      	str	r2, [sp, #4]
 800220c:	9500      	str	r5, [sp, #0]
 800220e:	4623      	mov	r3, r4
 8002210:	4662      	mov	r2, ip
 8002212:	4991      	ldr	r1, [pc, #580]	; (8002458 <lcd+0x698>)
 8002214:	4891      	ldr	r0, [pc, #580]	; (800245c <lcd+0x69c>)
 8002216:	f002 fe93 	bl	8004f40 <siprintf>
		lcd_send_string(buffer);
 800221a:	4890      	ldr	r0, [pc, #576]	; (800245c <lcd+0x69c>)
 800221c:	f7fe fc58 	bl	8000ad0 <lcd_send_string>
	}

	if(lapC<totlap)
 8002220:	4b8f      	ldr	r3, [pc, #572]	; (8002460 <lcd+0x6a0>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b87      	ldr	r3, [pc, #540]	; (8002444 <lcd+0x684>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	f080 8099 	bcs.w	8002360 <lcd+0x5a0>
	{
		lcd_send_cmd(0x80);
 800222e:	2080      	movs	r0, #128	; 0x80
 8002230:	f7fe fb7a 	bl	8000928 <lcd_send_cmd>
		sprintf(buffer,"STOPWATCH= %d%d:%d%d:%d%d",(mm/10),(mm%10),(dd/10),(dd%10),(ms/10),(ms%10));
 8002234:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <lcd+0x6a4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a8b      	ldr	r2, [pc, #556]	; (8002468 <lcd+0x6a8>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8002242:	4b88      	ldr	r3, [pc, #544]	; (8002464 <lcd+0x6a4>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4b88      	ldr	r3, [pc, #544]	; (8002468 <lcd+0x6a8>)
 8002248:	fba3 1302 	umull	r1, r3, r3, r2
 800224c:	08d8      	lsrs	r0, r3, #3
 800224e:	4603      	mov	r3, r0
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4403      	add	r3, r0
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	1ad0      	subs	r0, r2, r3
 8002258:	4b84      	ldr	r3, [pc, #528]	; (800246c <lcd+0x6ac>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a82      	ldr	r2, [pc, #520]	; (8002468 <lcd+0x6a8>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	08dd      	lsrs	r5, r3, #3
 8002264:	4b81      	ldr	r3, [pc, #516]	; (800246c <lcd+0x6ac>)
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	4b7f      	ldr	r3, [pc, #508]	; (8002468 <lcd+0x6a8>)
 800226a:	fba3 2301 	umull	r2, r3, r3, r1
 800226e:	08da      	lsrs	r2, r3, #3
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	1aca      	subs	r2, r1, r3
 800227a:	4b7d      	ldr	r3, [pc, #500]	; (8002470 <lcd+0x6b0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	497a      	ldr	r1, [pc, #488]	; (8002468 <lcd+0x6a8>)
 8002280:	fba1 1303 	umull	r1, r3, r1, r3
 8002284:	08de      	lsrs	r6, r3, #3
 8002286:	4b7a      	ldr	r3, [pc, #488]	; (8002470 <lcd+0x6b0>)
 8002288:	681c      	ldr	r4, [r3, #0]
 800228a:	4b77      	ldr	r3, [pc, #476]	; (8002468 <lcd+0x6a8>)
 800228c:	fba3 1304 	umull	r1, r3, r3, r4
 8002290:	08d9      	lsrs	r1, r3, #3
 8002292:	460b      	mov	r3, r1
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	1ae1      	subs	r1, r4, r3
 800229c:	9103      	str	r1, [sp, #12]
 800229e:	9602      	str	r6, [sp, #8]
 80022a0:	9201      	str	r2, [sp, #4]
 80022a2:	9500      	str	r5, [sp, #0]
 80022a4:	4603      	mov	r3, r0
 80022a6:	4662      	mov	r2, ip
 80022a8:	4972      	ldr	r1, [pc, #456]	; (8002474 <lcd+0x6b4>)
 80022aa:	486c      	ldr	r0, [pc, #432]	; (800245c <lcd+0x69c>)
 80022ac:	f002 fe48 	bl	8004f40 <siprintf>
		lcd_send_string(buffer);
 80022b0:	486a      	ldr	r0, [pc, #424]	; (800245c <lcd+0x69c>)
 80022b2:	f7fe fc0d 	bl	8000ad0 <lcd_send_string>
		lcd_send_cmd(0xd4);
 80022b6:	20d4      	movs	r0, #212	; 0xd4
 80022b8:	f7fe fb36 	bl	8000928 <lcd_send_cmd>
		sprintf(buffer,"Track C%d = %d%d:%d%d:%d%d",(lapC),(mm3/10),(mm3%10),(dd3/10),(dd3%10),(ms3/10),(ms3%10));
 80022bc:	4b68      	ldr	r3, [pc, #416]	; (8002460 <lcd+0x6a0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	4b6d      	ldr	r3, [pc, #436]	; (8002478 <lcd+0x6b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a61      	ldr	r2, [pc, #388]	; (800244c <lcd+0x68c>)
 80022c8:	fb82 1203 	smull	r1, r2, r2, r3
 80022cc:	1092      	asrs	r2, r2, #2
 80022ce:	17db      	asrs	r3, r3, #31
 80022d0:	eba2 0c03 	sub.w	ip, r2, r3
 80022d4:	4b68      	ldr	r3, [pc, #416]	; (8002478 <lcd+0x6b8>)
 80022d6:	6819      	ldr	r1, [r3, #0]
 80022d8:	4b5c      	ldr	r3, [pc, #368]	; (800244c <lcd+0x68c>)
 80022da:	fb83 0301 	smull	r0, r3, r3, r1
 80022de:	109a      	asrs	r2, r3, #2
 80022e0:	17cb      	asrs	r3, r1, #31
 80022e2:	1ad2      	subs	r2, r2, r3
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	1aca      	subs	r2, r1, r3
 80022ee:	4b63      	ldr	r3, [pc, #396]	; (800247c <lcd+0x6bc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4956      	ldr	r1, [pc, #344]	; (800244c <lcd+0x68c>)
 80022f4:	fb81 0103 	smull	r0, r1, r1, r3
 80022f8:	1089      	asrs	r1, r1, #2
 80022fa:	17db      	asrs	r3, r3, #31
 80022fc:	1acd      	subs	r5, r1, r3
 80022fe:	4b5f      	ldr	r3, [pc, #380]	; (800247c <lcd+0x6bc>)
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	4b52      	ldr	r3, [pc, #328]	; (800244c <lcd+0x68c>)
 8002304:	fb83 1300 	smull	r1, r3, r3, r0
 8002308:	1099      	asrs	r1, r3, #2
 800230a:	17c3      	asrs	r3, r0, #31
 800230c:	1ac9      	subs	r1, r1, r3
 800230e:	460b      	mov	r3, r1
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	1ac1      	subs	r1, r0, r3
 8002318:	4b59      	ldr	r3, [pc, #356]	; (8002480 <lcd+0x6c0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	484b      	ldr	r0, [pc, #300]	; (800244c <lcd+0x68c>)
 800231e:	fb80 4003 	smull	r4, r0, r0, r3
 8002322:	1080      	asrs	r0, r0, #2
 8002324:	17db      	asrs	r3, r3, #31
 8002326:	1ac6      	subs	r6, r0, r3
 8002328:	4b55      	ldr	r3, [pc, #340]	; (8002480 <lcd+0x6c0>)
 800232a:	681c      	ldr	r4, [r3, #0]
 800232c:	4b47      	ldr	r3, [pc, #284]	; (800244c <lcd+0x68c>)
 800232e:	fb83 0304 	smull	r0, r3, r3, r4
 8002332:	1098      	asrs	r0, r3, #2
 8002334:	17e3      	asrs	r3, r4, #31
 8002336:	1ac0      	subs	r0, r0, r3
 8002338:	4603      	mov	r3, r0
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4403      	add	r3, r0
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	1ae0      	subs	r0, r4, r3
 8002342:	9004      	str	r0, [sp, #16]
 8002344:	9603      	str	r6, [sp, #12]
 8002346:	9102      	str	r1, [sp, #8]
 8002348:	9501      	str	r5, [sp, #4]
 800234a:	9200      	str	r2, [sp, #0]
 800234c:	4663      	mov	r3, ip
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	494c      	ldr	r1, [pc, #304]	; (8002484 <lcd+0x6c4>)
 8002352:	4842      	ldr	r0, [pc, #264]	; (800245c <lcd+0x69c>)
 8002354:	f002 fdf4 	bl	8004f40 <siprintf>
		lcd_send_string(buffer);
 8002358:	4840      	ldr	r0, [pc, #256]	; (800245c <lcd+0x69c>)
 800235a:	f7fe fbb9 	bl	8000ad0 <lcd_send_string>
 800235e:	e055      	b.n	800240c <lcd+0x64c>
	}
	else if (lapC==totlap)
 8002360:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <lcd+0x6a0>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b37      	ldr	r3, [pc, #220]	; (8002444 <lcd+0x684>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d14f      	bne.n	800240c <lcd+0x64c>
	{
		lcd_send_cmd(0xd4);
 800236c:	20d4      	movs	r0, #212	; 0xd4
 800236e:	f7fe fadb 	bl	8000928 <lcd_send_cmd>
		sprintf(buffer,"C4 FINISH  %d%d:%d%d:%d%d",(mm3/10),(mm3%10),(dd3/10),(dd3%10),(ms3/10),(ms3%10));
 8002372:	4b41      	ldr	r3, [pc, #260]	; (8002478 <lcd+0x6b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a35      	ldr	r2, [pc, #212]	; (800244c <lcd+0x68c>)
 8002378:	fb82 1203 	smull	r1, r2, r2, r3
 800237c:	1092      	asrs	r2, r2, #2
 800237e:	17db      	asrs	r3, r3, #31
 8002380:	eba2 0c03 	sub.w	ip, r2, r3
 8002384:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <lcd+0x6b8>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b30      	ldr	r3, [pc, #192]	; (800244c <lcd+0x68c>)
 800238a:	fb83 1302 	smull	r1, r3, r3, r2
 800238e:	1099      	asrs	r1, r3, #2
 8002390:	17d3      	asrs	r3, r2, #31
 8002392:	1acc      	subs	r4, r1, r3
 8002394:	4623      	mov	r3, r4
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4423      	add	r3, r4
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	1ad4      	subs	r4, r2, r3
 800239e:	4b37      	ldr	r3, [pc, #220]	; (800247c <lcd+0x6bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a2a      	ldr	r2, [pc, #168]	; (800244c <lcd+0x68c>)
 80023a4:	fb82 1203 	smull	r1, r2, r2, r3
 80023a8:	1092      	asrs	r2, r2, #2
 80023aa:	17db      	asrs	r3, r3, #31
 80023ac:	1ad5      	subs	r5, r2, r3
 80023ae:	4b33      	ldr	r3, [pc, #204]	; (800247c <lcd+0x6bc>)
 80023b0:	6819      	ldr	r1, [r3, #0]
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <lcd+0x68c>)
 80023b4:	fb83 2301 	smull	r2, r3, r3, r1
 80023b8:	109a      	asrs	r2, r3, #2
 80023ba:	17cb      	asrs	r3, r1, #31
 80023bc:	1ad2      	subs	r2, r2, r3
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	1aca      	subs	r2, r1, r3
 80023c8:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <lcd+0x6c0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	491f      	ldr	r1, [pc, #124]	; (800244c <lcd+0x68c>)
 80023ce:	fb81 0103 	smull	r0, r1, r1, r3
 80023d2:	1089      	asrs	r1, r1, #2
 80023d4:	17db      	asrs	r3, r3, #31
 80023d6:	1ace      	subs	r6, r1, r3
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <lcd+0x6c0>)
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <lcd+0x68c>)
 80023de:	fb83 1300 	smull	r1, r3, r3, r0
 80023e2:	1099      	asrs	r1, r3, #2
 80023e4:	17c3      	asrs	r3, r0, #31
 80023e6:	1ac9      	subs	r1, r1, r3
 80023e8:	460b      	mov	r3, r1
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	1ac1      	subs	r1, r0, r3
 80023f2:	9103      	str	r1, [sp, #12]
 80023f4:	9602      	str	r6, [sp, #8]
 80023f6:	9201      	str	r2, [sp, #4]
 80023f8:	9500      	str	r5, [sp, #0]
 80023fa:	4623      	mov	r3, r4
 80023fc:	4662      	mov	r2, ip
 80023fe:	4922      	ldr	r1, [pc, #136]	; (8002488 <lcd+0x6c8>)
 8002400:	4816      	ldr	r0, [pc, #88]	; (800245c <lcd+0x69c>)
 8002402:	f002 fd9d 	bl	8004f40 <siprintf>
		lcd_send_string(buffer);
 8002406:	4815      	ldr	r0, [pc, #84]	; (800245c <lcd+0x69c>)
 8002408:	f7fe fb62 	bl	8000ad0 <lcd_send_string>
	}
	if(lapA>=totlap && lapB>=totlap && lapC>=totlap)HAL_TIM_Base_Stop_IT(&htim3);
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <lcd+0x6cc>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <lcd+0x684>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d30e      	bcc.n	8002436 <lcd+0x676>
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <lcd+0x680>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <lcd+0x684>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d308      	bcc.n	8002436 <lcd+0x676>
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <lcd+0x6a0>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <lcd+0x684>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d302      	bcc.n	8002436 <lcd+0x676>
 8002430:	4817      	ldr	r0, [pc, #92]	; (8002490 <lcd+0x6d0>)
 8002432:	f001 fcf8 	bl	8003e26 <HAL_TIM_Base_Stop_IT>
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800243e:	bf00      	nop
 8002440:	200000c8 	.word	0x200000c8
 8002444:	20000004 	.word	0x20000004
 8002448:	20000224 	.word	0x20000224
 800244c:	66666667 	.word	0x66666667
 8002450:	20000264 	.word	0x20000264
 8002454:	20000228 	.word	0x20000228
 8002458:	080059f0 	.word	0x080059f0
 800245c:	20000248 	.word	0x20000248
 8002460:	200000cc 	.word	0x200000cc
 8002464:	200000bc 	.word	0x200000bc
 8002468:	cccccccd 	.word	0xcccccccd
 800246c:	200000b8 	.word	0x200000b8
 8002470:	200000b4 	.word	0x200000b4
 8002474:	08005980 	.word	0x08005980
 8002478:	2000025c 	.word	0x2000025c
 800247c:	20000268 	.word	0x20000268
 8002480:	20000260 	.word	0x20000260
 8002484:	08005a0c 	.word	0x08005a0c
 8002488:	08005a28 	.word	0x08005a28
 800248c:	200000c4 	.word	0x200000c4
 8002490:	200001a4 	.word	0x200001a4

08002494 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3){
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a26      	ldr	r2, [pc, #152]	; (800253c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d129      	bne.n	80024fa <HAL_TIM_PeriodElapsedCallback+0x66>
		ms++;
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	4a24      	ldr	r2, [pc, #144]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80024ae:	6013      	str	r3, [r2, #0]
		if(ms>=60){
 80024b0:	4b23      	ldr	r3, [pc, #140]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b3b      	cmp	r3, #59	; 0x3b
 80024b6:	d907      	bls.n	80024c8 <HAL_TIM_PeriodElapsedCallback+0x34>
			dd++;
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	4a21      	ldr	r2, [pc, #132]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80024c0:	6013      	str	r3, [r2, #0]
			ms=0;
 80024c2:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
		}
		if(dd>=60){
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b3b      	cmp	r3, #59	; 0x3b
 80024ce:	d907      	bls.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0x4c>
			mm++;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	3301      	adds	r3, #1
 80024d6:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80024d8:	6013      	str	r3, [r2, #0]
			dd=0;
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
		}
		if(mm>=100){
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b63      	cmp	r3, #99	; 0x63
 80024e6:	d908      	bls.n	80024fa <HAL_TIM_PeriodElapsedCallback+0x66>
			ms=0;
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
			dd=0;
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
			mm=0;
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
		}
	}

	if(htim->Instance==TIM4){
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a13      	ldr	r2, [pc, #76]	; (800254c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d117      	bne.n	8002534 <HAL_TIM_PeriodElapsedCallback+0xa0>
		StartStop();
 8002504:	f7fe fcda 	bl	8000ebc <StartStop>
		Reset();
 8002508:	f7fe fd78 	bl	8000ffc <Reset>
		ssr1();
 800250c:	f7fe fe7c 	bl	8001208 <ssr1>
		ssr2();
 8002510:	f7ff f86e 	bl	80015f0 <ssr2>
		ssr3();
 8002514:	f7ff fa60 	bl	80019d8 <ssr3>
		ulang++;
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002520:	6013      	str	r3, [r2, #0]
		if(ulang>=75){
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b4a      	cmp	r3, #74	; 0x4a
 8002528:	d904      	bls.n	8002534 <HAL_TIM_PeriodElapsedCallback+0xa0>
			lcd();
 800252a:	f7ff fc49 	bl	8001dc0 <lcd>
			ulang=0;
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40000400 	.word	0x40000400
 8002540:	200000b4 	.word	0x200000b4
 8002544:	200000b8 	.word	0x200000b8
 8002548:	200000bc 	.word	0x200000bc
 800254c:	40000800 	.word	0x40000800
 8002550:	200000c0 	.word	0x200000c0

08002554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800258c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002558:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800255a:	e003      	b.n	8002564 <LoopCopyDataInit>

0800255c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800255e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002560:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002562:	3104      	adds	r1, #4

08002564 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002564:	480b      	ldr	r0, [pc, #44]	; (8002594 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002566:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002568:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800256a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800256c:	d3f6      	bcc.n	800255c <CopyDataInit>
  ldr  r2, =_sbss
 800256e:	4a0b      	ldr	r2, [pc, #44]	; (800259c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002570:	e002      	b.n	8002578 <LoopFillZerobss>

08002572 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002572:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002574:	f842 3b04 	str.w	r3, [r2], #4

08002578 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800257a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800257c:	d3f9      	bcc.n	8002572 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800257e:	f7fe fc87 	bl	8000e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002582:	f002 fcb1 	bl	8004ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002586:	f7fe fab7 	bl	8000af8 <main>
  bx  lr    
 800258a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800258c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002590:	08005aa0 	.word	0x08005aa0
  ldr  r0, =_sdata
 8002594:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002598:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800259c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80025a0:	20000274 	.word	0x20000274

080025a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025a4:	e7fe      	b.n	80025a4 <ADC_IRQHandler>
	...

080025a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_Init+0x40>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <HAL_Init+0x40>)
 80025b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <HAL_Init+0x40>)
 80025be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_Init+0x40>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <HAL_Init+0x40>)
 80025ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d0:	2003      	movs	r0, #3
 80025d2:	f000 f94d 	bl	8002870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f000 f808 	bl	80025ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025dc:	f7fe fa92 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023c00 	.word	0x40023c00

080025ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_InitTick+0x54>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_InitTick+0x58>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	4619      	mov	r1, r3
 80025fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002602:	fbb3 f3f1 	udiv	r3, r3, r1
 8002606:	fbb2 f3f3 	udiv	r3, r2, r3
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f965 	bl	80028da <HAL_SYSTICK_Config>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e00e      	b.n	8002638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b0f      	cmp	r3, #15
 800261e:	d80a      	bhi.n	8002636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002620:	2200      	movs	r2, #0
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	f000 f92d 	bl	8002886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800262c:	4a06      	ldr	r2, [pc, #24]	; (8002648 <HAL_InitTick+0x5c>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	e000      	b.n	8002638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000000 	.word	0x20000000
 8002644:	20000028 	.word	0x20000028
 8002648:	20000024 	.word	0x20000024

0800264c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_IncTick+0x20>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_IncTick+0x24>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4413      	add	r3, r2
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_IncTick+0x24>)
 800265e:	6013      	str	r3, [r2, #0]
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000028 	.word	0x20000028
 8002670:	2000026c 	.word	0x2000026c

08002674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return uwTick;
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_GetTick+0x14>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	2000026c 	.word	0x2000026c

0800268c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002694:	f7ff ffee 	bl	8002674 <HAL_GetTick>
 8002698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d005      	beq.n	80026b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_Delay+0x40>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026b2:	bf00      	nop
 80026b4:	f7ff ffde 	bl	8002674 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d8f7      	bhi.n	80026b4 <HAL_Delay+0x28>
  {
  }
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000028 	.word	0x20000028

080026d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002702:	4a04      	ldr	r2, [pc, #16]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	60d3      	str	r3, [r2, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <__NVIC_GetPriorityGrouping+0x18>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	f003 0307 	and.w	r3, r3, #7
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0b      	blt.n	800275e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <__NVIC_EnableIRQ+0x38>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	; (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
         );
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800283c:	d301      	bcc.n	8002842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283e:	2301      	movs	r3, #1
 8002840:	e00f      	b.n	8002862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <SysTick_Config+0x40>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284a:	210f      	movs	r1, #15
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	f7ff ff8e 	bl	8002770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <SysTick_Config+0x40>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <SysTick_Config+0x40>)
 800285c:	2207      	movs	r2, #7
 800285e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	e000e010 	.word	0xe000e010

08002870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff29 	bl	80026d0 <__NVIC_SetPriorityGrouping>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002898:	f7ff ff3e 	bl	8002718 <__NVIC_GetPriorityGrouping>
 800289c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7ff ff8e 	bl	80027c4 <NVIC_EncodePriority>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff5d 	bl	8002770 <__NVIC_SetPriority>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff31 	bl	8002734 <__NVIC_EnableIRQ>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ffa2 	bl	800282c <SysTick_Config>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	; 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	e159      	b.n	8002bc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002910:	2201      	movs	r2, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	429a      	cmp	r2, r3
 800292a:	f040 8148 	bne.w	8002bbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d00b      	beq.n	800294e <HAL_GPIO_Init+0x5a>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d007      	beq.n	800294e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002942:	2b11      	cmp	r3, #17
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b12      	cmp	r3, #18
 800294c:	d130      	bne.n	80029b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 0201 	and.w	r2, r3, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	2203      	movs	r2, #3
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0xfc>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b12      	cmp	r3, #18
 80029ee:	d123      	bne.n	8002a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	08da      	lsrs	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3208      	adds	r2, #8
 80029f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	220f      	movs	r2, #15
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	08da      	lsrs	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3208      	adds	r2, #8
 8002a32:	69b9      	ldr	r1, [r7, #24]
 8002a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2203      	movs	r2, #3
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0203 	and.w	r2, r3, #3
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80a2 	beq.w	8002bbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b56      	ldr	r3, [pc, #344]	; (8002bd8 <HAL_GPIO_Init+0x2e4>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	4a55      	ldr	r2, [pc, #340]	; (8002bd8 <HAL_GPIO_Init+0x2e4>)
 8002a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a88:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8a:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_GPIO_Init+0x2e4>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a96:	4a51      	ldr	r2, [pc, #324]	; (8002bdc <HAL_GPIO_Init+0x2e8>)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	220f      	movs	r2, #15
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a48      	ldr	r2, [pc, #288]	; (8002be0 <HAL_GPIO_Init+0x2ec>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d019      	beq.n	8002af6 <HAL_GPIO_Init+0x202>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a47      	ldr	r2, [pc, #284]	; (8002be4 <HAL_GPIO_Init+0x2f0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d013      	beq.n	8002af2 <HAL_GPIO_Init+0x1fe>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a46      	ldr	r2, [pc, #280]	; (8002be8 <HAL_GPIO_Init+0x2f4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00d      	beq.n	8002aee <HAL_GPIO_Init+0x1fa>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a45      	ldr	r2, [pc, #276]	; (8002bec <HAL_GPIO_Init+0x2f8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d007      	beq.n	8002aea <HAL_GPIO_Init+0x1f6>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a44      	ldr	r2, [pc, #272]	; (8002bf0 <HAL_GPIO_Init+0x2fc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d101      	bne.n	8002ae6 <HAL_GPIO_Init+0x1f2>
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	e008      	b.n	8002af8 <HAL_GPIO_Init+0x204>
 8002ae6:	2307      	movs	r3, #7
 8002ae8:	e006      	b.n	8002af8 <HAL_GPIO_Init+0x204>
 8002aea:	2303      	movs	r3, #3
 8002aec:	e004      	b.n	8002af8 <HAL_GPIO_Init+0x204>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_Init+0x204>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_GPIO_Init+0x204>
 8002af6:	2300      	movs	r3, #0
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	f002 0203 	and.w	r2, r2, #3
 8002afe:	0092      	lsls	r2, r2, #2
 8002b00:	4093      	lsls	r3, r2
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b08:	4934      	ldr	r1, [pc, #208]	; (8002bdc <HAL_GPIO_Init+0x2e8>)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	089b      	lsrs	r3, r3, #2
 8002b0e:	3302      	adds	r3, #2
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b16:	4b37      	ldr	r3, [pc, #220]	; (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b3a:	4a2e      	ldr	r2, [pc, #184]	; (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b40:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b64:	4a23      	ldr	r2, [pc, #140]	; (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b6a:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b8e:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b94:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_GPIO_Init+0x300>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bb8:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <HAL_GPIO_Init+0x300>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	f67f aea2 	bls.w	8002910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3724      	adds	r7, #36	; 0x24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	40020400 	.word	0x40020400
 8002be8:	40020800 	.word	0x40020800
 8002bec:	40020c00 	.word	0x40020c00
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40013c00 	.word	0x40013c00

08002bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	887b      	ldrh	r3, [r7, #2]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
 8002c14:	e001      	b.n	8002c1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
 8002c34:	4613      	mov	r3, r2
 8002c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c38:	787b      	ldrb	r3, [r7, #1]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c44:	e003      	b.n	8002c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c46:	887b      	ldrh	r3, [r7, #2]
 8002c48:	041a      	lsls	r2, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	619a      	str	r2, [r3, #24]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d104      	bne.n	8002c7e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	041a      	lsls	r2, r3, #16
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e11f      	b.n	8002ee2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fd ff4c 	bl	8000b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	; 0x24
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cf4:	f001 f820 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8002cf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4a7b      	ldr	r2, [pc, #492]	; (8002eec <HAL_I2C_Init+0x25c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d807      	bhi.n	8002d14 <HAL_I2C_Init+0x84>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a7a      	ldr	r2, [pc, #488]	; (8002ef0 <HAL_I2C_Init+0x260>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	bf94      	ite	ls
 8002d0c:	2301      	movls	r3, #1
 8002d0e:	2300      	movhi	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e006      	b.n	8002d22 <HAL_I2C_Init+0x92>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a77      	ldr	r2, [pc, #476]	; (8002ef4 <HAL_I2C_Init+0x264>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bf94      	ite	ls
 8002d1c:	2301      	movls	r3, #1
 8002d1e:	2300      	movhi	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e0db      	b.n	8002ee2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4a72      	ldr	r2, [pc, #456]	; (8002ef8 <HAL_I2C_Init+0x268>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	0c9b      	lsrs	r3, r3, #18
 8002d34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4a64      	ldr	r2, [pc, #400]	; (8002eec <HAL_I2C_Init+0x25c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d802      	bhi.n	8002d64 <HAL_I2C_Init+0xd4>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	3301      	adds	r3, #1
 8002d62:	e009      	b.n	8002d78 <HAL_I2C_Init+0xe8>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	4a63      	ldr	r2, [pc, #396]	; (8002efc <HAL_I2C_Init+0x26c>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	099b      	lsrs	r3, r3, #6
 8002d76:	3301      	adds	r3, #1
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4956      	ldr	r1, [pc, #344]	; (8002eec <HAL_I2C_Init+0x25c>)
 8002d94:	428b      	cmp	r3, r1
 8002d96:	d80d      	bhi.n	8002db4 <HAL_I2C_Init+0x124>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e59      	subs	r1, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	bf38      	it	cc
 8002db0:	2304      	movcc	r3, #4
 8002db2:	e04f      	b.n	8002e54 <HAL_I2C_Init+0x1c4>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d111      	bne.n	8002de0 <HAL_I2C_Init+0x150>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	440b      	add	r3, r1
 8002dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e012      	b.n	8002e06 <HAL_I2C_Init+0x176>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1e58      	subs	r0, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	0099      	lsls	r1, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Init+0x17e>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e022      	b.n	8002e54 <HAL_I2C_Init+0x1c4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10e      	bne.n	8002e34 <HAL_I2C_Init+0x1a4>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1e58      	subs	r0, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	440b      	add	r3, r1
 8002e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e32:	e00f      	b.n	8002e54 <HAL_I2C_Init+0x1c4>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e58      	subs	r0, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	0099      	lsls	r1, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	6809      	ldr	r1, [r1, #0]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6911      	ldr	r1, [r2, #16]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68d2      	ldr	r2, [r2, #12]
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	000186a0 	.word	0x000186a0
 8002ef0:	001e847f 	.word	0x001e847f
 8002ef4:	003d08ff 	.word	0x003d08ff
 8002ef8:	431bde83 	.word	0x431bde83
 8002efc:	10624dd3 	.word	0x10624dd3

08002f00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	817b      	strh	r3, [r7, #10]
 8002f10:	4613      	mov	r3, r2
 8002f12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff fbae 	bl	8002674 <HAL_GetTick>
 8002f18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	f040 80e0 	bne.w	80030e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2319      	movs	r3, #25
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4970      	ldr	r1, [pc, #448]	; (80030f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f964 	bl	8003200 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e0d3      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2C_Master_Transmit+0x50>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e0cc      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d007      	beq.n	8002f76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2221      	movs	r2, #33	; 0x21
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2210      	movs	r2, #16
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	893a      	ldrh	r2, [r7, #8]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a50      	ldr	r2, [pc, #320]	; (80030f8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fb8:	8979      	ldrh	r1, [r7, #10]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f89c 	bl	80030fc <I2C_MasterRequestWrite>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e08d      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fe4:	e066      	b.n	80030b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	6a39      	ldr	r1, [r7, #32]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f9de 	bl	80033ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d107      	bne.n	800300e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e06b      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b04      	cmp	r3, #4
 800304e:	d11b      	bne.n	8003088 <HAL_I2C_Master_Transmit+0x188>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	d017      	beq.n	8003088 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	6a39      	ldr	r1, [r7, #32]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f9ce 	bl	800342e <I2C_WaitOnBTFFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2b04      	cmp	r3, #4
 800309e:	d107      	bne.n	80030b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e01a      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d194      	bne.n	8002fe6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	00100002 	.word	0x00100002
 80030f8:	ffff0000 	.word	0xffff0000

080030fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	460b      	mov	r3, r1
 800310a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d006      	beq.n	8003126 <I2C_MasterRequestWrite+0x2a>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d003      	beq.n	8003126 <I2C_MasterRequestWrite+0x2a>
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003124:	d108      	bne.n	8003138 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e00b      	b.n	8003150 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	2b12      	cmp	r3, #18
 800313e:	d107      	bne.n	8003150 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f84f 	bl	8003200 <I2C_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00d      	beq.n	8003184 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003176:	d103      	bne.n	8003180 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e035      	b.n	80031f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800318c:	d108      	bne.n	80031a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800318e:	897b      	ldrh	r3, [r7, #10]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800319c:	611a      	str	r2, [r3, #16]
 800319e:	e01b      	b.n	80031d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031a0:	897b      	ldrh	r3, [r7, #10]
 80031a2:	11db      	asrs	r3, r3, #7
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f003 0306 	and.w	r3, r3, #6
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f063 030f 	orn	r3, r3, #15
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	490e      	ldr	r1, [pc, #56]	; (80031f8 <I2C_MasterRequestWrite+0xfc>)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f875 	bl	80032ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e010      	b.n	80031f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031ce:	897b      	ldrh	r3, [r7, #10]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4907      	ldr	r1, [pc, #28]	; (80031fc <I2C_MasterRequestWrite+0x100>)
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f865 	bl	80032ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	00010008 	.word	0x00010008
 80031fc:	00010002 	.word	0x00010002

08003200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003210:	e025      	b.n	800325e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d021      	beq.n	800325e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321a:	f7ff fa2b 	bl	8002674 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d302      	bcc.n	8003230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d116      	bne.n	800325e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e023      	b.n	80032a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d10d      	bne.n	8003284 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4013      	ands	r3, r2
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf0c      	ite	eq
 800327a:	2301      	moveq	r3, #1
 800327c:	2300      	movne	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	e00c      	b.n	800329e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	43da      	mvns	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4013      	ands	r3, r2
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf0c      	ite	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	2300      	movne	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d0b6      	beq.n	8003212 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032bc:	e051      	b.n	8003362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032cc:	d123      	bne.n	8003316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f043 0204 	orr.w	r2, r3, #4
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e046      	b.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d021      	beq.n	8003362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331e:	f7ff f9a9 	bl	8002674 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d302      	bcc.n	8003334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d116      	bne.n	8003362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f043 0220 	orr.w	r2, r3, #32
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e020      	b.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d10c      	bne.n	8003386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	43da      	mvns	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4013      	ands	r3, r2
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	bf14      	ite	ne
 800337e:	2301      	movne	r3, #1
 8003380:	2300      	moveq	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	e00b      	b.n	800339e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	43da      	mvns	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4013      	ands	r3, r2
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d18d      	bne.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b8:	e02d      	b.n	8003416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f878 	bl	80034b0 <I2C_IsAcknowledgeFailed>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e02d      	b.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d021      	beq.n	8003416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d2:	f7ff f94f 	bl	8002674 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d302      	bcc.n	80033e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d116      	bne.n	8003416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f043 0220 	orr.w	r2, r3, #32
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e007      	b.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003420:	2b80      	cmp	r3, #128	; 0x80
 8003422:	d1ca      	bne.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800343a:	e02d      	b.n	8003498 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f837 	bl	80034b0 <I2C_IsAcknowledgeFailed>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e02d      	b.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d021      	beq.n	8003498 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003454:	f7ff f90e 	bl	8002674 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	429a      	cmp	r2, r3
 8003462:	d302      	bcc.n	800346a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d116      	bne.n	8003498 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e007      	b.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d1ca      	bne.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c6:	d11b      	bne.n	8003500 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f043 0204 	orr.w	r2, r3, #4
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e25b      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d075      	beq.n	800361a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352e:	4ba3      	ldr	r3, [pc, #652]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b04      	cmp	r3, #4
 8003538:	d00c      	beq.n	8003554 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353a:	4ba0      	ldr	r3, [pc, #640]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003542:	2b08      	cmp	r3, #8
 8003544:	d112      	bne.n	800356c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003546:	4b9d      	ldr	r3, [pc, #628]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003552:	d10b      	bne.n	800356c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	4b99      	ldr	r3, [pc, #612]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d05b      	beq.n	8003618 <HAL_RCC_OscConfig+0x108>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d157      	bne.n	8003618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e236      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003574:	d106      	bne.n	8003584 <HAL_RCC_OscConfig+0x74>
 8003576:	4b91      	ldr	r3, [pc, #580]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a90      	ldr	r2, [pc, #576]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e01d      	b.n	80035c0 <HAL_RCC_OscConfig+0xb0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x98>
 800358e:	4b8b      	ldr	r3, [pc, #556]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a8a      	ldr	r2, [pc, #552]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b88      	ldr	r3, [pc, #544]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a87      	ldr	r2, [pc, #540]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0xb0>
 80035a8:	4b84      	ldr	r3, [pc, #528]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a83      	ldr	r2, [pc, #524]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b81      	ldr	r3, [pc, #516]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a80      	ldr	r2, [pc, #512]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d013      	beq.n	80035f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7ff f854 	bl	8002674 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d0:	f7ff f850 	bl	8002674 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e1fb      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	4b76      	ldr	r3, [pc, #472]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0xc0>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7ff f840 	bl	8002674 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f8:	f7ff f83c 	bl	8002674 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1e7      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360a:	4b6c      	ldr	r3, [pc, #432]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0xe8>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d063      	beq.n	80036ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003626:	4b65      	ldr	r3, [pc, #404]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003632:	4b62      	ldr	r3, [pc, #392]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800363a:	2b08      	cmp	r3, #8
 800363c:	d11c      	bne.n	8003678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363e:	4b5f      	ldr	r3, [pc, #380]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d116      	bne.n	8003678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	4b5c      	ldr	r3, [pc, #368]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_RCC_OscConfig+0x152>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e1bb      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003662:	4b56      	ldr	r3, [pc, #344]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4952      	ldr	r1, [pc, #328]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003676:	e03a      	b.n	80036ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003680:	4b4f      	ldr	r3, [pc, #316]	; (80037c0 <HAL_RCC_OscConfig+0x2b0>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7fe fff5 	bl	8002674 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368e:	f7fe fff1 	bl	8002674 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e19c      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a0:	4b46      	ldr	r3, [pc, #280]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ac:	4b43      	ldr	r3, [pc, #268]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4940      	ldr	r1, [pc, #256]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]
 80036c0:	e015      	b.n	80036ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c2:	4b3f      	ldr	r3, [pc, #252]	; (80037c0 <HAL_RCC_OscConfig+0x2b0>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe ffd4 	bl	8002674 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d0:	f7fe ffd0 	bl	8002674 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e17b      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d030      	beq.n	800375c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003702:	4b30      	ldr	r3, [pc, #192]	; (80037c4 <HAL_RCC_OscConfig+0x2b4>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7fe ffb4 	bl	8002674 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003710:	f7fe ffb0 	bl	8002674 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e15b      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x200>
 800372e:	e015      	b.n	800375c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003730:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <HAL_RCC_OscConfig+0x2b4>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003736:	f7fe ff9d 	bl	8002674 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800373e:	f7fe ff99 	bl	8002674 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e144      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f0      	bne.n	800373e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80a0 	beq.w	80038aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10f      	bne.n	800379a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <HAL_RCC_OscConfig+0x2ac>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003796:	2301      	movs	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_OscConfig+0x2b8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d121      	bne.n	80037ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_RCC_OscConfig+0x2b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a07      	ldr	r2, [pc, #28]	; (80037c8 <HAL_RCC_OscConfig+0x2b8>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b2:	f7fe ff5f 	bl	8002674 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	e011      	b.n	80037de <HAL_RCC_OscConfig+0x2ce>
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	42470000 	.word	0x42470000
 80037c4:	42470e80 	.word	0x42470e80
 80037c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037cc:	f7fe ff52 	bl	8002674 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0fd      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037de:	4b81      	ldr	r3, [pc, #516]	; (80039e4 <HAL_RCC_OscConfig+0x4d4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d106      	bne.n	8003800 <HAL_RCC_OscConfig+0x2f0>
 80037f2:	4b7d      	ldr	r3, [pc, #500]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a7c      	ldr	r2, [pc, #496]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
 80037fe:	e01c      	b.n	800383a <HAL_RCC_OscConfig+0x32a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b05      	cmp	r3, #5
 8003806:	d10c      	bne.n	8003822 <HAL_RCC_OscConfig+0x312>
 8003808:	4b77      	ldr	r3, [pc, #476]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	4a76      	ldr	r2, [pc, #472]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 800380e:	f043 0304 	orr.w	r3, r3, #4
 8003812:	6713      	str	r3, [r2, #112]	; 0x70
 8003814:	4b74      	ldr	r3, [pc, #464]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	4a73      	ldr	r2, [pc, #460]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6713      	str	r3, [r2, #112]	; 0x70
 8003820:	e00b      	b.n	800383a <HAL_RCC_OscConfig+0x32a>
 8003822:	4b71      	ldr	r3, [pc, #452]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	4a70      	ldr	r2, [pc, #448]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	6713      	str	r3, [r2, #112]	; 0x70
 800382e:	4b6e      	ldr	r3, [pc, #440]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	4a6d      	ldr	r2, [pc, #436]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d015      	beq.n	800386e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003842:	f7fe ff17 	bl	8002674 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003848:	e00a      	b.n	8003860 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fe ff13 	bl	8002674 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f241 3288 	movw	r2, #5000	; 0x1388
 8003858:	4293      	cmp	r3, r2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0bc      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0ee      	beq.n	800384a <HAL_RCC_OscConfig+0x33a>
 800386c:	e014      	b.n	8003898 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386e:	f7fe ff01 	bl	8002674 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003874:	e00a      	b.n	800388c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003876:	f7fe fefd 	bl	8002674 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f241 3288 	movw	r2, #5000	; 0x1388
 8003884:	4293      	cmp	r3, r2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e0a6      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388c:	4b56      	ldr	r3, [pc, #344]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1ee      	bne.n	8003876 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d105      	bne.n	80038aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389e:	4b52      	ldr	r3, [pc, #328]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	4a51      	ldr	r2, [pc, #324]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8092 	beq.w	80039d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b4:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d05c      	beq.n	800397a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d141      	bne.n	800394c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c8:	4b48      	ldr	r3, [pc, #288]	; (80039ec <HAL_RCC_OscConfig+0x4dc>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fe fed1 	bl	8002674 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fe fecd 	bl	8002674 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e078      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e8:	4b3f      	ldr	r3, [pc, #252]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	019b      	lsls	r3, r3, #6
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	3b01      	subs	r3, #1
 800390e:	041b      	lsls	r3, r3, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	061b      	lsls	r3, r3, #24
 8003918:	4933      	ldr	r1, [pc, #204]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800391e:	4b33      	ldr	r3, [pc, #204]	; (80039ec <HAL_RCC_OscConfig+0x4dc>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fe fea6 	bl	8002674 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392c:	f7fe fea2 	bl	8002674 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e04d      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393e:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x41c>
 800394a:	e045      	b.n	80039d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394c:	4b27      	ldr	r3, [pc, #156]	; (80039ec <HAL_RCC_OscConfig+0x4dc>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003952:	f7fe fe8f 	bl	8002674 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395a:	f7fe fe8b 	bl	8002674 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e036      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396c:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x44a>
 8003978:	e02e      	b.n	80039d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e029      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003986:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <HAL_RCC_OscConfig+0x4d8>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	429a      	cmp	r2, r3
 8003998:	d11c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d115      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039ae:	4013      	ands	r3, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d10d      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d106      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40007000 	.word	0x40007000
 80039e8:	40023800 	.word	0x40023800
 80039ec:	42470060 	.word	0x42470060

080039f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0cc      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b68      	ldr	r3, [pc, #416]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d90c      	bls.n	8003a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b65      	ldr	r3, [pc, #404]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b63      	ldr	r3, [pc, #396]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0b8      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a44:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4a58      	ldr	r2, [pc, #352]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a5c:	4b53      	ldr	r3, [pc, #332]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a52      	ldr	r2, [pc, #328]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a68:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	494d      	ldr	r1, [pc, #308]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d044      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d119      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e07f      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aae:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e06f      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abe:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e067      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f023 0203 	bic.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4934      	ldr	r1, [pc, #208]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae0:	f7fe fdc8 	bl	8002674 <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae8:	f7fe fdc4 	bl	8002674 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e04f      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 020c 	and.w	r2, r3, #12
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d1eb      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b10:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d20c      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1e:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e032      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b44:	4b19      	ldr	r3, [pc, #100]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4916      	ldr	r1, [pc, #88]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	490e      	ldr	r1, [pc, #56]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b76:	f000 f821 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003b7a:	4601      	mov	r1, r0
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b88:	5cd3      	ldrb	r3, [r2, r3]
 8003b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe fd28 	bl	80025ec <HAL_InitTick>

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023c00 	.word	0x40023c00
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	08005a44 	.word	0x08005a44
 8003bb4:	20000000 	.word	0x20000000
 8003bb8:	20000024 	.word	0x20000024

08003bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd2:	4b50      	ldr	r3, [pc, #320]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d007      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0x32>
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d008      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x38>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f040 808d 	bne.w	8003d02 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be8:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003bea:	60bb      	str	r3, [r7, #8]
       break;
 8003bec:	e08c      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bee:	4b4b      	ldr	r3, [pc, #300]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x160>)
 8003bf0:	60bb      	str	r3, [r7, #8]
      break;
 8003bf2:	e089      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf4:	4b47      	ldr	r3, [pc, #284]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bfc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfe:	4b45      	ldr	r3, [pc, #276]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d023      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	4b42      	ldr	r3, [pc, #264]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	f04f 0400 	mov.w	r4, #0
 8003c14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	ea03 0501 	and.w	r5, r3, r1
 8003c20:	ea04 0602 	and.w	r6, r4, r2
 8003c24:	4a3d      	ldr	r2, [pc, #244]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x160>)
 8003c26:	fb02 f106 	mul.w	r1, r2, r6
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	fb02 f205 	mul.w	r2, r2, r5
 8003c30:	440a      	add	r2, r1
 8003c32:	493a      	ldr	r1, [pc, #232]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x160>)
 8003c34:	fba5 0101 	umull	r0, r1, r5, r1
 8003c38:	1853      	adds	r3, r2, r1
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f04f 0400 	mov.w	r4, #0
 8003c42:	461a      	mov	r2, r3
 8003c44:	4623      	mov	r3, r4
 8003c46:	f7fc fb1b 	bl	8000280 <__aeabi_uldivmod>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e049      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c52:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	f04f 0400 	mov.w	r4, #0
 8003c5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	ea03 0501 	and.w	r5, r3, r1
 8003c68:	ea04 0602 	and.w	r6, r4, r2
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	4632      	mov	r2, r6
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	f04f 0400 	mov.w	r4, #0
 8003c78:	0154      	lsls	r4, r2, #5
 8003c7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c7e:	014b      	lsls	r3, r1, #5
 8003c80:	4619      	mov	r1, r3
 8003c82:	4622      	mov	r2, r4
 8003c84:	1b49      	subs	r1, r1, r5
 8003c86:	eb62 0206 	sbc.w	r2, r2, r6
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	f04f 0400 	mov.w	r4, #0
 8003c92:	0194      	lsls	r4, r2, #6
 8003c94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c98:	018b      	lsls	r3, r1, #6
 8003c9a:	1a5b      	subs	r3, r3, r1
 8003c9c:	eb64 0402 	sbc.w	r4, r4, r2
 8003ca0:	f04f 0100 	mov.w	r1, #0
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	00e2      	lsls	r2, r4, #3
 8003caa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cae:	00d9      	lsls	r1, r3, #3
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4614      	mov	r4, r2
 8003cb4:	195b      	adds	r3, r3, r5
 8003cb6:	eb44 0406 	adc.w	r4, r4, r6
 8003cba:	f04f 0100 	mov.w	r1, #0
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	02a2      	lsls	r2, r4, #10
 8003cc4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003cc8:	0299      	lsls	r1, r3, #10
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4614      	mov	r4, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f04f 0400 	mov.w	r4, #0
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4623      	mov	r3, r4
 8003cdc:	f7fc fad0 	bl	8000280 <__aeabi_uldivmod>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfe:	60bb      	str	r3, [r7, #8]
      break;
 8003d00:	e002      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d04:	60bb      	str	r3, [r7, #8]
      break;
 8003d06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d08:	68bb      	ldr	r3, [r7, #8]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	017d7840 	.word	0x017d7840

08003d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000000 	.word	0x20000000

08003d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d3c:	f7ff fff0 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d40:	4601      	mov	r1, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0a9b      	lsrs	r3, r3, #10
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4a03      	ldr	r2, [pc, #12]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4e:	5cd3      	ldrb	r3, [r2, r3]
 8003d50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	08005a54 	.word	0x08005a54

08003d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d64:	f7ff ffdc 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d68:	4601      	mov	r1, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	0b5b      	lsrs	r3, r3, #13
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4a03      	ldr	r2, [pc, #12]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08005a54 	.word	0x08005a54

08003d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e01d      	b.n	8003dd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fc ff18 	bl	8000be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f000 fa40 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b06      	cmp	r3, #6
 8003e06:	d007      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0201 	bic.w	r2, r2, #1
 8003e3c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <HAL_TIM_Base_Stop_IT+0x48>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	f240 4344 	movw	r3, #1092	; 0x444
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d107      	bne.n	8003e6e <HAL_TIM_Base_Stop_IT+0x48>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0201 	bic.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d122      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0202 	mvn.w	r2, #2
 8003ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9a5 	bl	800420e <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f997 	bl	80041fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f9a8 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d122      	bne.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d11b      	bne.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0204 	mvn.w	r2, #4
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f97b 	bl	800420e <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f96d 	bl	80041fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f97e 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d122      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d11b      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0208 	mvn.w	r2, #8
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2204      	movs	r2, #4
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f951 	bl	800420e <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f943 	bl	80041fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f954 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d122      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0210 	mvn.w	r2, #16
 8003fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2208      	movs	r2, #8
 8003faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f927 	bl	800420e <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f919 	bl	80041fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f92a 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d10e      	bne.n	8004000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d107      	bne.n	8004000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0201 	mvn.w	r2, #1
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fe fa4a 	bl	8002494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d10e      	bne.n	800402c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	2b80      	cmp	r3, #128	; 0x80
 800401a:	d107      	bne.n	800402c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 faa2 	bl	8004570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d10e      	bne.n	8004058 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d107      	bne.n	8004058 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f8ef 	bl	8004236 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b20      	cmp	r3, #32
 8004064:	d10e      	bne.n	8004084 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b20      	cmp	r3, #32
 8004072:	d107      	bne.n	8004084 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0220 	mvn.w	r2, #32
 800407c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa6c 	bl	800455c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIM_ConfigClockSource+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e0a6      	b.n	80041f2 <HAL_TIM_ConfigClockSource+0x166>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d067      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x120>
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d80b      	bhi.n	80040f8 <HAL_TIM_ConfigClockSource+0x6c>
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d073      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x140>
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d802      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x62>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d06f      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80040ec:	e078      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d06c      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x140>
 80040f2:	2b30      	cmp	r3, #48	; 0x30
 80040f4:	d06a      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80040f6:	e073      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040f8:	2b70      	cmp	r3, #112	; 0x70
 80040fa:	d00d      	beq.n	8004118 <HAL_TIM_ConfigClockSource+0x8c>
 80040fc:	2b70      	cmp	r3, #112	; 0x70
 80040fe:	d804      	bhi.n	800410a <HAL_TIM_ConfigClockSource+0x7e>
 8004100:	2b50      	cmp	r3, #80	; 0x50
 8004102:	d033      	beq.n	800416c <HAL_TIM_ConfigClockSource+0xe0>
 8004104:	2b60      	cmp	r3, #96	; 0x60
 8004106:	d041      	beq.n	800418c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004108:	e06a      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800410a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410e:	d066      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x152>
 8004110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004114:	d017      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004116:	e063      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6899      	ldr	r1, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f000 f98a 	bl	8004440 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800413a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	609a      	str	r2, [r3, #8]
      break;
 8004144:	e04c      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6899      	ldr	r1, [r3, #8]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f000 f973 	bl	8004440 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004168:	609a      	str	r2, [r3, #8]
      break;
 800416a:	e039      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	461a      	mov	r2, r3
 800417a:	f000 f8e7 	bl	800434c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2150      	movs	r1, #80	; 0x50
 8004184:	4618      	mov	r0, r3
 8004186:	f000 f940 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 800418a:	e029      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	461a      	mov	r2, r3
 800419a:	f000 f906 	bl	80043aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2160      	movs	r1, #96	; 0x60
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f930 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 80041aa:	e019      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	6859      	ldr	r1, [r3, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	461a      	mov	r2, r3
 80041ba:	f000 f8c7 	bl	800434c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2140      	movs	r1, #64	; 0x40
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f920 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 80041ca:	e009      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f000 f917 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 80041dc:	e000      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80041de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
	...

0800424c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a34      	ldr	r2, [pc, #208]	; (8004330 <TIM_Base_SetConfig+0xe4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00f      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426a:	d00b      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a31      	ldr	r2, [pc, #196]	; (8004334 <TIM_Base_SetConfig+0xe8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a30      	ldr	r2, [pc, #192]	; (8004338 <TIM_Base_SetConfig+0xec>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a2f      	ldr	r2, [pc, #188]	; (800433c <TIM_Base_SetConfig+0xf0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d108      	bne.n	8004296 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a25      	ldr	r2, [pc, #148]	; (8004330 <TIM_Base_SetConfig+0xe4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01b      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a4:	d017      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a22      	ldr	r2, [pc, #136]	; (8004334 <TIM_Base_SetConfig+0xe8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a21      	ldr	r2, [pc, #132]	; (8004338 <TIM_Base_SetConfig+0xec>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00f      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a20      	ldr	r2, [pc, #128]	; (800433c <TIM_Base_SetConfig+0xf0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00b      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <TIM_Base_SetConfig+0xf4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d007      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <TIM_Base_SetConfig+0xf8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d003      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a1d      	ldr	r2, [pc, #116]	; (8004348 <TIM_Base_SetConfig+0xfc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d108      	bne.n	80042e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a08      	ldr	r2, [pc, #32]	; (8004330 <TIM_Base_SetConfig+0xe4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d103      	bne.n	800431c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	615a      	str	r2, [r3, #20]
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800

0800434c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f023 0201 	bic.w	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 030a 	bic.w	r3, r3, #10
 8004388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b087      	sub	sp, #28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0210 	bic.w	r2, r3, #16
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	031b      	lsls	r3, r3, #12
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	f043 0307 	orr.w	r3, r3, #7
 800442c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	609a      	str	r2, [r3, #8]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	021a      	lsls	r2, r3, #8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	431a      	orrs	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	609a      	str	r2, [r3, #8]
}
 8004474:	bf00      	nop
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004494:	2302      	movs	r3, #2
 8004496:	e050      	b.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1c      	ldr	r2, [pc, #112]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d018      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d013      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a16      	ldr	r2, [pc, #88]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a13      	ldr	r2, [pc, #76]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d10c      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4313      	orrs	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40014000 	.word	0x40014000

0800455c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e03f      	b.n	8004616 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fc fb60 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2224      	movs	r2, #36	; 0x24
 80045b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f90b 	bl	80047e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b088      	sub	sp, #32
 8004622:	af02      	add	r7, sp, #8
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b20      	cmp	r3, #32
 800463c:	f040 8083 	bne.w	8004746 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_UART_Transmit+0x2e>
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e07b      	b.n	8004748 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_UART_Transmit+0x40>
 800465a:	2302      	movs	r3, #2
 800465c:	e074      	b.n	8004748 <HAL_UART_Transmit+0x12a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2221      	movs	r2, #33	; 0x21
 8004670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004674:	f7fd fffe 	bl	8002674 <HAL_GetTick>
 8004678:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	88fa      	ldrh	r2, [r7, #6]
 800467e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	88fa      	ldrh	r2, [r7, #6]
 8004684:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800468e:	e042      	b.n	8004716 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a6:	d122      	bne.n	80046ee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2200      	movs	r2, #0
 80046b0:	2180      	movs	r1, #128	; 0x80
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f84c 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e042      	b.n	8004748 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	3302      	adds	r3, #2
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	e017      	b.n	8004716 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	3301      	adds	r3, #1
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	e013      	b.n	8004716 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2200      	movs	r2, #0
 80046f6:	2180      	movs	r1, #128	; 0x80
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f829 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e01f      	b.n	8004748 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	60ba      	str	r2, [r7, #8]
 800470e:	781a      	ldrb	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1b7      	bne.n	8004690 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2200      	movs	r2, #0
 8004728:	2140      	movs	r1, #64	; 0x40
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f810 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e006      	b.n	8004748 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004760:	e02c      	b.n	80047bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d028      	beq.n	80047bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <UART_WaitOnFlagUntilTimeout+0x30>
 8004770:	f7fd ff80 	bl	8002674 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	429a      	cmp	r2, r3
 800477e:	d21d      	bcs.n	80047bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800478e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e00f      	b.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4013      	ands	r3, r2
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d0c3      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004826:	f023 030c 	bic.w	r3, r3, #12
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	68f9      	ldr	r1, [r7, #12]
 8004830:	430b      	orrs	r3, r1
 8004832:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004852:	f040 818b 	bne.w	8004b6c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4ac1      	ldr	r2, [pc, #772]	; (8004b60 <UART_SetConfig+0x37c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d005      	beq.n	800486c <UART_SetConfig+0x88>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4abf      	ldr	r2, [pc, #764]	; (8004b64 <UART_SetConfig+0x380>)
 8004866:	4293      	cmp	r3, r2
 8004868:	f040 80bd 	bne.w	80049e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800486c:	f7ff fa78 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8004870:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	461d      	mov	r5, r3
 8004876:	f04f 0600 	mov.w	r6, #0
 800487a:	46a8      	mov	r8, r5
 800487c:	46b1      	mov	r9, r6
 800487e:	eb18 0308 	adds.w	r3, r8, r8
 8004882:	eb49 0409 	adc.w	r4, r9, r9
 8004886:	4698      	mov	r8, r3
 8004888:	46a1      	mov	r9, r4
 800488a:	eb18 0805 	adds.w	r8, r8, r5
 800488e:	eb49 0906 	adc.w	r9, r9, r6
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800489e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048a6:	4688      	mov	r8, r1
 80048a8:	4691      	mov	r9, r2
 80048aa:	eb18 0005 	adds.w	r0, r8, r5
 80048ae:	eb49 0106 	adc.w	r1, r9, r6
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	461d      	mov	r5, r3
 80048b8:	f04f 0600 	mov.w	r6, #0
 80048bc:	196b      	adds	r3, r5, r5
 80048be:	eb46 0406 	adc.w	r4, r6, r6
 80048c2:	461a      	mov	r2, r3
 80048c4:	4623      	mov	r3, r4
 80048c6:	f7fb fcdb 	bl	8000280 <__aeabi_uldivmod>
 80048ca:	4603      	mov	r3, r0
 80048cc:	460c      	mov	r4, r1
 80048ce:	461a      	mov	r2, r3
 80048d0:	4ba5      	ldr	r3, [pc, #660]	; (8004b68 <UART_SetConfig+0x384>)
 80048d2:	fba3 2302 	umull	r2, r3, r3, r2
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	461d      	mov	r5, r3
 80048e0:	f04f 0600 	mov.w	r6, #0
 80048e4:	46a9      	mov	r9, r5
 80048e6:	46b2      	mov	sl, r6
 80048e8:	eb19 0309 	adds.w	r3, r9, r9
 80048ec:	eb4a 040a 	adc.w	r4, sl, sl
 80048f0:	4699      	mov	r9, r3
 80048f2:	46a2      	mov	sl, r4
 80048f4:	eb19 0905 	adds.w	r9, r9, r5
 80048f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80048fc:	f04f 0100 	mov.w	r1, #0
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004908:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800490c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004910:	4689      	mov	r9, r1
 8004912:	4692      	mov	sl, r2
 8004914:	eb19 0005 	adds.w	r0, r9, r5
 8004918:	eb4a 0106 	adc.w	r1, sl, r6
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	461d      	mov	r5, r3
 8004922:	f04f 0600 	mov.w	r6, #0
 8004926:	196b      	adds	r3, r5, r5
 8004928:	eb46 0406 	adc.w	r4, r6, r6
 800492c:	461a      	mov	r2, r3
 800492e:	4623      	mov	r3, r4
 8004930:	f7fb fca6 	bl	8000280 <__aeabi_uldivmod>
 8004934:	4603      	mov	r3, r0
 8004936:	460c      	mov	r4, r1
 8004938:	461a      	mov	r2, r3
 800493a:	4b8b      	ldr	r3, [pc, #556]	; (8004b68 <UART_SetConfig+0x384>)
 800493c:	fba3 1302 	umull	r1, r3, r3, r2
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	2164      	movs	r1, #100	; 0x64
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	3332      	adds	r3, #50	; 0x32
 800494e:	4a86      	ldr	r2, [pc, #536]	; (8004b68 <UART_SetConfig+0x384>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800495c:	4498      	add	r8, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	461d      	mov	r5, r3
 8004962:	f04f 0600 	mov.w	r6, #0
 8004966:	46a9      	mov	r9, r5
 8004968:	46b2      	mov	sl, r6
 800496a:	eb19 0309 	adds.w	r3, r9, r9
 800496e:	eb4a 040a 	adc.w	r4, sl, sl
 8004972:	4699      	mov	r9, r3
 8004974:	46a2      	mov	sl, r4
 8004976:	eb19 0905 	adds.w	r9, r9, r5
 800497a:	eb4a 0a06 	adc.w	sl, sl, r6
 800497e:	f04f 0100 	mov.w	r1, #0
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800498a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800498e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004992:	4689      	mov	r9, r1
 8004994:	4692      	mov	sl, r2
 8004996:	eb19 0005 	adds.w	r0, r9, r5
 800499a:	eb4a 0106 	adc.w	r1, sl, r6
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	461d      	mov	r5, r3
 80049a4:	f04f 0600 	mov.w	r6, #0
 80049a8:	196b      	adds	r3, r5, r5
 80049aa:	eb46 0406 	adc.w	r4, r6, r6
 80049ae:	461a      	mov	r2, r3
 80049b0:	4623      	mov	r3, r4
 80049b2:	f7fb fc65 	bl	8000280 <__aeabi_uldivmod>
 80049b6:	4603      	mov	r3, r0
 80049b8:	460c      	mov	r4, r1
 80049ba:	461a      	mov	r2, r3
 80049bc:	4b6a      	ldr	r3, [pc, #424]	; (8004b68 <UART_SetConfig+0x384>)
 80049be:	fba3 1302 	umull	r1, r3, r3, r2
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	2164      	movs	r1, #100	; 0x64
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	3332      	adds	r3, #50	; 0x32
 80049d0:	4a65      	ldr	r2, [pc, #404]	; (8004b68 <UART_SetConfig+0x384>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	f003 0207 	and.w	r2, r3, #7
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4442      	add	r2, r8
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	e26f      	b.n	8004ec6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049e6:	f7ff f9a7 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 80049ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	461d      	mov	r5, r3
 80049f0:	f04f 0600 	mov.w	r6, #0
 80049f4:	46a8      	mov	r8, r5
 80049f6:	46b1      	mov	r9, r6
 80049f8:	eb18 0308 	adds.w	r3, r8, r8
 80049fc:	eb49 0409 	adc.w	r4, r9, r9
 8004a00:	4698      	mov	r8, r3
 8004a02:	46a1      	mov	r9, r4
 8004a04:	eb18 0805 	adds.w	r8, r8, r5
 8004a08:	eb49 0906 	adc.w	r9, r9, r6
 8004a0c:	f04f 0100 	mov.w	r1, #0
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a20:	4688      	mov	r8, r1
 8004a22:	4691      	mov	r9, r2
 8004a24:	eb18 0005 	adds.w	r0, r8, r5
 8004a28:	eb49 0106 	adc.w	r1, r9, r6
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	461d      	mov	r5, r3
 8004a32:	f04f 0600 	mov.w	r6, #0
 8004a36:	196b      	adds	r3, r5, r5
 8004a38:	eb46 0406 	adc.w	r4, r6, r6
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4623      	mov	r3, r4
 8004a40:	f7fb fc1e 	bl	8000280 <__aeabi_uldivmod>
 8004a44:	4603      	mov	r3, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <UART_SetConfig+0x384>)
 8004a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	461d      	mov	r5, r3
 8004a5a:	f04f 0600 	mov.w	r6, #0
 8004a5e:	46a9      	mov	r9, r5
 8004a60:	46b2      	mov	sl, r6
 8004a62:	eb19 0309 	adds.w	r3, r9, r9
 8004a66:	eb4a 040a 	adc.w	r4, sl, sl
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	46a2      	mov	sl, r4
 8004a6e:	eb19 0905 	adds.w	r9, r9, r5
 8004a72:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a76:	f04f 0100 	mov.w	r1, #0
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a8a:	4689      	mov	r9, r1
 8004a8c:	4692      	mov	sl, r2
 8004a8e:	eb19 0005 	adds.w	r0, r9, r5
 8004a92:	eb4a 0106 	adc.w	r1, sl, r6
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	461d      	mov	r5, r3
 8004a9c:	f04f 0600 	mov.w	r6, #0
 8004aa0:	196b      	adds	r3, r5, r5
 8004aa2:	eb46 0406 	adc.w	r4, r6, r6
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	f7fb fbe9 	bl	8000280 <__aeabi_uldivmod>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	4b2c      	ldr	r3, [pc, #176]	; (8004b68 <UART_SetConfig+0x384>)
 8004ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	2164      	movs	r1, #100	; 0x64
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	3332      	adds	r3, #50	; 0x32
 8004ac8:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <UART_SetConfig+0x384>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ad6:	4498      	add	r8, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	461d      	mov	r5, r3
 8004adc:	f04f 0600 	mov.w	r6, #0
 8004ae0:	46a9      	mov	r9, r5
 8004ae2:	46b2      	mov	sl, r6
 8004ae4:	eb19 0309 	adds.w	r3, r9, r9
 8004ae8:	eb4a 040a 	adc.w	r4, sl, sl
 8004aec:	4699      	mov	r9, r3
 8004aee:	46a2      	mov	sl, r4
 8004af0:	eb19 0905 	adds.w	r9, r9, r5
 8004af4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004af8:	f04f 0100 	mov.w	r1, #0
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b0c:	4689      	mov	r9, r1
 8004b0e:	4692      	mov	sl, r2
 8004b10:	eb19 0005 	adds.w	r0, r9, r5
 8004b14:	eb4a 0106 	adc.w	r1, sl, r6
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	461d      	mov	r5, r3
 8004b1e:	f04f 0600 	mov.w	r6, #0
 8004b22:	196b      	adds	r3, r5, r5
 8004b24:	eb46 0406 	adc.w	r4, r6, r6
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4623      	mov	r3, r4
 8004b2c:	f7fb fba8 	bl	8000280 <__aeabi_uldivmod>
 8004b30:	4603      	mov	r3, r0
 8004b32:	460c      	mov	r4, r1
 8004b34:	461a      	mov	r2, r3
 8004b36:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <UART_SetConfig+0x384>)
 8004b38:	fba3 1302 	umull	r1, r3, r3, r2
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	2164      	movs	r1, #100	; 0x64
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	3332      	adds	r3, #50	; 0x32
 8004b4a:	4a07      	ldr	r2, [pc, #28]	; (8004b68 <UART_SetConfig+0x384>)
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	f003 0207 	and.w	r2, r3, #7
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4442      	add	r2, r8
 8004b5c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004b5e:	e1b2      	b.n	8004ec6 <UART_SetConfig+0x6e2>
 8004b60:	40011000 	.word	0x40011000
 8004b64:	40011400 	.word	0x40011400
 8004b68:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4ad7      	ldr	r2, [pc, #860]	; (8004ed0 <UART_SetConfig+0x6ec>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d005      	beq.n	8004b82 <UART_SetConfig+0x39e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4ad6      	ldr	r2, [pc, #856]	; (8004ed4 <UART_SetConfig+0x6f0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	f040 80d1 	bne.w	8004d24 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b82:	f7ff f8ed 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8004b86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	469a      	mov	sl, r3
 8004b8c:	f04f 0b00 	mov.w	fp, #0
 8004b90:	46d0      	mov	r8, sl
 8004b92:	46d9      	mov	r9, fp
 8004b94:	eb18 0308 	adds.w	r3, r8, r8
 8004b98:	eb49 0409 	adc.w	r4, r9, r9
 8004b9c:	4698      	mov	r8, r3
 8004b9e:	46a1      	mov	r9, r4
 8004ba0:	eb18 080a 	adds.w	r8, r8, sl
 8004ba4:	eb49 090b 	adc.w	r9, r9, fp
 8004ba8:	f04f 0100 	mov.w	r1, #0
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bb4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bb8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bbc:	4688      	mov	r8, r1
 8004bbe:	4691      	mov	r9, r2
 8004bc0:	eb1a 0508 	adds.w	r5, sl, r8
 8004bc4:	eb4b 0609 	adc.w	r6, fp, r9
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	f04f 0400 	mov.w	r4, #0
 8004bda:	0094      	lsls	r4, r2, #2
 8004bdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004be0:	008b      	lsls	r3, r1, #2
 8004be2:	461a      	mov	r2, r3
 8004be4:	4623      	mov	r3, r4
 8004be6:	4628      	mov	r0, r5
 8004be8:	4631      	mov	r1, r6
 8004bea:	f7fb fb49 	bl	8000280 <__aeabi_uldivmod>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4bb8      	ldr	r3, [pc, #736]	; (8004ed8 <UART_SetConfig+0x6f4>)
 8004bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	469b      	mov	fp, r3
 8004c04:	f04f 0c00 	mov.w	ip, #0
 8004c08:	46d9      	mov	r9, fp
 8004c0a:	46e2      	mov	sl, ip
 8004c0c:	eb19 0309 	adds.w	r3, r9, r9
 8004c10:	eb4a 040a 	adc.w	r4, sl, sl
 8004c14:	4699      	mov	r9, r3
 8004c16:	46a2      	mov	sl, r4
 8004c18:	eb19 090b 	adds.w	r9, r9, fp
 8004c1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c20:	f04f 0100 	mov.w	r1, #0
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c34:	4689      	mov	r9, r1
 8004c36:	4692      	mov	sl, r2
 8004c38:	eb1b 0509 	adds.w	r5, fp, r9
 8004c3c:	eb4c 060a 	adc.w	r6, ip, sl
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4619      	mov	r1, r3
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	f04f 0400 	mov.w	r4, #0
 8004c52:	0094      	lsls	r4, r2, #2
 8004c54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c58:	008b      	lsls	r3, r1, #2
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	4623      	mov	r3, r4
 8004c5e:	4628      	mov	r0, r5
 8004c60:	4631      	mov	r1, r6
 8004c62:	f7fb fb0d 	bl	8000280 <__aeabi_uldivmod>
 8004c66:	4603      	mov	r3, r0
 8004c68:	460c      	mov	r4, r1
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	4b9a      	ldr	r3, [pc, #616]	; (8004ed8 <UART_SetConfig+0x6f4>)
 8004c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2164      	movs	r1, #100	; 0x64
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	3332      	adds	r3, #50	; 0x32
 8004c80:	4a95      	ldr	r2, [pc, #596]	; (8004ed8 <UART_SetConfig+0x6f4>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c8c:	4498      	add	r8, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	469b      	mov	fp, r3
 8004c92:	f04f 0c00 	mov.w	ip, #0
 8004c96:	46d9      	mov	r9, fp
 8004c98:	46e2      	mov	sl, ip
 8004c9a:	eb19 0309 	adds.w	r3, r9, r9
 8004c9e:	eb4a 040a 	adc.w	r4, sl, sl
 8004ca2:	4699      	mov	r9, r3
 8004ca4:	46a2      	mov	sl, r4
 8004ca6:	eb19 090b 	adds.w	r9, r9, fp
 8004caa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cae:	f04f 0100 	mov.w	r1, #0
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cc2:	4689      	mov	r9, r1
 8004cc4:	4692      	mov	sl, r2
 8004cc6:	eb1b 0509 	adds.w	r5, fp, r9
 8004cca:	eb4c 060a 	adc.w	r6, ip, sl
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	f04f 0400 	mov.w	r4, #0
 8004ce0:	0094      	lsls	r4, r2, #2
 8004ce2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ce6:	008b      	lsls	r3, r1, #2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4623      	mov	r3, r4
 8004cec:	4628      	mov	r0, r5
 8004cee:	4631      	mov	r1, r6
 8004cf0:	f7fb fac6 	bl	8000280 <__aeabi_uldivmod>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4b77      	ldr	r3, [pc, #476]	; (8004ed8 <UART_SetConfig+0x6f4>)
 8004cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	2164      	movs	r1, #100	; 0x64
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	3332      	adds	r3, #50	; 0x32
 8004d0e:	4a72      	ldr	r2, [pc, #456]	; (8004ed8 <UART_SetConfig+0x6f4>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	f003 020f 	and.w	r2, r3, #15
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4442      	add	r2, r8
 8004d20:	609a      	str	r2, [r3, #8]
 8004d22:	e0d0      	b.n	8004ec6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d24:	f7ff f808 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8004d28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	469a      	mov	sl, r3
 8004d2e:	f04f 0b00 	mov.w	fp, #0
 8004d32:	46d0      	mov	r8, sl
 8004d34:	46d9      	mov	r9, fp
 8004d36:	eb18 0308 	adds.w	r3, r8, r8
 8004d3a:	eb49 0409 	adc.w	r4, r9, r9
 8004d3e:	4698      	mov	r8, r3
 8004d40:	46a1      	mov	r9, r4
 8004d42:	eb18 080a 	adds.w	r8, r8, sl
 8004d46:	eb49 090b 	adc.w	r9, r9, fp
 8004d4a:	f04f 0100 	mov.w	r1, #0
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d5e:	4688      	mov	r8, r1
 8004d60:	4691      	mov	r9, r2
 8004d62:	eb1a 0508 	adds.w	r5, sl, r8
 8004d66:	eb4b 0609 	adc.w	r6, fp, r9
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	f04f 0400 	mov.w	r4, #0
 8004d7c:	0094      	lsls	r4, r2, #2
 8004d7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d82:	008b      	lsls	r3, r1, #2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4623      	mov	r3, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	f7fb fa78 	bl	8000280 <__aeabi_uldivmod>
 8004d90:	4603      	mov	r3, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	461a      	mov	r2, r3
 8004d96:	4b50      	ldr	r3, [pc, #320]	; (8004ed8 <UART_SetConfig+0x6f4>)
 8004d98:	fba3 2302 	umull	r2, r3, r3, r2
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	469b      	mov	fp, r3
 8004da6:	f04f 0c00 	mov.w	ip, #0
 8004daa:	46d9      	mov	r9, fp
 8004dac:	46e2      	mov	sl, ip
 8004dae:	eb19 0309 	adds.w	r3, r9, r9
 8004db2:	eb4a 040a 	adc.w	r4, sl, sl
 8004db6:	4699      	mov	r9, r3
 8004db8:	46a2      	mov	sl, r4
 8004dba:	eb19 090b 	adds.w	r9, r9, fp
 8004dbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004dc2:	f04f 0100 	mov.w	r1, #0
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dd6:	4689      	mov	r9, r1
 8004dd8:	4692      	mov	sl, r2
 8004dda:	eb1b 0509 	adds.w	r5, fp, r9
 8004dde:	eb4c 060a 	adc.w	r6, ip, sl
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4619      	mov	r1, r3
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	f04f 0400 	mov.w	r4, #0
 8004df4:	0094      	lsls	r4, r2, #2
 8004df6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004dfa:	008b      	lsls	r3, r1, #2
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4623      	mov	r3, r4
 8004e00:	4628      	mov	r0, r5
 8004e02:	4631      	mov	r1, r6
 8004e04:	f7fb fa3c 	bl	8000280 <__aeabi_uldivmod>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4b32      	ldr	r3, [pc, #200]	; (8004ed8 <UART_SetConfig+0x6f4>)
 8004e10:	fba3 1302 	umull	r1, r3, r3, r2
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	2164      	movs	r1, #100	; 0x64
 8004e18:	fb01 f303 	mul.w	r3, r1, r3
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	3332      	adds	r3, #50	; 0x32
 8004e22:	4a2d      	ldr	r2, [pc, #180]	; (8004ed8 <UART_SetConfig+0x6f4>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2e:	4498      	add	r8, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	469b      	mov	fp, r3
 8004e34:	f04f 0c00 	mov.w	ip, #0
 8004e38:	46d9      	mov	r9, fp
 8004e3a:	46e2      	mov	sl, ip
 8004e3c:	eb19 0309 	adds.w	r3, r9, r9
 8004e40:	eb4a 040a 	adc.w	r4, sl, sl
 8004e44:	4699      	mov	r9, r3
 8004e46:	46a2      	mov	sl, r4
 8004e48:	eb19 090b 	adds.w	r9, r9, fp
 8004e4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e50:	f04f 0100 	mov.w	r1, #0
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e64:	4689      	mov	r9, r1
 8004e66:	4692      	mov	sl, r2
 8004e68:	eb1b 0509 	adds.w	r5, fp, r9
 8004e6c:	eb4c 060a 	adc.w	r6, ip, sl
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	4619      	mov	r1, r3
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	f04f 0400 	mov.w	r4, #0
 8004e82:	0094      	lsls	r4, r2, #2
 8004e84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e88:	008b      	lsls	r3, r1, #2
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	4623      	mov	r3, r4
 8004e8e:	4628      	mov	r0, r5
 8004e90:	4631      	mov	r1, r6
 8004e92:	f7fb f9f5 	bl	8000280 <__aeabi_uldivmod>
 8004e96:	4603      	mov	r3, r0
 8004e98:	460c      	mov	r4, r1
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ed8 <UART_SetConfig+0x6f4>)
 8004e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	2164      	movs	r1, #100	; 0x64
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	3332      	adds	r3, #50	; 0x32
 8004eb0:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <UART_SetConfig+0x6f4>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	f003 020f 	and.w	r2, r3, #15
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4442      	add	r2, r8
 8004ec2:	609a      	str	r2, [r3, #8]
}
 8004ec4:	e7ff      	b.n	8004ec6 <UART_SetConfig+0x6e2>
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed0:	40011000 	.word	0x40011000
 8004ed4:	40011400 	.word	0x40011400
 8004ed8:	51eb851f 	.word	0x51eb851f

08004edc <__errno>:
 8004edc:	4b01      	ldr	r3, [pc, #4]	; (8004ee4 <__errno+0x8>)
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	2000002c 	.word	0x2000002c

08004ee8 <__libc_init_array>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	4e0d      	ldr	r6, [pc, #52]	; (8004f20 <__libc_init_array+0x38>)
 8004eec:	4c0d      	ldr	r4, [pc, #52]	; (8004f24 <__libc_init_array+0x3c>)
 8004eee:	1ba4      	subs	r4, r4, r6
 8004ef0:	10a4      	asrs	r4, r4, #2
 8004ef2:	2500      	movs	r5, #0
 8004ef4:	42a5      	cmp	r5, r4
 8004ef6:	d109      	bne.n	8004f0c <__libc_init_array+0x24>
 8004ef8:	4e0b      	ldr	r6, [pc, #44]	; (8004f28 <__libc_init_array+0x40>)
 8004efa:	4c0c      	ldr	r4, [pc, #48]	; (8004f2c <__libc_init_array+0x44>)
 8004efc:	f000 fc26 	bl	800574c <_init>
 8004f00:	1ba4      	subs	r4, r4, r6
 8004f02:	10a4      	asrs	r4, r4, #2
 8004f04:	2500      	movs	r5, #0
 8004f06:	42a5      	cmp	r5, r4
 8004f08:	d105      	bne.n	8004f16 <__libc_init_array+0x2e>
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f10:	4798      	blx	r3
 8004f12:	3501      	adds	r5, #1
 8004f14:	e7ee      	b.n	8004ef4 <__libc_init_array+0xc>
 8004f16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f1a:	4798      	blx	r3
 8004f1c:	3501      	adds	r5, #1
 8004f1e:	e7f2      	b.n	8004f06 <__libc_init_array+0x1e>
 8004f20:	08005a98 	.word	0x08005a98
 8004f24:	08005a98 	.word	0x08005a98
 8004f28:	08005a98 	.word	0x08005a98
 8004f2c:	08005a9c 	.word	0x08005a9c

08004f30 <memset>:
 8004f30:	4402      	add	r2, r0
 8004f32:	4603      	mov	r3, r0
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d100      	bne.n	8004f3a <memset+0xa>
 8004f38:	4770      	bx	lr
 8004f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3e:	e7f9      	b.n	8004f34 <memset+0x4>

08004f40 <siprintf>:
 8004f40:	b40e      	push	{r1, r2, r3}
 8004f42:	b500      	push	{lr}
 8004f44:	b09c      	sub	sp, #112	; 0x70
 8004f46:	ab1d      	add	r3, sp, #116	; 0x74
 8004f48:	9002      	str	r0, [sp, #8]
 8004f4a:	9006      	str	r0, [sp, #24]
 8004f4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f50:	4809      	ldr	r0, [pc, #36]	; (8004f78 <siprintf+0x38>)
 8004f52:	9107      	str	r1, [sp, #28]
 8004f54:	9104      	str	r1, [sp, #16]
 8004f56:	4909      	ldr	r1, [pc, #36]	; (8004f7c <siprintf+0x3c>)
 8004f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f5c:	9105      	str	r1, [sp, #20]
 8004f5e:	6800      	ldr	r0, [r0, #0]
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	a902      	add	r1, sp, #8
 8004f64:	f000 f866 	bl	8005034 <_svfiprintf_r>
 8004f68:	9b02      	ldr	r3, [sp, #8]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	b01c      	add	sp, #112	; 0x70
 8004f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f74:	b003      	add	sp, #12
 8004f76:	4770      	bx	lr
 8004f78:	2000002c 	.word	0x2000002c
 8004f7c:	ffff0208 	.word	0xffff0208

08004f80 <__ssputs_r>:
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	688e      	ldr	r6, [r1, #8]
 8004f86:	429e      	cmp	r6, r3
 8004f88:	4682      	mov	sl, r0
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	4690      	mov	r8, r2
 8004f8e:	4699      	mov	r9, r3
 8004f90:	d837      	bhi.n	8005002 <__ssputs_r+0x82>
 8004f92:	898a      	ldrh	r2, [r1, #12]
 8004f94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f98:	d031      	beq.n	8004ffe <__ssputs_r+0x7e>
 8004f9a:	6825      	ldr	r5, [r4, #0]
 8004f9c:	6909      	ldr	r1, [r1, #16]
 8004f9e:	1a6f      	subs	r7, r5, r1
 8004fa0:	6965      	ldr	r5, [r4, #20]
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fa8:	fb95 f5f3 	sdiv	r5, r5, r3
 8004fac:	f109 0301 	add.w	r3, r9, #1
 8004fb0:	443b      	add	r3, r7
 8004fb2:	429d      	cmp	r5, r3
 8004fb4:	bf38      	it	cc
 8004fb6:	461d      	movcc	r5, r3
 8004fb8:	0553      	lsls	r3, r2, #21
 8004fba:	d530      	bpl.n	800501e <__ssputs_r+0x9e>
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	f000 fb2b 	bl	8005618 <_malloc_r>
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	b950      	cbnz	r0, 8004fdc <__ssputs_r+0x5c>
 8004fc6:	230c      	movs	r3, #12
 8004fc8:	f8ca 3000 	str.w	r3, [sl]
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fdc:	463a      	mov	r2, r7
 8004fde:	6921      	ldr	r1, [r4, #16]
 8004fe0:	f000 faa8 	bl	8005534 <memcpy>
 8004fe4:	89a3      	ldrh	r3, [r4, #12]
 8004fe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fee:	81a3      	strh	r3, [r4, #12]
 8004ff0:	6126      	str	r6, [r4, #16]
 8004ff2:	6165      	str	r5, [r4, #20]
 8004ff4:	443e      	add	r6, r7
 8004ff6:	1bed      	subs	r5, r5, r7
 8004ff8:	6026      	str	r6, [r4, #0]
 8004ffa:	60a5      	str	r5, [r4, #8]
 8004ffc:	464e      	mov	r6, r9
 8004ffe:	454e      	cmp	r6, r9
 8005000:	d900      	bls.n	8005004 <__ssputs_r+0x84>
 8005002:	464e      	mov	r6, r9
 8005004:	4632      	mov	r2, r6
 8005006:	4641      	mov	r1, r8
 8005008:	6820      	ldr	r0, [r4, #0]
 800500a:	f000 fa9e 	bl	800554a <memmove>
 800500e:	68a3      	ldr	r3, [r4, #8]
 8005010:	1b9b      	subs	r3, r3, r6
 8005012:	60a3      	str	r3, [r4, #8]
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	441e      	add	r6, r3
 8005018:	6026      	str	r6, [r4, #0]
 800501a:	2000      	movs	r0, #0
 800501c:	e7dc      	b.n	8004fd8 <__ssputs_r+0x58>
 800501e:	462a      	mov	r2, r5
 8005020:	f000 fb54 	bl	80056cc <_realloc_r>
 8005024:	4606      	mov	r6, r0
 8005026:	2800      	cmp	r0, #0
 8005028:	d1e2      	bne.n	8004ff0 <__ssputs_r+0x70>
 800502a:	6921      	ldr	r1, [r4, #16]
 800502c:	4650      	mov	r0, sl
 800502e:	f000 faa5 	bl	800557c <_free_r>
 8005032:	e7c8      	b.n	8004fc6 <__ssputs_r+0x46>

08005034 <_svfiprintf_r>:
 8005034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005038:	461d      	mov	r5, r3
 800503a:	898b      	ldrh	r3, [r1, #12]
 800503c:	061f      	lsls	r7, r3, #24
 800503e:	b09d      	sub	sp, #116	; 0x74
 8005040:	4680      	mov	r8, r0
 8005042:	460c      	mov	r4, r1
 8005044:	4616      	mov	r6, r2
 8005046:	d50f      	bpl.n	8005068 <_svfiprintf_r+0x34>
 8005048:	690b      	ldr	r3, [r1, #16]
 800504a:	b96b      	cbnz	r3, 8005068 <_svfiprintf_r+0x34>
 800504c:	2140      	movs	r1, #64	; 0x40
 800504e:	f000 fae3 	bl	8005618 <_malloc_r>
 8005052:	6020      	str	r0, [r4, #0]
 8005054:	6120      	str	r0, [r4, #16]
 8005056:	b928      	cbnz	r0, 8005064 <_svfiprintf_r+0x30>
 8005058:	230c      	movs	r3, #12
 800505a:	f8c8 3000 	str.w	r3, [r8]
 800505e:	f04f 30ff 	mov.w	r0, #4294967295
 8005062:	e0c8      	b.n	80051f6 <_svfiprintf_r+0x1c2>
 8005064:	2340      	movs	r3, #64	; 0x40
 8005066:	6163      	str	r3, [r4, #20]
 8005068:	2300      	movs	r3, #0
 800506a:	9309      	str	r3, [sp, #36]	; 0x24
 800506c:	2320      	movs	r3, #32
 800506e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005072:	2330      	movs	r3, #48	; 0x30
 8005074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005078:	9503      	str	r5, [sp, #12]
 800507a:	f04f 0b01 	mov.w	fp, #1
 800507e:	4637      	mov	r7, r6
 8005080:	463d      	mov	r5, r7
 8005082:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005086:	b10b      	cbz	r3, 800508c <_svfiprintf_r+0x58>
 8005088:	2b25      	cmp	r3, #37	; 0x25
 800508a:	d13e      	bne.n	800510a <_svfiprintf_r+0xd6>
 800508c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005090:	d00b      	beq.n	80050aa <_svfiprintf_r+0x76>
 8005092:	4653      	mov	r3, sl
 8005094:	4632      	mov	r2, r6
 8005096:	4621      	mov	r1, r4
 8005098:	4640      	mov	r0, r8
 800509a:	f7ff ff71 	bl	8004f80 <__ssputs_r>
 800509e:	3001      	adds	r0, #1
 80050a0:	f000 80a4 	beq.w	80051ec <_svfiprintf_r+0x1b8>
 80050a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a6:	4453      	add	r3, sl
 80050a8:	9309      	str	r3, [sp, #36]	; 0x24
 80050aa:	783b      	ldrb	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 809d 	beq.w	80051ec <_svfiprintf_r+0x1b8>
 80050b2:	2300      	movs	r3, #0
 80050b4:	f04f 32ff 	mov.w	r2, #4294967295
 80050b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050bc:	9304      	str	r3, [sp, #16]
 80050be:	9307      	str	r3, [sp, #28]
 80050c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050c4:	931a      	str	r3, [sp, #104]	; 0x68
 80050c6:	462f      	mov	r7, r5
 80050c8:	2205      	movs	r2, #5
 80050ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80050ce:	4850      	ldr	r0, [pc, #320]	; (8005210 <_svfiprintf_r+0x1dc>)
 80050d0:	f7fb f886 	bl	80001e0 <memchr>
 80050d4:	9b04      	ldr	r3, [sp, #16]
 80050d6:	b9d0      	cbnz	r0, 800510e <_svfiprintf_r+0xda>
 80050d8:	06d9      	lsls	r1, r3, #27
 80050da:	bf44      	itt	mi
 80050dc:	2220      	movmi	r2, #32
 80050de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050e2:	071a      	lsls	r2, r3, #28
 80050e4:	bf44      	itt	mi
 80050e6:	222b      	movmi	r2, #43	; 0x2b
 80050e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050ec:	782a      	ldrb	r2, [r5, #0]
 80050ee:	2a2a      	cmp	r2, #42	; 0x2a
 80050f0:	d015      	beq.n	800511e <_svfiprintf_r+0xea>
 80050f2:	9a07      	ldr	r2, [sp, #28]
 80050f4:	462f      	mov	r7, r5
 80050f6:	2000      	movs	r0, #0
 80050f8:	250a      	movs	r5, #10
 80050fa:	4639      	mov	r1, r7
 80050fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005100:	3b30      	subs	r3, #48	; 0x30
 8005102:	2b09      	cmp	r3, #9
 8005104:	d94d      	bls.n	80051a2 <_svfiprintf_r+0x16e>
 8005106:	b1b8      	cbz	r0, 8005138 <_svfiprintf_r+0x104>
 8005108:	e00f      	b.n	800512a <_svfiprintf_r+0xf6>
 800510a:	462f      	mov	r7, r5
 800510c:	e7b8      	b.n	8005080 <_svfiprintf_r+0x4c>
 800510e:	4a40      	ldr	r2, [pc, #256]	; (8005210 <_svfiprintf_r+0x1dc>)
 8005110:	1a80      	subs	r0, r0, r2
 8005112:	fa0b f000 	lsl.w	r0, fp, r0
 8005116:	4318      	orrs	r0, r3
 8005118:	9004      	str	r0, [sp, #16]
 800511a:	463d      	mov	r5, r7
 800511c:	e7d3      	b.n	80050c6 <_svfiprintf_r+0x92>
 800511e:	9a03      	ldr	r2, [sp, #12]
 8005120:	1d11      	adds	r1, r2, #4
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	9103      	str	r1, [sp, #12]
 8005126:	2a00      	cmp	r2, #0
 8005128:	db01      	blt.n	800512e <_svfiprintf_r+0xfa>
 800512a:	9207      	str	r2, [sp, #28]
 800512c:	e004      	b.n	8005138 <_svfiprintf_r+0x104>
 800512e:	4252      	negs	r2, r2
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	9207      	str	r2, [sp, #28]
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	783b      	ldrb	r3, [r7, #0]
 800513a:	2b2e      	cmp	r3, #46	; 0x2e
 800513c:	d10c      	bne.n	8005158 <_svfiprintf_r+0x124>
 800513e:	787b      	ldrb	r3, [r7, #1]
 8005140:	2b2a      	cmp	r3, #42	; 0x2a
 8005142:	d133      	bne.n	80051ac <_svfiprintf_r+0x178>
 8005144:	9b03      	ldr	r3, [sp, #12]
 8005146:	1d1a      	adds	r2, r3, #4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	9203      	str	r2, [sp, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	bfb8      	it	lt
 8005150:	f04f 33ff 	movlt.w	r3, #4294967295
 8005154:	3702      	adds	r7, #2
 8005156:	9305      	str	r3, [sp, #20]
 8005158:	4d2e      	ldr	r5, [pc, #184]	; (8005214 <_svfiprintf_r+0x1e0>)
 800515a:	7839      	ldrb	r1, [r7, #0]
 800515c:	2203      	movs	r2, #3
 800515e:	4628      	mov	r0, r5
 8005160:	f7fb f83e 	bl	80001e0 <memchr>
 8005164:	b138      	cbz	r0, 8005176 <_svfiprintf_r+0x142>
 8005166:	2340      	movs	r3, #64	; 0x40
 8005168:	1b40      	subs	r0, r0, r5
 800516a:	fa03 f000 	lsl.w	r0, r3, r0
 800516e:	9b04      	ldr	r3, [sp, #16]
 8005170:	4303      	orrs	r3, r0
 8005172:	3701      	adds	r7, #1
 8005174:	9304      	str	r3, [sp, #16]
 8005176:	7839      	ldrb	r1, [r7, #0]
 8005178:	4827      	ldr	r0, [pc, #156]	; (8005218 <_svfiprintf_r+0x1e4>)
 800517a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800517e:	2206      	movs	r2, #6
 8005180:	1c7e      	adds	r6, r7, #1
 8005182:	f7fb f82d 	bl	80001e0 <memchr>
 8005186:	2800      	cmp	r0, #0
 8005188:	d038      	beq.n	80051fc <_svfiprintf_r+0x1c8>
 800518a:	4b24      	ldr	r3, [pc, #144]	; (800521c <_svfiprintf_r+0x1e8>)
 800518c:	bb13      	cbnz	r3, 80051d4 <_svfiprintf_r+0x1a0>
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	3307      	adds	r3, #7
 8005192:	f023 0307 	bic.w	r3, r3, #7
 8005196:	3308      	adds	r3, #8
 8005198:	9303      	str	r3, [sp, #12]
 800519a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800519c:	444b      	add	r3, r9
 800519e:	9309      	str	r3, [sp, #36]	; 0x24
 80051a0:	e76d      	b.n	800507e <_svfiprintf_r+0x4a>
 80051a2:	fb05 3202 	mla	r2, r5, r2, r3
 80051a6:	2001      	movs	r0, #1
 80051a8:	460f      	mov	r7, r1
 80051aa:	e7a6      	b.n	80050fa <_svfiprintf_r+0xc6>
 80051ac:	2300      	movs	r3, #0
 80051ae:	3701      	adds	r7, #1
 80051b0:	9305      	str	r3, [sp, #20]
 80051b2:	4619      	mov	r1, r3
 80051b4:	250a      	movs	r5, #10
 80051b6:	4638      	mov	r0, r7
 80051b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051bc:	3a30      	subs	r2, #48	; 0x30
 80051be:	2a09      	cmp	r2, #9
 80051c0:	d903      	bls.n	80051ca <_svfiprintf_r+0x196>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0c8      	beq.n	8005158 <_svfiprintf_r+0x124>
 80051c6:	9105      	str	r1, [sp, #20]
 80051c8:	e7c6      	b.n	8005158 <_svfiprintf_r+0x124>
 80051ca:	fb05 2101 	mla	r1, r5, r1, r2
 80051ce:	2301      	movs	r3, #1
 80051d0:	4607      	mov	r7, r0
 80051d2:	e7f0      	b.n	80051b6 <_svfiprintf_r+0x182>
 80051d4:	ab03      	add	r3, sp, #12
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	4622      	mov	r2, r4
 80051da:	4b11      	ldr	r3, [pc, #68]	; (8005220 <_svfiprintf_r+0x1ec>)
 80051dc:	a904      	add	r1, sp, #16
 80051de:	4640      	mov	r0, r8
 80051e0:	f3af 8000 	nop.w
 80051e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80051e8:	4681      	mov	r9, r0
 80051ea:	d1d6      	bne.n	800519a <_svfiprintf_r+0x166>
 80051ec:	89a3      	ldrh	r3, [r4, #12]
 80051ee:	065b      	lsls	r3, r3, #25
 80051f0:	f53f af35 	bmi.w	800505e <_svfiprintf_r+0x2a>
 80051f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051f6:	b01d      	add	sp, #116	; 0x74
 80051f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fc:	ab03      	add	r3, sp, #12
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	4622      	mov	r2, r4
 8005202:	4b07      	ldr	r3, [pc, #28]	; (8005220 <_svfiprintf_r+0x1ec>)
 8005204:	a904      	add	r1, sp, #16
 8005206:	4640      	mov	r0, r8
 8005208:	f000 f882 	bl	8005310 <_printf_i>
 800520c:	e7ea      	b.n	80051e4 <_svfiprintf_r+0x1b0>
 800520e:	bf00      	nop
 8005210:	08005a5c 	.word	0x08005a5c
 8005214:	08005a62 	.word	0x08005a62
 8005218:	08005a66 	.word	0x08005a66
 800521c:	00000000 	.word	0x00000000
 8005220:	08004f81 	.word	0x08004f81

08005224 <_printf_common>:
 8005224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005228:	4691      	mov	r9, r2
 800522a:	461f      	mov	r7, r3
 800522c:	688a      	ldr	r2, [r1, #8]
 800522e:	690b      	ldr	r3, [r1, #16]
 8005230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005234:	4293      	cmp	r3, r2
 8005236:	bfb8      	it	lt
 8005238:	4613      	movlt	r3, r2
 800523a:	f8c9 3000 	str.w	r3, [r9]
 800523e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005242:	4606      	mov	r6, r0
 8005244:	460c      	mov	r4, r1
 8005246:	b112      	cbz	r2, 800524e <_printf_common+0x2a>
 8005248:	3301      	adds	r3, #1
 800524a:	f8c9 3000 	str.w	r3, [r9]
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	0699      	lsls	r1, r3, #26
 8005252:	bf42      	ittt	mi
 8005254:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005258:	3302      	addmi	r3, #2
 800525a:	f8c9 3000 	strmi.w	r3, [r9]
 800525e:	6825      	ldr	r5, [r4, #0]
 8005260:	f015 0506 	ands.w	r5, r5, #6
 8005264:	d107      	bne.n	8005276 <_printf_common+0x52>
 8005266:	f104 0a19 	add.w	sl, r4, #25
 800526a:	68e3      	ldr	r3, [r4, #12]
 800526c:	f8d9 2000 	ldr.w	r2, [r9]
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	42ab      	cmp	r3, r5
 8005274:	dc28      	bgt.n	80052c8 <_printf_common+0xa4>
 8005276:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800527a:	6822      	ldr	r2, [r4, #0]
 800527c:	3300      	adds	r3, #0
 800527e:	bf18      	it	ne
 8005280:	2301      	movne	r3, #1
 8005282:	0692      	lsls	r2, r2, #26
 8005284:	d42d      	bmi.n	80052e2 <_printf_common+0xbe>
 8005286:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800528a:	4639      	mov	r1, r7
 800528c:	4630      	mov	r0, r6
 800528e:	47c0      	blx	r8
 8005290:	3001      	adds	r0, #1
 8005292:	d020      	beq.n	80052d6 <_printf_common+0xb2>
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	68e5      	ldr	r5, [r4, #12]
 8005298:	f8d9 2000 	ldr.w	r2, [r9]
 800529c:	f003 0306 	and.w	r3, r3, #6
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	bf08      	it	eq
 80052a4:	1aad      	subeq	r5, r5, r2
 80052a6:	68a3      	ldr	r3, [r4, #8]
 80052a8:	6922      	ldr	r2, [r4, #16]
 80052aa:	bf0c      	ite	eq
 80052ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052b0:	2500      	movne	r5, #0
 80052b2:	4293      	cmp	r3, r2
 80052b4:	bfc4      	itt	gt
 80052b6:	1a9b      	subgt	r3, r3, r2
 80052b8:	18ed      	addgt	r5, r5, r3
 80052ba:	f04f 0900 	mov.w	r9, #0
 80052be:	341a      	adds	r4, #26
 80052c0:	454d      	cmp	r5, r9
 80052c2:	d11a      	bne.n	80052fa <_printf_common+0xd6>
 80052c4:	2000      	movs	r0, #0
 80052c6:	e008      	b.n	80052da <_printf_common+0xb6>
 80052c8:	2301      	movs	r3, #1
 80052ca:	4652      	mov	r2, sl
 80052cc:	4639      	mov	r1, r7
 80052ce:	4630      	mov	r0, r6
 80052d0:	47c0      	blx	r8
 80052d2:	3001      	adds	r0, #1
 80052d4:	d103      	bne.n	80052de <_printf_common+0xba>
 80052d6:	f04f 30ff 	mov.w	r0, #4294967295
 80052da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052de:	3501      	adds	r5, #1
 80052e0:	e7c3      	b.n	800526a <_printf_common+0x46>
 80052e2:	18e1      	adds	r1, r4, r3
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	2030      	movs	r0, #48	; 0x30
 80052e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052ec:	4422      	add	r2, r4
 80052ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052f6:	3302      	adds	r3, #2
 80052f8:	e7c5      	b.n	8005286 <_printf_common+0x62>
 80052fa:	2301      	movs	r3, #1
 80052fc:	4622      	mov	r2, r4
 80052fe:	4639      	mov	r1, r7
 8005300:	4630      	mov	r0, r6
 8005302:	47c0      	blx	r8
 8005304:	3001      	adds	r0, #1
 8005306:	d0e6      	beq.n	80052d6 <_printf_common+0xb2>
 8005308:	f109 0901 	add.w	r9, r9, #1
 800530c:	e7d8      	b.n	80052c0 <_printf_common+0x9c>
	...

08005310 <_printf_i>:
 8005310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005314:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005318:	460c      	mov	r4, r1
 800531a:	7e09      	ldrb	r1, [r1, #24]
 800531c:	b085      	sub	sp, #20
 800531e:	296e      	cmp	r1, #110	; 0x6e
 8005320:	4617      	mov	r7, r2
 8005322:	4606      	mov	r6, r0
 8005324:	4698      	mov	r8, r3
 8005326:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005328:	f000 80b3 	beq.w	8005492 <_printf_i+0x182>
 800532c:	d822      	bhi.n	8005374 <_printf_i+0x64>
 800532e:	2963      	cmp	r1, #99	; 0x63
 8005330:	d036      	beq.n	80053a0 <_printf_i+0x90>
 8005332:	d80a      	bhi.n	800534a <_printf_i+0x3a>
 8005334:	2900      	cmp	r1, #0
 8005336:	f000 80b9 	beq.w	80054ac <_printf_i+0x19c>
 800533a:	2958      	cmp	r1, #88	; 0x58
 800533c:	f000 8083 	beq.w	8005446 <_printf_i+0x136>
 8005340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005344:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005348:	e032      	b.n	80053b0 <_printf_i+0xa0>
 800534a:	2964      	cmp	r1, #100	; 0x64
 800534c:	d001      	beq.n	8005352 <_printf_i+0x42>
 800534e:	2969      	cmp	r1, #105	; 0x69
 8005350:	d1f6      	bne.n	8005340 <_printf_i+0x30>
 8005352:	6820      	ldr	r0, [r4, #0]
 8005354:	6813      	ldr	r3, [r2, #0]
 8005356:	0605      	lsls	r5, r0, #24
 8005358:	f103 0104 	add.w	r1, r3, #4
 800535c:	d52a      	bpl.n	80053b4 <_printf_i+0xa4>
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6011      	str	r1, [r2, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	da03      	bge.n	800536e <_printf_i+0x5e>
 8005366:	222d      	movs	r2, #45	; 0x2d
 8005368:	425b      	negs	r3, r3
 800536a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800536e:	486f      	ldr	r0, [pc, #444]	; (800552c <_printf_i+0x21c>)
 8005370:	220a      	movs	r2, #10
 8005372:	e039      	b.n	80053e8 <_printf_i+0xd8>
 8005374:	2973      	cmp	r1, #115	; 0x73
 8005376:	f000 809d 	beq.w	80054b4 <_printf_i+0x1a4>
 800537a:	d808      	bhi.n	800538e <_printf_i+0x7e>
 800537c:	296f      	cmp	r1, #111	; 0x6f
 800537e:	d020      	beq.n	80053c2 <_printf_i+0xb2>
 8005380:	2970      	cmp	r1, #112	; 0x70
 8005382:	d1dd      	bne.n	8005340 <_printf_i+0x30>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	f043 0320 	orr.w	r3, r3, #32
 800538a:	6023      	str	r3, [r4, #0]
 800538c:	e003      	b.n	8005396 <_printf_i+0x86>
 800538e:	2975      	cmp	r1, #117	; 0x75
 8005390:	d017      	beq.n	80053c2 <_printf_i+0xb2>
 8005392:	2978      	cmp	r1, #120	; 0x78
 8005394:	d1d4      	bne.n	8005340 <_printf_i+0x30>
 8005396:	2378      	movs	r3, #120	; 0x78
 8005398:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800539c:	4864      	ldr	r0, [pc, #400]	; (8005530 <_printf_i+0x220>)
 800539e:	e055      	b.n	800544c <_printf_i+0x13c>
 80053a0:	6813      	ldr	r3, [r2, #0]
 80053a2:	1d19      	adds	r1, r3, #4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6011      	str	r1, [r2, #0]
 80053a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053b0:	2301      	movs	r3, #1
 80053b2:	e08c      	b.n	80054ce <_printf_i+0x1be>
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6011      	str	r1, [r2, #0]
 80053b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053bc:	bf18      	it	ne
 80053be:	b21b      	sxthne	r3, r3
 80053c0:	e7cf      	b.n	8005362 <_printf_i+0x52>
 80053c2:	6813      	ldr	r3, [r2, #0]
 80053c4:	6825      	ldr	r5, [r4, #0]
 80053c6:	1d18      	adds	r0, r3, #4
 80053c8:	6010      	str	r0, [r2, #0]
 80053ca:	0628      	lsls	r0, r5, #24
 80053cc:	d501      	bpl.n	80053d2 <_printf_i+0xc2>
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	e002      	b.n	80053d8 <_printf_i+0xc8>
 80053d2:	0668      	lsls	r0, r5, #25
 80053d4:	d5fb      	bpl.n	80053ce <_printf_i+0xbe>
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	4854      	ldr	r0, [pc, #336]	; (800552c <_printf_i+0x21c>)
 80053da:	296f      	cmp	r1, #111	; 0x6f
 80053dc:	bf14      	ite	ne
 80053de:	220a      	movne	r2, #10
 80053e0:	2208      	moveq	r2, #8
 80053e2:	2100      	movs	r1, #0
 80053e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053e8:	6865      	ldr	r5, [r4, #4]
 80053ea:	60a5      	str	r5, [r4, #8]
 80053ec:	2d00      	cmp	r5, #0
 80053ee:	f2c0 8095 	blt.w	800551c <_printf_i+0x20c>
 80053f2:	6821      	ldr	r1, [r4, #0]
 80053f4:	f021 0104 	bic.w	r1, r1, #4
 80053f8:	6021      	str	r1, [r4, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d13d      	bne.n	800547a <_printf_i+0x16a>
 80053fe:	2d00      	cmp	r5, #0
 8005400:	f040 808e 	bne.w	8005520 <_printf_i+0x210>
 8005404:	4665      	mov	r5, ip
 8005406:	2a08      	cmp	r2, #8
 8005408:	d10b      	bne.n	8005422 <_printf_i+0x112>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	07db      	lsls	r3, r3, #31
 800540e:	d508      	bpl.n	8005422 <_printf_i+0x112>
 8005410:	6923      	ldr	r3, [r4, #16]
 8005412:	6862      	ldr	r2, [r4, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	bfde      	ittt	le
 8005418:	2330      	movle	r3, #48	; 0x30
 800541a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800541e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005422:	ebac 0305 	sub.w	r3, ip, r5
 8005426:	6123      	str	r3, [r4, #16]
 8005428:	f8cd 8000 	str.w	r8, [sp]
 800542c:	463b      	mov	r3, r7
 800542e:	aa03      	add	r2, sp, #12
 8005430:	4621      	mov	r1, r4
 8005432:	4630      	mov	r0, r6
 8005434:	f7ff fef6 	bl	8005224 <_printf_common>
 8005438:	3001      	adds	r0, #1
 800543a:	d14d      	bne.n	80054d8 <_printf_i+0x1c8>
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	b005      	add	sp, #20
 8005442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005446:	4839      	ldr	r0, [pc, #228]	; (800552c <_printf_i+0x21c>)
 8005448:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800544c:	6813      	ldr	r3, [r2, #0]
 800544e:	6821      	ldr	r1, [r4, #0]
 8005450:	1d1d      	adds	r5, r3, #4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6015      	str	r5, [r2, #0]
 8005456:	060a      	lsls	r2, r1, #24
 8005458:	d50b      	bpl.n	8005472 <_printf_i+0x162>
 800545a:	07ca      	lsls	r2, r1, #31
 800545c:	bf44      	itt	mi
 800545e:	f041 0120 	orrmi.w	r1, r1, #32
 8005462:	6021      	strmi	r1, [r4, #0]
 8005464:	b91b      	cbnz	r3, 800546e <_printf_i+0x15e>
 8005466:	6822      	ldr	r2, [r4, #0]
 8005468:	f022 0220 	bic.w	r2, r2, #32
 800546c:	6022      	str	r2, [r4, #0]
 800546e:	2210      	movs	r2, #16
 8005470:	e7b7      	b.n	80053e2 <_printf_i+0xd2>
 8005472:	064d      	lsls	r5, r1, #25
 8005474:	bf48      	it	mi
 8005476:	b29b      	uxthmi	r3, r3
 8005478:	e7ef      	b.n	800545a <_printf_i+0x14a>
 800547a:	4665      	mov	r5, ip
 800547c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005480:	fb02 3311 	mls	r3, r2, r1, r3
 8005484:	5cc3      	ldrb	r3, [r0, r3]
 8005486:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800548a:	460b      	mov	r3, r1
 800548c:	2900      	cmp	r1, #0
 800548e:	d1f5      	bne.n	800547c <_printf_i+0x16c>
 8005490:	e7b9      	b.n	8005406 <_printf_i+0xf6>
 8005492:	6813      	ldr	r3, [r2, #0]
 8005494:	6825      	ldr	r5, [r4, #0]
 8005496:	6961      	ldr	r1, [r4, #20]
 8005498:	1d18      	adds	r0, r3, #4
 800549a:	6010      	str	r0, [r2, #0]
 800549c:	0628      	lsls	r0, r5, #24
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	d501      	bpl.n	80054a6 <_printf_i+0x196>
 80054a2:	6019      	str	r1, [r3, #0]
 80054a4:	e002      	b.n	80054ac <_printf_i+0x19c>
 80054a6:	066a      	lsls	r2, r5, #25
 80054a8:	d5fb      	bpl.n	80054a2 <_printf_i+0x192>
 80054aa:	8019      	strh	r1, [r3, #0]
 80054ac:	2300      	movs	r3, #0
 80054ae:	6123      	str	r3, [r4, #16]
 80054b0:	4665      	mov	r5, ip
 80054b2:	e7b9      	b.n	8005428 <_printf_i+0x118>
 80054b4:	6813      	ldr	r3, [r2, #0]
 80054b6:	1d19      	adds	r1, r3, #4
 80054b8:	6011      	str	r1, [r2, #0]
 80054ba:	681d      	ldr	r5, [r3, #0]
 80054bc:	6862      	ldr	r2, [r4, #4]
 80054be:	2100      	movs	r1, #0
 80054c0:	4628      	mov	r0, r5
 80054c2:	f7fa fe8d 	bl	80001e0 <memchr>
 80054c6:	b108      	cbz	r0, 80054cc <_printf_i+0x1bc>
 80054c8:	1b40      	subs	r0, r0, r5
 80054ca:	6060      	str	r0, [r4, #4]
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	6123      	str	r3, [r4, #16]
 80054d0:	2300      	movs	r3, #0
 80054d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d6:	e7a7      	b.n	8005428 <_printf_i+0x118>
 80054d8:	6923      	ldr	r3, [r4, #16]
 80054da:	462a      	mov	r2, r5
 80054dc:	4639      	mov	r1, r7
 80054de:	4630      	mov	r0, r6
 80054e0:	47c0      	blx	r8
 80054e2:	3001      	adds	r0, #1
 80054e4:	d0aa      	beq.n	800543c <_printf_i+0x12c>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	079b      	lsls	r3, r3, #30
 80054ea:	d413      	bmi.n	8005514 <_printf_i+0x204>
 80054ec:	68e0      	ldr	r0, [r4, #12]
 80054ee:	9b03      	ldr	r3, [sp, #12]
 80054f0:	4298      	cmp	r0, r3
 80054f2:	bfb8      	it	lt
 80054f4:	4618      	movlt	r0, r3
 80054f6:	e7a3      	b.n	8005440 <_printf_i+0x130>
 80054f8:	2301      	movs	r3, #1
 80054fa:	464a      	mov	r2, r9
 80054fc:	4639      	mov	r1, r7
 80054fe:	4630      	mov	r0, r6
 8005500:	47c0      	blx	r8
 8005502:	3001      	adds	r0, #1
 8005504:	d09a      	beq.n	800543c <_printf_i+0x12c>
 8005506:	3501      	adds	r5, #1
 8005508:	68e3      	ldr	r3, [r4, #12]
 800550a:	9a03      	ldr	r2, [sp, #12]
 800550c:	1a9b      	subs	r3, r3, r2
 800550e:	42ab      	cmp	r3, r5
 8005510:	dcf2      	bgt.n	80054f8 <_printf_i+0x1e8>
 8005512:	e7eb      	b.n	80054ec <_printf_i+0x1dc>
 8005514:	2500      	movs	r5, #0
 8005516:	f104 0919 	add.w	r9, r4, #25
 800551a:	e7f5      	b.n	8005508 <_printf_i+0x1f8>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1ac      	bne.n	800547a <_printf_i+0x16a>
 8005520:	7803      	ldrb	r3, [r0, #0]
 8005522:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005526:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800552a:	e76c      	b.n	8005406 <_printf_i+0xf6>
 800552c:	08005a6d 	.word	0x08005a6d
 8005530:	08005a7e 	.word	0x08005a7e

08005534 <memcpy>:
 8005534:	b510      	push	{r4, lr}
 8005536:	1e43      	subs	r3, r0, #1
 8005538:	440a      	add	r2, r1
 800553a:	4291      	cmp	r1, r2
 800553c:	d100      	bne.n	8005540 <memcpy+0xc>
 800553e:	bd10      	pop	{r4, pc}
 8005540:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005548:	e7f7      	b.n	800553a <memcpy+0x6>

0800554a <memmove>:
 800554a:	4288      	cmp	r0, r1
 800554c:	b510      	push	{r4, lr}
 800554e:	eb01 0302 	add.w	r3, r1, r2
 8005552:	d807      	bhi.n	8005564 <memmove+0x1a>
 8005554:	1e42      	subs	r2, r0, #1
 8005556:	4299      	cmp	r1, r3
 8005558:	d00a      	beq.n	8005570 <memmove+0x26>
 800555a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800555e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005562:	e7f8      	b.n	8005556 <memmove+0xc>
 8005564:	4283      	cmp	r3, r0
 8005566:	d9f5      	bls.n	8005554 <memmove+0xa>
 8005568:	1881      	adds	r1, r0, r2
 800556a:	1ad2      	subs	r2, r2, r3
 800556c:	42d3      	cmn	r3, r2
 800556e:	d100      	bne.n	8005572 <memmove+0x28>
 8005570:	bd10      	pop	{r4, pc}
 8005572:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005576:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800557a:	e7f7      	b.n	800556c <memmove+0x22>

0800557c <_free_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4605      	mov	r5, r0
 8005580:	2900      	cmp	r1, #0
 8005582:	d045      	beq.n	8005610 <_free_r+0x94>
 8005584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005588:	1f0c      	subs	r4, r1, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	bfb8      	it	lt
 800558e:	18e4      	addlt	r4, r4, r3
 8005590:	f000 f8d2 	bl	8005738 <__malloc_lock>
 8005594:	4a1f      	ldr	r2, [pc, #124]	; (8005614 <_free_r+0x98>)
 8005596:	6813      	ldr	r3, [r2, #0]
 8005598:	4610      	mov	r0, r2
 800559a:	b933      	cbnz	r3, 80055aa <_free_r+0x2e>
 800559c:	6063      	str	r3, [r4, #4]
 800559e:	6014      	str	r4, [r2, #0]
 80055a0:	4628      	mov	r0, r5
 80055a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055a6:	f000 b8c8 	b.w	800573a <__malloc_unlock>
 80055aa:	42a3      	cmp	r3, r4
 80055ac:	d90c      	bls.n	80055c8 <_free_r+0x4c>
 80055ae:	6821      	ldr	r1, [r4, #0]
 80055b0:	1862      	adds	r2, r4, r1
 80055b2:	4293      	cmp	r3, r2
 80055b4:	bf04      	itt	eq
 80055b6:	681a      	ldreq	r2, [r3, #0]
 80055b8:	685b      	ldreq	r3, [r3, #4]
 80055ba:	6063      	str	r3, [r4, #4]
 80055bc:	bf04      	itt	eq
 80055be:	1852      	addeq	r2, r2, r1
 80055c0:	6022      	streq	r2, [r4, #0]
 80055c2:	6004      	str	r4, [r0, #0]
 80055c4:	e7ec      	b.n	80055a0 <_free_r+0x24>
 80055c6:	4613      	mov	r3, r2
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	b10a      	cbz	r2, 80055d0 <_free_r+0x54>
 80055cc:	42a2      	cmp	r2, r4
 80055ce:	d9fa      	bls.n	80055c6 <_free_r+0x4a>
 80055d0:	6819      	ldr	r1, [r3, #0]
 80055d2:	1858      	adds	r0, r3, r1
 80055d4:	42a0      	cmp	r0, r4
 80055d6:	d10b      	bne.n	80055f0 <_free_r+0x74>
 80055d8:	6820      	ldr	r0, [r4, #0]
 80055da:	4401      	add	r1, r0
 80055dc:	1858      	adds	r0, r3, r1
 80055de:	4282      	cmp	r2, r0
 80055e0:	6019      	str	r1, [r3, #0]
 80055e2:	d1dd      	bne.n	80055a0 <_free_r+0x24>
 80055e4:	6810      	ldr	r0, [r2, #0]
 80055e6:	6852      	ldr	r2, [r2, #4]
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	4401      	add	r1, r0
 80055ec:	6019      	str	r1, [r3, #0]
 80055ee:	e7d7      	b.n	80055a0 <_free_r+0x24>
 80055f0:	d902      	bls.n	80055f8 <_free_r+0x7c>
 80055f2:	230c      	movs	r3, #12
 80055f4:	602b      	str	r3, [r5, #0]
 80055f6:	e7d3      	b.n	80055a0 <_free_r+0x24>
 80055f8:	6820      	ldr	r0, [r4, #0]
 80055fa:	1821      	adds	r1, r4, r0
 80055fc:	428a      	cmp	r2, r1
 80055fe:	bf04      	itt	eq
 8005600:	6811      	ldreq	r1, [r2, #0]
 8005602:	6852      	ldreq	r2, [r2, #4]
 8005604:	6062      	str	r2, [r4, #4]
 8005606:	bf04      	itt	eq
 8005608:	1809      	addeq	r1, r1, r0
 800560a:	6021      	streq	r1, [r4, #0]
 800560c:	605c      	str	r4, [r3, #4]
 800560e:	e7c7      	b.n	80055a0 <_free_r+0x24>
 8005610:	bd38      	pop	{r3, r4, r5, pc}
 8005612:	bf00      	nop
 8005614:	20000108 	.word	0x20000108

08005618 <_malloc_r>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	1ccd      	adds	r5, r1, #3
 800561c:	f025 0503 	bic.w	r5, r5, #3
 8005620:	3508      	adds	r5, #8
 8005622:	2d0c      	cmp	r5, #12
 8005624:	bf38      	it	cc
 8005626:	250c      	movcc	r5, #12
 8005628:	2d00      	cmp	r5, #0
 800562a:	4606      	mov	r6, r0
 800562c:	db01      	blt.n	8005632 <_malloc_r+0x1a>
 800562e:	42a9      	cmp	r1, r5
 8005630:	d903      	bls.n	800563a <_malloc_r+0x22>
 8005632:	230c      	movs	r3, #12
 8005634:	6033      	str	r3, [r6, #0]
 8005636:	2000      	movs	r0, #0
 8005638:	bd70      	pop	{r4, r5, r6, pc}
 800563a:	f000 f87d 	bl	8005738 <__malloc_lock>
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <_malloc_r+0xac>)
 8005640:	6814      	ldr	r4, [r2, #0]
 8005642:	4621      	mov	r1, r4
 8005644:	b991      	cbnz	r1, 800566c <_malloc_r+0x54>
 8005646:	4c20      	ldr	r4, [pc, #128]	; (80056c8 <_malloc_r+0xb0>)
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	b91b      	cbnz	r3, 8005654 <_malloc_r+0x3c>
 800564c:	4630      	mov	r0, r6
 800564e:	f000 f863 	bl	8005718 <_sbrk_r>
 8005652:	6020      	str	r0, [r4, #0]
 8005654:	4629      	mov	r1, r5
 8005656:	4630      	mov	r0, r6
 8005658:	f000 f85e 	bl	8005718 <_sbrk_r>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d124      	bne.n	80056aa <_malloc_r+0x92>
 8005660:	230c      	movs	r3, #12
 8005662:	6033      	str	r3, [r6, #0]
 8005664:	4630      	mov	r0, r6
 8005666:	f000 f868 	bl	800573a <__malloc_unlock>
 800566a:	e7e4      	b.n	8005636 <_malloc_r+0x1e>
 800566c:	680b      	ldr	r3, [r1, #0]
 800566e:	1b5b      	subs	r3, r3, r5
 8005670:	d418      	bmi.n	80056a4 <_malloc_r+0x8c>
 8005672:	2b0b      	cmp	r3, #11
 8005674:	d90f      	bls.n	8005696 <_malloc_r+0x7e>
 8005676:	600b      	str	r3, [r1, #0]
 8005678:	50cd      	str	r5, [r1, r3]
 800567a:	18cc      	adds	r4, r1, r3
 800567c:	4630      	mov	r0, r6
 800567e:	f000 f85c 	bl	800573a <__malloc_unlock>
 8005682:	f104 000b 	add.w	r0, r4, #11
 8005686:	1d23      	adds	r3, r4, #4
 8005688:	f020 0007 	bic.w	r0, r0, #7
 800568c:	1ac3      	subs	r3, r0, r3
 800568e:	d0d3      	beq.n	8005638 <_malloc_r+0x20>
 8005690:	425a      	negs	r2, r3
 8005692:	50e2      	str	r2, [r4, r3]
 8005694:	e7d0      	b.n	8005638 <_malloc_r+0x20>
 8005696:	428c      	cmp	r4, r1
 8005698:	684b      	ldr	r3, [r1, #4]
 800569a:	bf16      	itet	ne
 800569c:	6063      	strne	r3, [r4, #4]
 800569e:	6013      	streq	r3, [r2, #0]
 80056a0:	460c      	movne	r4, r1
 80056a2:	e7eb      	b.n	800567c <_malloc_r+0x64>
 80056a4:	460c      	mov	r4, r1
 80056a6:	6849      	ldr	r1, [r1, #4]
 80056a8:	e7cc      	b.n	8005644 <_malloc_r+0x2c>
 80056aa:	1cc4      	adds	r4, r0, #3
 80056ac:	f024 0403 	bic.w	r4, r4, #3
 80056b0:	42a0      	cmp	r0, r4
 80056b2:	d005      	beq.n	80056c0 <_malloc_r+0xa8>
 80056b4:	1a21      	subs	r1, r4, r0
 80056b6:	4630      	mov	r0, r6
 80056b8:	f000 f82e 	bl	8005718 <_sbrk_r>
 80056bc:	3001      	adds	r0, #1
 80056be:	d0cf      	beq.n	8005660 <_malloc_r+0x48>
 80056c0:	6025      	str	r5, [r4, #0]
 80056c2:	e7db      	b.n	800567c <_malloc_r+0x64>
 80056c4:	20000108 	.word	0x20000108
 80056c8:	2000010c 	.word	0x2000010c

080056cc <_realloc_r>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	4607      	mov	r7, r0
 80056d0:	4614      	mov	r4, r2
 80056d2:	460e      	mov	r6, r1
 80056d4:	b921      	cbnz	r1, 80056e0 <_realloc_r+0x14>
 80056d6:	4611      	mov	r1, r2
 80056d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056dc:	f7ff bf9c 	b.w	8005618 <_malloc_r>
 80056e0:	b922      	cbnz	r2, 80056ec <_realloc_r+0x20>
 80056e2:	f7ff ff4b 	bl	800557c <_free_r>
 80056e6:	4625      	mov	r5, r4
 80056e8:	4628      	mov	r0, r5
 80056ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ec:	f000 f826 	bl	800573c <_malloc_usable_size_r>
 80056f0:	42a0      	cmp	r0, r4
 80056f2:	d20f      	bcs.n	8005714 <_realloc_r+0x48>
 80056f4:	4621      	mov	r1, r4
 80056f6:	4638      	mov	r0, r7
 80056f8:	f7ff ff8e 	bl	8005618 <_malloc_r>
 80056fc:	4605      	mov	r5, r0
 80056fe:	2800      	cmp	r0, #0
 8005700:	d0f2      	beq.n	80056e8 <_realloc_r+0x1c>
 8005702:	4631      	mov	r1, r6
 8005704:	4622      	mov	r2, r4
 8005706:	f7ff ff15 	bl	8005534 <memcpy>
 800570a:	4631      	mov	r1, r6
 800570c:	4638      	mov	r0, r7
 800570e:	f7ff ff35 	bl	800557c <_free_r>
 8005712:	e7e9      	b.n	80056e8 <_realloc_r+0x1c>
 8005714:	4635      	mov	r5, r6
 8005716:	e7e7      	b.n	80056e8 <_realloc_r+0x1c>

08005718 <_sbrk_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4c06      	ldr	r4, [pc, #24]	; (8005734 <_sbrk_r+0x1c>)
 800571c:	2300      	movs	r3, #0
 800571e:	4605      	mov	r5, r0
 8005720:	4608      	mov	r0, r1
 8005722:	6023      	str	r3, [r4, #0]
 8005724:	f7fb fb2e 	bl	8000d84 <_sbrk>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	d102      	bne.n	8005732 <_sbrk_r+0x1a>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	b103      	cbz	r3, 8005732 <_sbrk_r+0x1a>
 8005730:	602b      	str	r3, [r5, #0]
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	20000270 	.word	0x20000270

08005738 <__malloc_lock>:
 8005738:	4770      	bx	lr

0800573a <__malloc_unlock>:
 800573a:	4770      	bx	lr

0800573c <_malloc_usable_size_r>:
 800573c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005740:	1f18      	subs	r0, r3, #4
 8005742:	2b00      	cmp	r3, #0
 8005744:	bfbc      	itt	lt
 8005746:	580b      	ldrlt	r3, [r1, r0]
 8005748:	18c0      	addlt	r0, r0, r3
 800574a:	4770      	bx	lr

0800574c <_init>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	bf00      	nop
 8005750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005752:	bc08      	pop	{r3}
 8005754:	469e      	mov	lr, r3
 8005756:	4770      	bx	lr

08005758 <_fini>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr
